{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/markdown_view/MarkdownView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport type * as Marked from '../../../third_party/marked/marked.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport markdownViewStyles from './markdownView.css.js';\n\nimport {MarkdownLink, type MarkdownLinkData} from './MarkdownLink.js';\nimport {MarkdownImage, type MarkdownImageData} from './MarkdownImage.js';\n\nconst html = LitHtml.html;\nconst render = LitHtml.render;\n\nexport interface MarkdownViewData {\n  tokens: Marked.Marked.Token[];\n}\n\nexport class MarkdownView extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-markdown-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #tokenData: readonly Marked.Marked.Token[] = [];\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [markdownViewStyles];\n  }\n\n  set data(data: MarkdownViewData) {\n    this.#tokenData = data.tokens;\n    this.#update();\n  }\n\n  #update(): void {\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class='message'>\n        ${this.#tokenData.map(renderToken)}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-markdown-view', MarkdownView);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-view': MarkdownView;\n  }\n}\n\nconst renderChildTokens = (token: Marked.Marked.Token): LitHtml.TemplateResult[] => {\n  if ('tokens' in token && token.tokens) {\n    return token.tokens.map(renderToken);\n  }\n  throw new Error('Tokens not found');\n};\n\nconst unescape = (text: string): string => {\n  // Unescape will get rid of the escaping done by Marked to avoid double escaping due to escaping it also with Lit-html\n  // Table taken from: front_end/third_party/marked/package/src/helpers.js\n  const escapeReplacements = new Map<string, string>([\n    ['&amp;', '&'],\n    ['&lt;', '<'],\n    ['&gt;', '>'],\n    ['&quot;', '\"'],\n    ['&#39;', '\\''],\n  ]);\n  return text.replace(/&(amp|lt|gt|quot|#39);/g, (matchedString: string) => {\n    const replacement = escapeReplacements.get(matchedString);\n    return replacement ? replacement : matchedString;\n  });\n};\n\nconst renderText = (token: Marked.Marked.Token): LitHtml.TemplateResult => {\n  if ('tokens' in token && token.tokens) {\n    return html`${renderChildTokens(token)}`;\n  }\n  // Due to unescaping, unescaped html entities (see escapeReplacements' keys) will be rendered\n  // as their corresponding symbol while the rest will be rendered as verbatim.\n  // Marked's escape function can be found in front_end/third_party/marked/package/src/helpers.js\n  return html`${unescape('text' in token ? token.text : '')}`;\n};\n\nfunction templateForToken(token: Marked.Marked.Token): LitHtml.TemplateResult|null {\n  switch (token.type) {\n    case 'paragraph':\n      return html`<p>${renderChildTokens(token)}`;\n    case 'list':\n      return html`<ul>${token.items.map(renderToken)}</ul>`;\n    case 'list_item':\n      return html`<li>${renderChildTokens(token)}`;\n    case 'text':\n      return renderText(token);\n    case 'codespan':\n      return html`<code>${unescape(token.text)}</code>`;\n    case 'space':\n      return html``;\n    case 'link':\n      return html`<${MarkdownLink.litTagName} .data=${{key: token.href, title: token.text} as MarkdownLinkData}></${\n          MarkdownLink.litTagName}>`;\n    case 'image':\n      return html`<${MarkdownImage.litTagName} .data=${{key: token.href, title: token.text} as MarkdownImageData}></${\n          MarkdownImage.litTagName}>`;\n    default:\n      return null;\n  }\n}\n\nexport const renderToken = (token: Marked.Marked.Token): LitHtml.TemplateResult => {\n  const template = templateForToken(token);\n  if (template === null) {\n    throw new Error(`Markdown token type '${token.type}' not supported.`);\n  }\n  return template;\n};\n"],
  "mappings": "AAIA;AAEA;AACA;AAEA;AACA;AAEA,MAAM,OAAO,QAAQ;AACrB,MAAM,SAAS,QAAQ;AAMhB,kCAA2B,YAAY;AAAA,SAC5B,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA,eAEC;AAAA,EAE7C,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AAAA;AAAA,MAGjC,KAAK,MAAwB;AAC/B,sBAAkB,KAAK;AACvB;AAAA;AAAA,YAGc;AACd;AAAA;AAAA,YAGc;AAGd,WAAO;AAAA;AAAA,UAED,gBAAgB,IAAI;AAAA;AAAA,OAEvB,cAAc,EAAC,MAAM;AAAA;AAAA;AAK5B,iBAAiB,eAAe,gBAAgB,0BAA0B;AAS1E,MAAM,oBAAoB,CAAC,UAAyD;AAClF,MAAI,YAAY,SAAS,MAAM,QAAQ;AACrC,WAAO,MAAM,OAAO,IAAI;AAAA;AAE1B,QAAM,IAAI,MAAM;AAAA;AAGlB,MAAM,WAAW,CAAC,SAAyB;AAGzC,QAAM,qBAAqB,oBAAI,IAAoB;AAAA,IACjD,CAAC,SAAS;AAAA,IACV,CAAC,QAAQ;AAAA,IACT,CAAC,QAAQ;AAAA,IACT,CAAC,UAAU;AAAA,IACX,CAAC,SAAS;AAAA;AAEZ,SAAO,KAAK,QAAQ,2BAA2B,CAAC,kBAA0B;AACxE,UAAM,cAAc,mBAAmB,IAAI;AAC3C,WAAO,cAAc,cAAc;AAAA;AAAA;AAIvC,MAAM,aAAa,CAAC,UAAuD;AACzE,MAAI,YAAY,SAAS,MAAM,QAAQ;AACrC,WAAO,OAAO,kBAAkB;AAAA;AAKlC,SAAO,OAAO,SAAS,UAAU,QAAQ,MAAM,OAAO;AAAA;AAGxD,0BAA0B,OAAyD;AACjF,UAAQ,MAAM;AAAA,SACP;AACH,aAAO,UAAU,kBAAkB;AAAA,SAChC;AACH,aAAO,WAAW,MAAM,MAAM,IAAI;AAAA,SAC/B;AACH,aAAO,WAAW,kBAAkB;AAAA,SACjC;AACH,aAAO,WAAW;AAAA,SACf;AACH,aAAO,aAAa,SAAS,MAAM;AAAA,SAChC;AACH,aAAO;AAAA,SACJ;AACH,aAAO,QAAQ,aAAa,oBAAoB,EAAC,KAAK,MAAM,MAAM,OAAO,MAAM,YAC3E,aAAa;AAAA,SACd;AACH,aAAO,QAAQ,cAAc,oBAAoB,EAAC,KAAK,MAAM,MAAM,OAAO,MAAM,YAC5E,cAAc;AAAA;AAElB,aAAO;AAAA;AAAA;AAIN,aAAM,cAAc,CAAC,UAAuD;AACjF,QAAM,WAAW,iBAAiB;AAClC,MAAI,aAAa,MAAM;AACrB,UAAM,IAAI,MAAM,wBAAwB,MAAM;AAAA;AAEhD,SAAO;AAAA;",
  "names": []
}
