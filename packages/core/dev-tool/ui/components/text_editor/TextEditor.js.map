{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/text_editor/TextEditor.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as WindowBoundsService from '../../../services/window_bounds/window_bounds.js';\nimport * as CodeMirror from '../../../third_party/codemirror.next/codemirror.next.js';\nimport * as ThemeSupport from '../../legacy/theme_support/theme_support.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as CodeHighlighter from '../code_highlighter/code_highlighter.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\n\nimport {baseConfiguration, dummyDarkTheme, dynamicSetting, DynamicSetting, themeSelection} from './config.js';\nimport {toLineColumn, toOffset} from './position.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-text-editor': TextEditor;\n  }\n}\n\nexport class TextEditor extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-text-editor`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #activeEditor: CodeMirror.EditorView|undefined = undefined;\n  #dynamicSettings: readonly DynamicSetting<unknown>[] = DynamicSetting.none;\n  #activeSettingListeners: [Common.Settings.Setting<unknown>, (event: {data: unknown}) => void][] = [];\n  #pendingState: CodeMirror.EditorState|undefined;\n  #lastScrollPos = {left: 0, top: 0, changed: false};\n  #resizeTimeout = -1;\n  #resizeListener = (): void => {\n    if (this.#resizeTimeout < 0) {\n      this.#resizeTimeout = window.setTimeout(() => {\n        this.#resizeTimeout = -1;\n        if (this.#activeEditor) {\n          CodeMirror.repositionTooltips(this.#activeEditor);\n        }\n      }, 50);\n    }\n  };\n  #devtoolsResizeObserver = new ResizeObserver(this.#resizeListener);\n\n  constructor(pendingState?: CodeMirror.EditorState) {\n    super();\n    this.#pendingState = pendingState;\n    this.#shadow.adoptedStyleSheets = [CodeHighlighter.Style.default];\n  }\n\n  #createEditor(): CodeMirror.EditorView {\n    this.#activeEditor = new CodeMirror.EditorView({\n      state: this.state,\n      parent: this.#shadow,\n      root: this.#shadow,\n      dispatch: (tr: CodeMirror.Transaction): void => {\n        this.editor.update([tr]);\n        if (tr.reconfigured) {\n          this.#ensureSettingListeners();\n        }\n      },\n    });\n\n    this.#restoreScrollPosition(this.#activeEditor);\n    this.#activeEditor.scrollDOM.addEventListener('scroll', event => {\n      if (!this.#activeEditor) {\n        return;\n      }\n\n      this.#saveScrollPosition(this.#activeEditor, {\n        scrollLeft: (event.target as HTMLElement).scrollLeft,\n        scrollTop: (event.target as HTMLElement).scrollTop,\n      });\n\n      this.scrollEventHandledToSaveScrollPositionForTest();\n    });\n\n    this.#ensureSettingListeners();\n    this.#startObservingResize();\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      const currentTheme = ThemeSupport.ThemeSupport.instance().themeName() === 'dark' ? dummyDarkTheme : [];\n      this.editor.dispatch({\n        effects: themeSelection.reconfigure(currentTheme),\n      });\n    });\n    return this.#activeEditor;\n  }\n\n  get editor(): CodeMirror.EditorView {\n    return this.#activeEditor || this.#createEditor();\n  }\n\n  dispatch(spec: CodeMirror.TransactionSpec): void {\n    return this.editor.dispatch(spec);\n  }\n\n  get state(): CodeMirror.EditorState {\n    if (this.#activeEditor) {\n      return this.#activeEditor.state;\n    }\n    if (!this.#pendingState) {\n      this.#pendingState = CodeMirror.EditorState.create({extensions: baseConfiguration('')});\n    }\n    return this.#pendingState;\n  }\n\n  set state(state: CodeMirror.EditorState) {\n    if (this.#pendingState === state) {\n      return;\n    }\n\n    this.#pendingState = state;\n\n    if (this.#activeEditor) {\n      this.#activeEditor.setState(state);\n      this.#ensureSettingListeners();\n    }\n  }\n\n  #restoreScrollPosition(editor: CodeMirror.EditorView): void {\n    // Only restore scroll position if the scroll position\n    // has already changed. This check is needed because\n    // we only want to restore scroll for the text editors\n    // that are itself scrollable which, when scrolled,\n    // triggers 'scroll' event from `scrollDOM` meaning that\n    // it contains a scrollable `scrollDOM` that is scrolled.\n    if (!this.#lastScrollPos.changed) {\n      return;\n    }\n\n    // Instead of reaching to the internal DOM node\n    // of CodeMirror `scrollDOM` and setting the scroll\n    // position directly via `scrollLeft` and `scrollTop`\n    // we're using the public `scrollIntoView` effect.\n    // However, this effect doesn't provide a way to\n    // scroll to the given rectangle position.\n    // So, as a \"workaround\", we're instructing it to scroll to\n    // the start of the page with last scroll position margins\n    // from the sides.\n    editor.dispatch({\n      effects: CodeMirror.EditorView.scrollIntoView(0, {\n        x: 'start',\n        xMargin: -this.#lastScrollPos.left,\n        y: 'start',\n        yMargin: -this.#lastScrollPos.top,\n      }),\n    });\n  }\n\n  // `scrollIntoView` starts the scrolling from the start of the `line`\n  // not the content area and there is a padding between the\n  // sides and initial character of the line. So, we're saving\n  // the last scroll position with this margin taken into account.\n  #saveScrollPosition(editor: CodeMirror.EditorView, {scrollLeft, scrollTop}: {scrollLeft: number, scrollTop: number}):\n      void {\n    const contentRect = editor.contentDOM.getBoundingClientRect();\n\n    // In some cases `editor.coordsAtPos(0)` can return `null`\n    // (maybe, somehow, the editor is not visible yet).\n    // So, in that case, we don't take margins from the sides\n    // into account by setting `coordsAtZero` rectangle\n    // to be the same with `contentRect`.\n    const coordsAtZero = editor.coordsAtPos(0) ?? {\n      top: contentRect.top,\n      left: contentRect.left,\n      bottom: contentRect.bottom,\n      right: contentRect.right,\n    };\n\n    this.#lastScrollPos.left = scrollLeft + (contentRect.left - coordsAtZero.left);\n    this.#lastScrollPos.top = scrollTop + (contentRect.top - coordsAtZero.top);\n    this.#lastScrollPos.changed = true;\n  }\n\n  scrollEventHandledToSaveScrollPositionForTest(): void {\n  }\n\n  connectedCallback(): void {\n    if (!this.#activeEditor) {\n      this.#createEditor();\n    } else {\n      this.#restoreScrollPosition(this.#activeEditor);\n    }\n  }\n\n  disconnectedCallback(): void {\n    if (this.#activeEditor) {\n      this.#activeEditor.dispatch({effects: clearHighlightedLine.of(null)});\n      this.#pendingState = this.#activeEditor.state;\n      this.#devtoolsResizeObserver.disconnect();\n      window.removeEventListener('resize', this.#resizeListener);\n      this.#activeEditor.destroy();\n      this.#activeEditor = undefined;\n      this.#ensureSettingListeners();\n    }\n  }\n\n  focus(): void {\n    if (this.#activeEditor) {\n      this.#activeEditor.focus();\n    }\n  }\n\n  #ensureSettingListeners(): void {\n    const dynamicSettings = this.#activeEditor ? this.#activeEditor.state.facet(dynamicSetting) : DynamicSetting.none;\n    if (dynamicSettings === this.#dynamicSettings) {\n      return;\n    }\n    this.#dynamicSettings = dynamicSettings;\n\n    for (const [setting, listener] of this.#activeSettingListeners) {\n      setting.removeChangeListener(listener);\n    }\n    this.#activeSettingListeners = [];\n\n    const settings = Common.Settings.Settings.instance();\n    for (const dynamicSetting of dynamicSettings) {\n      const handler = ({data}: {data: unknown}): void => {\n        const change = dynamicSetting.sync(this.state, data);\n        if (change && this.#activeEditor) {\n          this.#activeEditor.dispatch({effects: change});\n        }\n      };\n      const setting = settings.moduleSetting(dynamicSetting.settingName);\n      setting.addChangeListener(handler);\n      this.#activeSettingListeners.push([setting, handler]);\n    }\n  }\n\n  #startObservingResize(): void {\n    const devtoolsElement =\n        WindowBoundsService.WindowBoundsService.WindowBoundsServiceImpl.instance().getDevToolsBoundingElement();\n    if (devtoolsElement) {\n      this.#devtoolsResizeObserver.observe(devtoolsElement);\n    }\n    window.addEventListener('resize', this.#resizeListener);\n  }\n\n  revealPosition(selection: CodeMirror.EditorSelection, highlight: boolean = true): void {\n    const view = this.#activeEditor;\n    if (!view) {\n      return;\n    }\n\n    const line = view.state.doc.lineAt(selection.main.head);\n    const effects: CodeMirror.StateEffect<unknown>[] = [];\n    if (highlight) {\n      // Lazily register the highlight line state.\n      if (!view.state.field(highlightedLineState, false)) {\n        view.dispatch({effects: CodeMirror.StateEffect.appendConfig.of(highlightedLineState)});\n      } else {\n        // Always clear the previous highlight line first. This cannot be done\n        // in combination with the other effects, as it wouldn't restart the CSS\n        // highlight line animation.\n        view.dispatch({effects: clearHighlightedLine.of(null)});\n      }\n\n      // Here we finally start the actual highlight line effects.\n      effects.push(setHighlightedLine.of(line.from));\n    }\n\n    const editorRect = view.scrollDOM.getBoundingClientRect();\n    const targetPos = view.coordsAtPos(selection.main.head);\n    if (!targetPos || targetPos.top < editorRect.top || targetPos.bottom > editorRect.bottom) {\n      effects.push(CodeMirror.EditorView.scrollIntoView(selection.main, {y: 'center'}));\n    }\n\n    view.dispatch({\n      selection,\n      effects,\n      userEvent: 'select.reveal',\n    });\n  }\n\n  createSelection(head: {lineNumber: number, columnNumber: number}, anchor?: {\n    lineNumber: number,\n    columnNumber: number,\n  }): CodeMirror.EditorSelection {\n    const {doc} = this.state;\n    const headPos = toOffset(doc, head);\n    return CodeMirror.EditorSelection.single(anchor ? toOffset(doc, anchor) : headPos, headPos);\n  }\n\n  toLineColumn(pos: number): {lineNumber: number, columnNumber: number} {\n    return toLineColumn(this.state.doc, pos);\n  }\n\n  toOffset(pos: {lineNumber: number, columnNumber: number}): number {\n    return toOffset(this.state.doc, pos);\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-text-editor', TextEditor);\n\n// Line highlighting\n\nconst clearHighlightedLine = CodeMirror.StateEffect.define<null>();\nconst setHighlightedLine = CodeMirror.StateEffect.define<number>();\n\nconst highlightedLineState = CodeMirror.StateField.define<CodeMirror.DecorationSet>({\n  create: () => CodeMirror.Decoration.none,\n  update(value, tr) {\n    if (!tr.changes.empty && value.size) {\n      value = value.map(tr.changes);\n    }\n    for (const effect of tr.effects) {\n      if (effect.is(clearHighlightedLine)) {\n        value = CodeMirror.Decoration.none;\n      } else if (effect.is(setHighlightedLine)) {\n        value = CodeMirror.Decoration.set([\n          CodeMirror.Decoration.line({attributes: {class: 'cm-highlightedLine'}}).range(effect.value),\n        ]);\n      }\n    }\n    return value;\n  },\n  provide: field => CodeMirror.EditorView.decorations.from(field, value => value),\n});\n"],
  "mappings": "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",
  "names": []
}
