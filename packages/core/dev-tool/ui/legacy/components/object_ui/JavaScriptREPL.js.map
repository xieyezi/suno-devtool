{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/object_ui/JavaScriptREPL.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as UI from '../../legacy.js';\n\nimport {RemoteObjectPreviewFormatter} from './RemoteObjectPreviewFormatter.js';\n\nexport class JavaScriptREPL {\n  static wrapObjectLiteral(code: string): string {\n    // Only parenthesize what appears to be an object literal.\n    const result = /^\\s*\\{\\s*(.*)\\s*\\}[\\s;]*$/.exec(code);\n    if (result === null) {\n      return code;\n    }\n    const [, body] = result;\n    let level = 0;\n    for (const c of body) {\n      if (c === '{') {\n        level++;\n      } else if (c === '}' && --level < 0) {\n        return code;\n      }\n    }\n\n    const parse = (async(): Promise<number> => 0).constructor;\n    try {\n      // Check if the body can be interpreted as an expression.\n      parse('return {' + body + '};');\n\n      // No syntax error! Does it work parenthesized?\n      const wrappedCode = '({' + body + '})';\n      parse(wrappedCode);\n\n      return wrappedCode;\n    } catch (e) {\n      return code;\n    }\n  }\n\n  static async evaluateAndBuildPreview(\n      text: string, throwOnSideEffect: boolean, replMode: boolean, timeout?: number, allowErrors?: boolean,\n      objectGroup?: string, awaitPromise: boolean = false, silent: boolean = false): Promise<{\n    preview: DocumentFragment,\n    result: SDK.RuntimeModel.EvaluationResult|null,\n  }> {\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    const isTextLong = text.length > maxLengthForEvaluation;\n    if (!text || !executionContext || (throwOnSideEffect && isTextLong)) {\n      return {preview: document.createDocumentFragment(), result: null};\n    }\n\n    const expression = JavaScriptREPL.wrapObjectLiteral(text);\n    const options = {\n      expression: expression,\n      generatePreview: true,\n      includeCommandLineAPI: true,\n      throwOnSideEffect: throwOnSideEffect,\n      timeout: timeout,\n      objectGroup: objectGroup,\n      disableBreaks: true,\n      replMode: replMode,\n      silent: silent,\n      returnByValue: undefined,\n      allowUnsafeEvalBlockedByCSP: undefined,\n    };\n    const result = await executionContext.evaluate(options, false /* userGesture */, awaitPromise);\n    const preview = JavaScriptREPL.buildEvaluationPreview(result, allowErrors);\n    return {preview, result};\n  }\n\n  private static buildEvaluationPreview(result: SDK.RuntimeModel.EvaluationResult, allowErrors?: boolean):\n      DocumentFragment {\n    const fragment = document.createDocumentFragment();\n    if ('error' in result) {\n      return fragment;\n    }\n\n    if (result.exceptionDetails && result.exceptionDetails.exception && result.exceptionDetails.exception.description) {\n      const exception = result.exceptionDetails.exception.description;\n      if (exception.startsWith('TypeError: ') || allowErrors) {\n        fragment.createChild('span').textContent = result.exceptionDetails.text + ' ' + exception;\n      }\n      return fragment;\n    }\n\n    const formatter = new RemoteObjectPreviewFormatter();\n    const {preview, type, subtype, className, description} = result.object;\n    if (preview && type === 'object' && subtype !== 'node' && subtype !== 'trustedtype') {\n      formatter.appendObjectPreview(fragment, preview, false /* isEntry */);\n    } else {\n      const nonObjectPreview = formatter.renderPropertyPreview(\n          type, subtype, className, Platform.StringUtilities.trimEndWithMaxLength(description || '', 400));\n      fragment.appendChild(nonObjectPreview);\n    }\n    return fragment;\n  }\n}\n\nlet maxLengthForEvaluation: number = 2000;\n\nexport function setMaxLengthForEvaluation(value: number): void {\n  maxLengthForEvaluation = value;\n}\n\nexport function getMaxLengthForEvaluation(): number {\n  return maxLengthForEvaluation;\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAEA;AAEO,4BAAqB;AAAA,SACnB,kBAAkB,MAAsB;AAE7C,UAAM,SAAS,4BAA4B,KAAK;AAChD,QAAI,WAAW,MAAM;AACnB,aAAO;AAAA;AAET,UAAM,CAAC,EAAE,QAAQ;AACjB,QAAI,QAAQ;AACZ,eAAW,KAAK,MAAM;AACpB,UAAI,MAAM,KAAK;AACb;AAAA,iBACS,MAAM,OAAO,EAAE,QAAQ,GAAG;AACnC,eAAO;AAAA;AAAA;AAIX,UAAM,QAAS,aAA4B,GAAG;AAC9C,QAAI;AAEF,YAAM,aAAa,OAAO;AAG1B,YAAM,cAAc,OAAO,OAAO;AAClC,YAAM;AAEN,aAAO;AAAA,aACA,GAAP;AACA,aAAO;AAAA;AAAA;AAAA,eAIE,wBACT,MAAc,mBAA4B,UAAmB,SAAkB,aAC/E,aAAsB,eAAwB,OAAO,SAAkB,OAGxE;AACD,UAAM,mBAAmB,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,aAAa;AAC/E,UAAM,aAAa,KAAK,SAAS;AACjC,QAAI,CAAC,QAAQ,CAAC,oBAAqB,qBAAqB,YAAa;AACnE,aAAO,EAAC,SAAS,SAAS,0BAA0B,QAAQ;AAAA;AAG9D,UAAM,aAAa,eAAe,kBAAkB;AACpD,UAAM,UAAU;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,uBAAuB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA,eAAe;AAAA,MACf,6BAA6B;AAAA;AAE/B,UAAM,SAAS,MAAM,iBAAiB,SAAS,SAAS,OAAyB;AACjF,UAAM,UAAU,eAAe,uBAAuB,QAAQ;AAC9D,WAAO,EAAC,SAAS;AAAA;AAAA,SAGJ,uBAAuB,QAA2C,aAC5D;AACnB,UAAM,WAAW,SAAS;AAC1B,QAAI,WAAW,QAAQ;AACrB,aAAO;AAAA;AAGT,QAAI,OAAO,oBAAoB,OAAO,iBAAiB,aAAa,OAAO,iBAAiB,UAAU,aAAa;AACjH,YAAM,YAAY,OAAO,iBAAiB,UAAU;AACpD,UAAI,UAAU,WAAW,kBAAkB,aAAa;AACtD,iBAAS,YAAY,QAAQ,cAAc,OAAO,iBAAiB,OAAO,MAAM;AAAA;AAElF,aAAO;AAAA;AAGT,UAAM,YAAY,IAAI;AACtB,UAAM,EAAC,SAAS,MAAM,SAAS,WAAW,gBAAe,OAAO;AAChE,QAAI,WAAW,SAAS,YAAY,YAAY,UAAU,YAAY,eAAe;AACnF,gBAAU,oBAAoB,UAAU,SAAS;AAAA,WAC5C;AACL,YAAM,mBAAmB,UAAU,sBAC/B,MAAM,SAAS,WAAW,SAAS,gBAAgB,qBAAqB,eAAe,IAAI;AAC/F,eAAS,YAAY;AAAA;AAEvB,WAAO;AAAA;AAAA;AAIX,IAAI,yBAAiC;AAE9B,0CAAmC,OAAqB;AAC7D,2BAAyB;AAAA;AAGpB,4CAA6C;AAClD,SAAO;AAAA;",
  "names": []
}
