{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Color.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../platform/platform.js';\n\nimport {ColorConverter} from './ColorConverter.js';\nimport {\n  blendColors,\n  contrastRatioAPCA,\n  desiredLuminanceAPCA,\n  luminance,\n  luminanceAPCA,\n  rgbaToHsla,\n  rgbaToHwba,\n} from './ColorUtils.js';\n\n// Parses angle in the form of\n// `<angle>deg`, `<angle>turn`, `<angle>grad and `<angle>rad`\n// and returns the canonicalized `degree`.\nfunction parseAngle(angleText: string): number|null {\n  const angle = angleText.replace(/(deg|g?rad|turn)$/, '');\n  // @ts-ignore: isNaN can accept strings\n  if (isNaN(angle) || angleText.match(/\\s+(deg|g?rad|turn)/)) {\n    return null;\n  }\n\n  const number = parseFloat(angle);\n  if (angleText.includes('turn')) {\n    // 1turn === 360deg\n    return number * 360;\n  }\n\n  if (angleText.includes('grad')) {\n    // 1grad === 0.9deg\n    return number * 9 / 10;\n  }\n\n  if (angleText.includes('rad')) {\n    // \u03C0rad === 180deg\n    return number * 180 / Math.PI;\n  }\n\n  // 1deg === 1deg ^_^\n  return number;\n}\n\n// Returns the `Format` equivalent from the format text\nexport function getFormat(formatText: string): Format|null {\n  switch (formatText) {\n    case Format.Nickname:\n      return Format.Nickname;\n    case Format.HEX:\n      return Format.HEX;\n    case Format.ShortHEX:\n      return Format.ShortHEX;\n    case Format.HEXA:\n      return Format.HEXA;\n    case Format.ShortHEXA:\n      return Format.ShortHEXA;\n    case Format.RGB:\n      return Format.RGB;\n    case Format.RGBA:\n      return Format.RGBA;\n    case Format.HSL:\n      return Format.HSL;\n    case Format.HSLA:\n      return Format.HSLA;\n    case Format.HWB:\n      return Format.HWB;\n    case Format.HWBA:\n      return Format.HWBA;\n    case Format.LCH:\n      return Format.LCH;\n    case Format.OKLCH:\n      return Format.OKLCH;\n    case Format.LAB:\n      return Format.LAB;\n    case Format.OKLAB:\n      return Format.OKLAB;\n  }\n\n  return getColorSpace(formatText);\n}\n\n// Returns the `ColorSpace` equivalent from the color space text\ntype ColorSpace = Format.SRGB|Format.SRGB_LINEAR|Format.DISPLAY_P3|Format.A98_RGB|Format.PROPHOTO_RGB|\n                  Format.REC_2020|Format.XYZ|Format.XYZ_D50|Format.XYZ_D65;\nfunction getColorSpace(colorSpaceText: string): ColorSpace|null {\n  switch (colorSpaceText) {\n    case Format.SRGB:\n      return Format.SRGB;\n    case Format.SRGB_LINEAR:\n      return Format.SRGB_LINEAR;\n    case Format.DISPLAY_P3:\n      return Format.DISPLAY_P3;\n    case Format.A98_RGB:\n      return Format.A98_RGB;\n    case Format.PROPHOTO_RGB:\n      return Format.PROPHOTO_RGB;\n    case Format.REC_2020:\n      return Format.REC_2020;\n    case Format.XYZ:\n      return Format.XYZ;\n    case Format.XYZ_D50:\n      return Format.XYZ_D50;\n    case Format.XYZ_D65:\n      return Format.XYZ_D65;\n  }\n\n  return null;\n}\n\n/**\n * Percents in color spaces are mapped to ranges.\n * These ranges change based on the syntax.\n * For example, for 'C' in lch() c: 0% = 0, 100% = 150.\n * See: https://www.w3.org/TR/css-color-4/#funcdef-lch\n * Some percentage values can be negative\n * though their ranges don't change depending on the sign\n * (for now, according to spec).\n * @param percent % value of the number. 42 for 42%.\n * @param range Range of [min, max]. Including `min` and `max`.\n */\nfunction mapPercentToRange(percent: number, range: [number, number]): number {\n  const sign = Math.sign(percent);\n  const absPercent = Math.abs(percent);\n  const [outMin, outMax] = range;\n\n  return sign * (absPercent * (outMax - outMin) / 100 + outMin);\n}\n\n/**\n * Parses given `color()` function definition and returns the `Color` object.\n * We want to special case its parsing here because it's a bit different\n * than other color functions: rgb, lch etc. accepts 3 arguments with\n * optional alpha. This accepts 4 arguments with optional alpha.\n *\n * Instead of making `splitColorFunctionParameters` work for this case too\n * I've decided to implement it specifically.\n * @param originalText Original definition of the color with `color`\n * @param parametersText Inside of the `color()` function. ex, `display-p3 0.1 0.2 0.3 / 0%`\n * @returns `Color` object\n */\nfunction parseColorFunction(originalText: string, parametersText: string): Color|null {\n  const parameters = parametersText.trim().split(/\\s+/);\n  const [colorSpaceText, ...remainingParams] = parameters;\n  const colorSpace = getColorSpace(colorSpaceText);\n  // Color space is not known to us, do not parse the Color.\n  if (!colorSpace) {\n    return null;\n  }\n\n  // `color(<color-space>)` is a valid syntax\n  if (remainingParams.length === 0) {\n    return new ColorFunction(colorSpace, [0, 0, 0, null], originalText);\n  }\n\n  // Check if it contains `/ <alpha>` part, if so, it should be at the end\n  const alphaSeparatorIndex = remainingParams.indexOf('/');\n  const containsAlpha = alphaSeparatorIndex !== -1;\n  if (containsAlpha && alphaSeparatorIndex !== remainingParams.length - 2) {\n    // Invalid syntax: like `color(<space> / <alpha> <number>)`\n    return null;\n  }\n\n  if (containsAlpha) {\n    // Since we know that the last value is <alpha>\n    // we can safely remove the alpha separator\n    // and only leave the numbers (if given correctly)\n    remainingParams.splice(alphaSeparatorIndex, 1);\n  }\n\n  // `color` cannot contain more than 4 parameters when there is alpha\n  // and cannot contain more than 3 parameters when there isn't alpha\n  const maxLength = containsAlpha ? 4 : 3;\n  if (remainingParams.length > maxLength) {\n    return null;\n  }\n\n  // Replace `none`s with 0s\n  const nonesReplacesParams = remainingParams.map(param => param === 'none' ? '0' : param);\n\n  // At this point, we know that all the values are there so we can\n  // safely try to parse all the values as number or percentage\n  const values = nonesReplacesParams.map(param => parsePercentOrNumber(param, [0, 1]));\n  const containsNull = values.includes(null);\n  // At least one value is malformatted (not a number or percentage)\n  if (containsNull) {\n    return null;\n  }\n\n  let alphaValue = 1;\n  if (containsAlpha) {\n    // We know that `alphaValue` exists at this point.\n    // See the above lines for deciding on `containsAlpha`.\n    alphaValue = values[values.length - 1] as number;\n    // We get rid of the `alpha` from the list\n    // so that all the values map to `r, g, b` from the start\n    values.pop();\n  }\n\n  // Depending on the color space\n  // this either reflects `rgb` parameters in that color space\n  // or `xyz` parameters in the given `xyz` space.\n  const rgbOrXyza: [number, number, number, number] = [\n    values[0] ?? 0,\n    values[1] ?? 0,\n    values[2] ?? 0,\n    alphaValue,\n  ];\n\n  return new ColorFunction(colorSpace, rgbOrXyza, originalText);\n}\n\ninterface SplitColorFunctionParametersOptions {\n  allowCommas: boolean;\n  convertNoneToZero: boolean;\n}\n\nexport function parse(text: string): Color|null {\n  // Simple - #hex, nickname\n  const value = text.toLowerCase().replace(/\\s+/g, '');\n  const simple = /^(?:#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})|(\\w+))$/i;\n  let match = value.match(simple);\n  if (match) {\n    if (match[1]) {\n      return Legacy.fromHex(match[1], text);\n    }\n\n    if (match[2]) {\n      return Legacy.fromName(match[2], text);\n    }\n\n    return null;\n  }\n\n  // rgb/rgba(), hsl/hsla(), hwb/hwba(), lch(), oklch(), lab(), oklab() and color()\n  match = text.toLowerCase().match(/^\\s*(?:(rgba?)|(hsla?)|(hwba?)|(lch)|(oklch)|(lab)|(oklab)|(color))\\((.*)\\)\\s*$/);\n  if (match) {\n    const isRgbaMatch = Boolean(match[1]);   // rgb/rgba()\n    const isHslaMatch = Boolean(match[2]);   // hsl/hsla()\n    const isHwbaMatch = Boolean(match[3]);   // hwb/hwba()\n    const isLchMatch = Boolean(match[4]);    // lch()\n    const isOklchMatch = Boolean(match[5]);  // oklch()\n    const isLabMatch = Boolean(match[6]);    // lab()\n    const isOklabMatch = Boolean(match[7]);  // oklab()\n    const isColorMatch = Boolean(match[8]);  // color()\n    const valuesText = match[9];\n\n    // Parse color function first because extracting values for\n    // this function is not the same as the other ones\n    // so, we're not using any of the logic below.\n    if (isColorMatch) {\n      return parseColorFunction(text, valuesText);\n    }\n\n    const isOldSyntax = isRgbaMatch || isHslaMatch || isHwbaMatch;\n    const allowCommas = isRgbaMatch || isHslaMatch;\n    const convertNoneToZero = !isOldSyntax;  // Convert 'none' keyword to zero in new syntaxes\n\n    const values = splitColorFunctionParameters(valuesText, {allowCommas, convertNoneToZero});\n    if (!values) {\n      return null;\n    }\n    const spec: ColorParameterSpec = [values[0], values[1], values[2], values[3]];\n    if (isRgbaMatch) {\n      return Legacy.fromRGBAFunction(values[0], values[1], values[2], values[3], text);\n    }\n\n    if (isHslaMatch) {\n      return Legacy.fromHSLA(values[0], values[1], values[2], values[3], text);\n    }\n\n    if (isHwbaMatch) {\n      return Legacy.fromHWB(values[0], values[1], values[2], values[3], text);\n    }\n\n    if (isLchMatch) {\n      return LCH.fromSpec(spec, text);\n    }\n\n    if (isOklchMatch) {\n      return Oklch.fromSpec(spec, text);\n    }\n\n    if (isLabMatch) {\n      return Lab.fromSpec(spec, text);\n    }\n\n    if (isOklabMatch) {\n      return Oklab.fromSpec(spec, text);\n    }\n  }\n\n  return null;\n}\n\n/**\n * Split the color parameters of (e.g.) rgb(a), hsl(a), hwb(a) functions.\n */\nfunction splitColorFunctionParameters(\n    content: string, {allowCommas, convertNoneToZero}: SplitColorFunctionParametersOptions): string[]|null {\n  const components = content.trim();\n  let values: string[] = [];\n\n  if (allowCommas) {\n    values = components.split(/\\s*,\\s*/);\n  }\n  if (!allowCommas || values.length === 1) {\n    values = components.split(/\\s+/);\n    if (values[3] === '/') {\n      values.splice(3, 1);\n      if (values.length !== 4) {\n        return null;\n      }\n    } else if (\n        (values.length > 2 && values[2].indexOf('/') !== -1) || (values.length > 3 && values[3].indexOf('/') !== -1)) {\n      const alpha = values.slice(2, 4).join('');\n      values = values.slice(0, 2).concat(alpha.split(/\\//)).concat(values.slice(4));\n    } else if (values.length >= 4) {\n      return null;\n    }\n  }\n  if (values.length !== 3 && values.length !== 4 || values.indexOf('') > -1) {\n    return null;\n  }\n\n  // Question: what should we do with `alpha` being none?\n  if (convertNoneToZero) {\n    return values.map(value => value === 'none' ? '0' : value);\n  }\n\n  return values;\n}\n\nfunction clamp(value: number, {min, max}: {min?: number, max?: number}): number;\nfunction clamp(value: null, {min, max}: {min?: number, max?: number}): null;\nfunction clamp(value: number|null, {min, max}: {min?: number, max?: number}): number|null;\nfunction clamp(value: number|null, {min, max}: {min?: number, max?: number}): number|null {\n  if (value === null) {\n    return value;\n  }\n  if (min) {\n    value = Math.max(value, min);\n  }\n  if (max) {\n    value = Math.min(value, max);\n  }\n  return value;\n}\n\nfunction parsePercentage(value: string, range: [number, number]): number|null {\n  if (!value.endsWith('%')) {\n    return null;\n  }\n  const percentage = parseFloat(value.substr(0, value.length - 1));\n  return isNaN(percentage) ? null : mapPercentToRange(percentage, range);\n}\n\nfunction parseNumber(value: string): number|null {\n  const number = parseFloat(value);\n  return isNaN(number) ? null : number;\n}\n\nfunction parseAlpha(value: string|undefined): number|null {\n  if (value === undefined) {\n    return null;\n  }\n  return clamp(parsePercentage(value, [0, 1]) ?? parseNumber(value), {min: 0, max: 1});\n}\n\n/**\n *\n * @param value Text value to be parsed in the form of 'number|percentage'.\n * @param range Range to map the percentage.\n * @returns If it is not percentage, returns number directly; otherwise,\n * maps the percentage to the range. For example:\n * - 30% in range [0, 100] is 30\n * - 20% in range [0, 1] is 0.5\n */\nfunction parsePercentOrNumber(value: string, range: [number, number] = [0, 1]): number|null {\n  // @ts-ignore: isNaN can accept strings\n  if (isNaN(value.replace('%', ''))) {\n    return null;\n  }\n  const parsed = parseFloat(value);\n\n  if (value.indexOf('%') !== -1) {\n    if (value.indexOf('%') !== value.length - 1) {\n      return null;\n    }\n    return mapPercentToRange(parsed, range);\n  }\n  return parsed;\n}\n\nfunction parseRgbNumeric(value: string): number|null {\n  const parsed = parsePercentOrNumber(value);\n  if (parsed === null) {\n    return null;\n  }\n\n  if (value.indexOf('%') !== -1) {\n    return parsed;\n  }\n  return parsed / 255;\n}\n\nfunction parseHueNumeric(value: string): number|null {\n  const angle = value.replace(/(deg|g?rad|turn)$/, '');\n  // @ts-ignore: isNaN can accept strings\n  if (isNaN(angle) || value.match(/\\s+(deg|g?rad|turn)/)) {\n    return null;\n  }\n  const number = parseFloat(angle);\n\n  if (value.indexOf('turn') !== -1) {\n    return number % 1;\n  }\n  if (value.indexOf('grad') !== -1) {\n    return (number / 400) % 1;\n  }\n  if (value.indexOf('rad') !== -1) {\n    return (number / (2 * Math.PI)) % 1;\n  }\n  return (number / 360) % 1;\n}\n\nfunction parseSatLightNumeric(value: string): number|null {\n  // @ts-ignore: isNaN can accept strings\n  if (value.indexOf('%') !== value.length - 1 || isNaN(value.replace('%', ''))) {\n    return null;\n  }\n  const parsed = parseFloat(value);\n  return Math.min(1, parsed / 100);\n}\n\nfunction parseAlphaNumeric(value: string): number|null {\n  return parsePercentOrNumber(value);\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction hsva2hsla(hsva: number[], out_hsla: number[]): void {\n  const h = hsva[0];\n  let s: 0|number = hsva[1];\n  const v = hsva[2];\n\n  const t = (2 - s) * v;\n  if (v === 0 || s === 0) {\n    s = 0;\n  } else {\n    s *= v / (t < 1 ? t : 2 - t);\n  }\n\n  out_hsla[0] = h;\n  out_hsla[1] = s;\n  out_hsla[2] = t / 2;\n  out_hsla[3] = hsva[3];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function hsl2rgb(hsl: number[], out_rgb: number[]): void {\n  const h = hsl[0];\n  let s: 0|number = hsl[1];\n  const l = hsl[2];\n\n  function hue2rgb(p: number, q: number, h: number): number {\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n\n    if ((h * 6) < 1) {\n      return p + (q - p) * h * 6;\n    }\n    if ((h * 2) < 1) {\n      return q;\n    }\n    if ((h * 3) < 2) {\n      return p + (q - p) * ((2 / 3) - h) * 6;\n    }\n    return p;\n  }\n\n  if (s < 0) {\n    s = 0;\n  }\n\n  let q;\n  if (l <= 0.5) {\n    q = l * (1 + s);\n  } else {\n    q = l + s - (l * s);\n  }\n\n  const p = 2 * l - q;\n\n  const tr = h + (1 / 3);\n  const tg = h;\n  const tb = h - (1 / 3);\n\n  out_rgb[0] = hue2rgb(p, q, tr);\n  out_rgb[1] = hue2rgb(p, q, tg);\n  out_rgb[2] = hue2rgb(p, q, tb);\n  out_rgb[3] = hsl[3];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction hwb2rgb(hwb: number[], out_rgb: number[]): void {\n  const h = hwb[0];\n  const w = hwb[1];\n  const b = hwb[2];\n\n  if (w + b >= 1) {\n    out_rgb[0] = out_rgb[1] = out_rgb[2] = w / (w + b);\n    out_rgb[3] = hwb[3];\n  } else {\n    hsl2rgb([h, 1, 0.5, hwb[3]], out_rgb);\n    for (let i = 0; i < 3; ++i) {\n      out_rgb[i] += w - (w + b) * out_rgb[i];\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function hsva2rgba(hsva: number[], out_rgba: number[]): void {\n  const tmpHSLA = [0, 0, 0, 0];\n  hsva2hsla(hsva, tmpHSLA);\n  hsl2rgb(tmpHSLA, out_rgba);\n}\n\n/**\n * Compute a desired luminance given a given luminance and a desired contrast\n * ratio.\n */\nexport function desiredLuminance(luminance: number, contrast: number, lighter: boolean): number {\n  function computeLuminance(): number {\n    if (lighter) {\n      return (luminance + 0.05) * contrast - 0.05;\n    }\n    return (luminance + 0.05) / contrast - 0.05;\n  }\n  let desiredLuminance = computeLuminance();\n  if (desiredLuminance < 0 || desiredLuminance > 1) {\n    lighter = !lighter;\n    desiredLuminance = computeLuminance();\n  }\n  return desiredLuminance;\n}\n\n/**\n * Approach a value of the given component of `candidateHSVA` such that the\n * calculated luminance of `candidateHSVA` approximates `desiredLuminance`.\n */\nexport function approachColorValue(\n    candidateHSVA: number[], bgRGBA: number[], index: number, desiredLuminance: number,\n    candidateLuminance: (arg0: Array<number>) => number): number|null {\n  const epsilon = 0.0002;\n\n  let x = candidateHSVA[index];\n  let multiplier = 1;\n  let dLuminance: number = candidateLuminance(candidateHSVA) - desiredLuminance;\n  let previousSign = Math.sign(dLuminance);\n\n  for (let guard = 100; guard; guard--) {\n    if (Math.abs(dLuminance) < epsilon) {\n      candidateHSVA[index] = x;\n      return x;\n    }\n\n    const sign = Math.sign(dLuminance);\n    if (sign !== previousSign) {\n      // If `x` overshoots the correct value, halve the step size.\n      multiplier /= 2;\n      previousSign = sign;\n    } else if (x < 0 || x > 1) {\n      // If there is no overshoot and `x` is out of bounds, there is no\n      // acceptable value for `x`.\n      return null;\n    }\n\n    // Adjust `x` by a multiple of `dLuminance` to decrease step size as\n    // the computed luminance converges on `desiredLuminance`.\n    x += multiplier * (index === 2 ? -dLuminance : dLuminance);\n\n    candidateHSVA[index] = x;\n\n    dLuminance = candidateLuminance(candidateHSVA) - desiredLuminance;\n  }\n\n  return null;\n}\n\nexport function findFgColorForContrast(fgColor: Legacy, bgColor: Legacy, requiredContrast: number): Legacy|null {\n  const candidateHSVA = fgColor.hsva();\n  const bgRGBA = bgColor.rgba();\n\n  const candidateLuminance = (candidateHSVA: number[]): number => {\n    return luminance(blendColors(Legacy.fromHSVA(candidateHSVA).rgba(), bgRGBA));\n  };\n\n  const bgLuminance = luminance(bgColor.rgba());\n  const fgLuminance = candidateLuminance(candidateHSVA);\n  const fgIsLighter = fgLuminance > bgLuminance;\n\n  const desired = desiredLuminance(bgLuminance, requiredContrast, fgIsLighter);\n\n  const saturationComponentIndex = 1;\n  const valueComponentIndex = 2;\n\n  if (approachColorValue(candidateHSVA, bgRGBA, valueComponentIndex, desired, candidateLuminance)) {\n    return Legacy.fromHSVA(candidateHSVA);\n  }\n\n  candidateHSVA[valueComponentIndex] = 1;\n  if (approachColorValue(candidateHSVA, bgRGBA, saturationComponentIndex, desired, candidateLuminance)) {\n    return Legacy.fromHSVA(candidateHSVA);\n  }\n\n  return null;\n}\n\nexport function findFgColorForContrastAPCA(fgColor: Legacy, bgColor: Legacy, requiredContrast: number): Legacy|null {\n  const candidateHSVA = fgColor.hsva();\n  const bgRGBA = bgColor.rgba();\n\n  const candidateLuminance = (candidateHSVA: number[]): number => {\n    return luminanceAPCA(Legacy.fromHSVA(candidateHSVA).rgba());\n  };\n\n  const bgLuminance = luminanceAPCA(bgColor.rgba());\n  const fgLuminance = candidateLuminance(candidateHSVA);\n  const fgIsLighter = fgLuminance >= bgLuminance;\n  const desiredLuminance = desiredLuminanceAPCA(bgLuminance, requiredContrast, fgIsLighter);\n\n  const saturationComponentIndex = 1;\n  const valueComponentIndex = 2;\n\n  if (approachColorValue(candidateHSVA, bgRGBA, valueComponentIndex, desiredLuminance, candidateLuminance)) {\n    const candidate = Legacy.fromHSVA(candidateHSVA);\n    if (Math.abs(contrastRatioAPCA(bgColor.rgba(), candidate.rgba())) >= requiredContrast) {\n      return candidate;\n    }\n  }\n\n  candidateHSVA[valueComponentIndex] = 1;\n  if (approachColorValue(candidateHSVA, bgRGBA, saturationComponentIndex, desiredLuminance, candidateLuminance)) {\n    const candidate = Legacy.fromHSVA(candidateHSVA);\n    if (Math.abs(contrastRatioAPCA(bgColor.rgba(), candidate.rgba())) >= requiredContrast) {\n      return candidate;\n    }\n  }\n\n  return null;\n}\n\ntype ColorParameterSpec = [string, string, string, string | undefined];\n\ninterface ColorConversions {\n  [Format.Nickname](): Legacy;\n  [Format.HEX](): Legacy;\n  [Format.ShortHEX](): Legacy;\n  [Format.HEXA](): Legacy;\n  [Format.ShortHEXA](): Legacy;\n  [Format.RGB](): Legacy;\n  [Format.RGBA](): Legacy;\n  [Format.HSL](): Legacy;\n  [Format.HSLA](): Legacy;\n  [Format.HWB](): Legacy;\n  [Format.HWBA](): Legacy;\n  [Format.LCH](): LCH;\n  [Format.OKLCH](): Oklch;\n  [Format.LAB](): Lab;\n  [Format.OKLAB](): Oklab;\n\n  [Format.SRGB](): ColorFunction;\n  [Format.SRGB_LINEAR](): ColorFunction;\n  [Format.DISPLAY_P3](): ColorFunction;\n  [Format.A98_RGB](): ColorFunction;\n  [Format.PROPHOTO_RGB](): ColorFunction;\n  [Format.REC_2020](): ColorFunction;\n  [Format.XYZ](): ColorFunction;\n  [Format.XYZ_D50](): ColorFunction;\n  [Format.XYZ_D65](): ColorFunction;\n}\n\nexport interface Color {\n  equal(color: Color): boolean;\n  asString(format?: Format): string|null;\n  setAlpha(alpha: number): Color;\n  format(): Format;\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]>;\n  asLegacyColor(): Legacy;\n}\n\nfunction stringifyWithPrecision(s: number, precision = 2): string {\n  const string = s.toFixed(precision).replace(/\\.?0*$/, '');\n  return string === '-0' ? '0' : string;\n}\n\nexport class Lab implements Color {\n  readonly #l: number;\n  readonly #a: number;\n  readonly #b: number;\n  readonly #alpha: number|null;\n  readonly #origin?: Color;\n  readonly #originalText?: string;\n\n  readonly #conversions: ColorConversions = {\n    [Format.Nickname]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.Nickname, undefined, this),\n    [Format.HEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HEX, undefined, this),\n    [Format.ShortHEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.ShortHEX, undefined, this),\n    [Format.HEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HEXA, undefined, this),\n    [Format.ShortHEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.ShortHEXA, undefined, this),\n    [Format.RGB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.RGB, undefined, this),\n    [Format.RGBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.RGBA, undefined, this),\n    [Format.HSL]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HSL, undefined, this),\n    [Format.HSLA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HSLA, undefined, this),\n    [Format.HWB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HWB, undefined, this),\n    [Format.HWBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HWBA, undefined, this),\n    [Format.LCH]: () => new LCH(...ColorConverter.labToLch(this.#l, this.#a, this.#b), this.#alpha, undefined, this),\n    [Format.OKLCH]: () => new Oklch(...ColorConverter.xyzd50ToOklch(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.LAB]: () => this,\n    [Format.OKLAB]: () => new Oklab(\n        ...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...this.#toXyzd50())), this.#alpha, undefined,\n        this),\n\n    [Format.SRGB]: () => new ColorFunction(\n        Format.SRGB, [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.SRGB_LINEAR]: () => new ColorFunction(\n        Format.SRGB_LINEAR, [...ColorConverter.xyzd50TosRGBLinear(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.DISPLAY_P3]: () => new ColorFunction(\n        Format.DISPLAY_P3, [...ColorConverter.xyzd50ToDisplayP3(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.A98_RGB]: () => new ColorFunction(\n        Format.A98_RGB, [...ColorConverter.xyzd50ToAdobeRGB(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.PROPHOTO_RGB]: () => new ColorFunction(\n        Format.PROPHOTO_RGB, [...ColorConverter.xyzd50ToProPhoto(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.REC_2020]: () => new ColorFunction(\n        Format.REC_2020, [...ColorConverter.xyzd50ToRec2020(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ]: () => new ColorFunction(\n        Format.XYZ, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ_D50]: () => new ColorFunction(Format.XYZ_D50, [...this.#toXyzd50(), this.#alpha], undefined, this),\n    [Format.XYZ_D65]: () => new ColorFunction(\n        Format.XYZ_D65, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n  };\n\n  #toXyzd50(): [number, number, number] {\n    return ColorConverter.labToXyzd50(this.#l, this.#a, this.#b);\n  }\n\n  #getRGBArray(withAlpha: boolean = true): number[] {\n    const params = [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50())];\n    if (this.#alpha !== null && withAlpha) {\n      params.push(this.#alpha);\n    }\n    return params;\n  }\n\n  constructor(l: number, a: number, b: number, alpha: number|null, originalText: string|undefined, origin?: Color) {\n    this.#l = clamp(l, {min: 0, max: 100});\n    this.#a = a;\n    this.#b = b;\n    this.#alpha = clamp(alpha, {min: 0, max: 1});\n    this.#origin = origin;\n    this.#originalText = originalText;\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (this.#origin) {\n      return this.#origin.as(format);\n    }\n    return this.#conversions[format]() as ReturnType<ColorConversions[T]>;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  equal(color: Color): boolean {\n    const lab = color.as(Format.LAB);\n    return lab.#l === this.#l && lab.#a === this.#a && lab.#b === this.#b && lab.#alpha === this.#alpha;\n  }\n  format(): Format {\n    return Format.LAB;\n  }\n  setAlpha(alpha: number): Lab {\n    return new Lab(this.#l, this.#a, this.#b, alpha, undefined);\n  }\n  asString(format?: Format): string|null {\n    if (format) {\n      return this.as(format).asString();\n    }\n    if (this.#originalText) {\n      return this.#originalText;\n    }\n    const alpha = this.#alpha === null || this.#alpha === 1 ? '' : ` / ${stringifyWithPrecision(this.#alpha)}`;\n    return `lab(${stringifyWithPrecision(this.#l)} ${stringifyWithPrecision(this.#a)} ${\n        stringifyWithPrecision(this.#b)}${alpha})`;\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): Lab|null {\n    const L = parsePercentage(spec[0], [0, 100]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const a = parsePercentage(spec[1], [0, 125]) ?? parseNumber(spec[1]);\n    if (a === null) {\n      return null;\n    }\n    const b = parsePercentage(spec[2], [0, 125]) ?? parseNumber(spec[2]);\n    if (b === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new Lab(L, a, b, alpha, text);\n  }\n}\n\nexport class LCH implements Color {\n  readonly #l: number;\n  readonly #c: number;\n  readonly #h: number;\n  readonly #alpha: number|null;\n  readonly #origin?: Color;\n  readonly #originalText?: string;\n\n  readonly #conversions: ColorConversions = {\n    [Format.Nickname]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.Nickname, undefined, this),\n    [Format.HEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HEX, undefined, this),\n    [Format.ShortHEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.ShortHEX, undefined, this),\n    [Format.HEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HEXA, undefined, this),\n    [Format.ShortHEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.ShortHEXA, undefined, this),\n    [Format.RGB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.RGB, undefined, this),\n    [Format.RGBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.RGBA, undefined, this),\n    [Format.HSL]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HSL, undefined, this),\n    [Format.HSLA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HSLA, undefined, this),\n    [Format.HWB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HWB, undefined, this),\n    [Format.HWBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HWBA, undefined, this),\n    [Format.LCH]: () => this,\n    [Format.OKLCH]: () => new Oklch(...ColorConverter.xyzd50ToOklch(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.LAB]: () => new Lab(...ColorConverter.lchToLab(this.#l, this.#c, this.#h), this.#alpha, undefined, this),\n    [Format.OKLAB]: () => new Oklab(\n        ...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...this.#toXyzd50())), this.#alpha, undefined,\n        this),\n\n    [Format.SRGB]: () => new ColorFunction(\n        Format.SRGB, [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.SRGB_LINEAR]: () => new ColorFunction(\n        Format.SRGB_LINEAR, [...ColorConverter.xyzd50TosRGBLinear(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.DISPLAY_P3]: () => new ColorFunction(\n        Format.DISPLAY_P3, [...ColorConverter.xyzd50ToDisplayP3(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.A98_RGB]: () => new ColorFunction(\n        Format.A98_RGB, [...ColorConverter.xyzd50ToAdobeRGB(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.PROPHOTO_RGB]: () => new ColorFunction(\n        Format.PROPHOTO_RGB, [...ColorConverter.xyzd50ToProPhoto(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.REC_2020]: () => new ColorFunction(\n        Format.REC_2020, [...ColorConverter.xyzd50ToRec2020(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ]: () => new ColorFunction(\n        Format.XYZ, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ_D50]: () => new ColorFunction(Format.XYZ_D50, [...this.#toXyzd50(), this.#alpha], undefined, this),\n    [Format.XYZ_D65]: () => new ColorFunction(\n        Format.XYZ_D65, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n  };\n\n  #toXyzd50(): [number, number, number] {\n    return ColorConverter.labToXyzd50(...ColorConverter.lchToLab(this.#l, this.#c, this.#h));\n  }\n\n  #getRGBArray(withAlpha: boolean = true): number[] {\n    const params = [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50())];\n    if (this.#alpha !== null && withAlpha) {\n      params.push(this.#alpha);\n    }\n    return params;\n  }\n\n  constructor(l: number, c: number, h: number, alpha: number|null, originalText: string|undefined, origin?: Color) {\n    this.#l = clamp(l, {min: 0, max: 100});\n    this.#c = clamp(c, {min: 0});\n    this.#h = h;\n    this.#alpha = clamp(alpha, {min: 0, max: 1});\n    this.#origin = origin;\n    this.#originalText = originalText;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (this.#origin) {\n      return this.#origin.as(format);\n    }\n    return this.#conversions[format]() as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const lch = color.as(Format.LCH);\n    return lch.#l === this.#l && lch.#c === this.#c && lch.#h === this.#h && lch.#alpha === this.#alpha;\n  }\n  format(): Format {\n    return Format.LCH;\n  }\n  setAlpha(alpha: number): Color {\n    return new LCH(this.#l, this.#c, this.#h, alpha, undefined);\n  }\n  asString(format?: Format): string|null {\n    if (format) {\n      return this.as(format).asString();\n    }\n    if (this.#originalText) {\n      return this.#originalText;\n    }\n    const alpha = this.#alpha === null || this.#alpha === 1 ? '' : ` / ${stringifyWithPrecision(this.#alpha)}`;\n    return `lch(${stringifyWithPrecision(this.#l)} ${stringifyWithPrecision(this.#c)} ${\n        stringifyWithPrecision(this.#h)}${alpha})`;\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): LCH|null {\n    const L = parsePercentage(spec[0], [0, 100]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const c = parsePercentage(spec[1], [0, 150]) ?? parseNumber(spec[1]);\n    if (c === null) {\n      return null;\n    }\n    const h = parseAngle(spec[2]);\n    if (h === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new LCH(L, c, h, alpha, text);\n  }\n}\n\nexport class Oklab implements Color {\n  readonly #l: number;\n  readonly #a: number;\n  readonly #b: number;\n  readonly #alpha: number|null;\n  readonly #origin?: Color;\n  readonly #originalText?: string;\n\n  readonly #conversions: ColorConversions = {\n    [Format.Nickname]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.Nickname, undefined, this),\n    [Format.HEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HEX, undefined, this),\n    [Format.ShortHEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.ShortHEX, undefined, this),\n    [Format.HEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HEXA, undefined, this),\n    [Format.ShortHEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.ShortHEXA, undefined, this),\n    [Format.RGB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.RGB, undefined, this),\n    [Format.RGBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.RGBA, undefined, this),\n    [Format.HSL]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HSL, undefined, this),\n    [Format.HSLA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HSLA, undefined, this),\n    [Format.HWB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HWB, undefined, this),\n    [Format.HWBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HWBA, undefined, this),\n    [Format.LCH]: () => new LCH(\n        ...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...this.#toXyzd50())), this.#alpha, undefined, this),\n    [Format.OKLCH]: () => new Oklch(...ColorConverter.xyzd50ToOklch(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.LAB]: () => new Lab(...ColorConverter.xyzd50ToLab(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.OKLAB]: () => this,\n\n    [Format.SRGB]: () => new ColorFunction(\n        Format.SRGB, [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.SRGB_LINEAR]: () => new ColorFunction(\n        Format.SRGB_LINEAR, [...ColorConverter.xyzd50TosRGBLinear(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.DISPLAY_P3]: () => new ColorFunction(\n        Format.DISPLAY_P3, [...ColorConverter.xyzd50ToDisplayP3(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.A98_RGB]: () => new ColorFunction(\n        Format.A98_RGB, [...ColorConverter.xyzd50ToAdobeRGB(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.PROPHOTO_RGB]: () => new ColorFunction(\n        Format.PROPHOTO_RGB, [...ColorConverter.xyzd50ToProPhoto(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.REC_2020]: () => new ColorFunction(\n        Format.REC_2020, [...ColorConverter.xyzd50ToRec2020(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ]: () => new ColorFunction(\n        Format.XYZ, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ_D50]: () => new ColorFunction(Format.XYZ_D50, [...this.#toXyzd50(), this.#alpha], undefined, this),\n    [Format.XYZ_D65]: () => new ColorFunction(\n        Format.XYZ_D65, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n  };\n\n  #toXyzd50(): [number, number, number] {\n    return ColorConverter.xyzd65ToD50(...ColorConverter.oklabToXyzd65(this.#l, this.#a, this.#b));\n  }\n\n  #getRGBArray(withAlpha: boolean = true): number[] {\n    const params = [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50())];\n    if (this.#alpha !== null && withAlpha) {\n      params.push(this.#alpha);\n    }\n    return params;\n  }\n\n  constructor(l: number, a: number, b: number, alpha: number|null, originalText: string|undefined, origin?: Color) {\n    this.#l = clamp(l, {min: 0, max: 1});\n    this.#a = a;\n    this.#b = b;\n    this.#alpha = clamp(alpha, {min: 0, max: 1});\n    this.#origin = origin;\n    this.#originalText = originalText;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (this.#origin) {\n      return this.#origin.as(format);\n    }\n    return this.#conversions[format]() as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const oklab = color.as(Format.OKLAB);\n    return oklab.#l === this.#l && oklab.#a === this.#a && oklab.#b === this.#b && oklab.#alpha === this.#alpha;\n  }\n  format(): Format {\n    return Format.OKLAB;\n  }\n  setAlpha(alpha: number): Color {\n    return new Oklab(this.#l, this.#a, this.#b, alpha, undefined);\n  }\n  asString(format?: Format): string|null {\n    if (format) {\n      return this.as(format).asString();\n    }\n    if (this.#originalText) {\n      return this.#originalText;\n    }\n    const alpha = this.#alpha === null || this.#alpha === 1 ? '' : ` / ${stringifyWithPrecision(this.#alpha)}`;\n    return `oklab(${stringifyWithPrecision(this.#l)} ${stringifyWithPrecision(this.#a)} ${\n        stringifyWithPrecision(this.#b)}${alpha})`;\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): Oklab|null {\n    const L = parsePercentage(spec[0], [0, 1]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const a = parsePercentage(spec[1], [0, 0.4]) ?? parseNumber(spec[1]);\n    if (a === null) {\n      return null;\n    }\n    const b = parsePercentage(spec[2], [0, 0.4]) ?? parseNumber(spec[2]);\n    if (b === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new Oklab(L, a, b, alpha, text);\n  }\n}\n\nexport class Oklch implements Color {\n  readonly #l: number;\n  readonly #c: number;\n  readonly #h: number;\n  readonly #alpha: number|null;\n  readonly #origin?: Color;\n  readonly #originalText?: string;\n\n  readonly #conversions: ColorConversions = {\n    [Format.Nickname]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.Nickname, undefined, this),\n    [Format.HEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HEX, undefined, this),\n    [Format.ShortHEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.ShortHEX, undefined, this),\n    [Format.HEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HEXA, undefined, this),\n    [Format.ShortHEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.ShortHEXA, undefined, this),\n    [Format.RGB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.RGB, undefined, this),\n    [Format.RGBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.RGBA, undefined, this),\n    [Format.HSL]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HSL, undefined, this),\n    [Format.HSLA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HSLA, undefined, this),\n    [Format.HWB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HWB, undefined, this),\n    [Format.HWBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HWBA, undefined, this),\n\n    [Format.LCH]: () => new LCH(\n        ...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...this.#toXyzd50())), this.#alpha, undefined, this),\n    [Format.OKLCH]: () => this,\n    [Format.LAB]: () => new Lab(...ColorConverter.xyzd50ToLab(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.OKLAB]: () => new Oklab(\n        ...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...this.#toXyzd50())), this.#alpha, undefined,\n        this),\n\n    [Format.SRGB]: () => new ColorFunction(\n        Format.SRGB, [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.SRGB_LINEAR]: () => new ColorFunction(\n        Format.SRGB_LINEAR, [...ColorConverter.xyzd50TosRGBLinear(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.DISPLAY_P3]: () => new ColorFunction(\n        Format.DISPLAY_P3, [...ColorConverter.xyzd50ToDisplayP3(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.A98_RGB]: () => new ColorFunction(\n        Format.A98_RGB, [...ColorConverter.xyzd50ToAdobeRGB(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.PROPHOTO_RGB]: () => new ColorFunction(\n        Format.PROPHOTO_RGB, [...ColorConverter.xyzd50ToProPhoto(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.REC_2020]: () => new ColorFunction(\n        Format.REC_2020, [...ColorConverter.xyzd50ToRec2020(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ]: () => new ColorFunction(\n        Format.XYZ, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ_D50]: () => new ColorFunction(Format.XYZ_D50, [...this.#toXyzd50(), this.#alpha], undefined, this),\n    [Format.XYZ_D65]: () => new ColorFunction(\n        Format.XYZ_D65, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n  };\n\n  #toXyzd50(): [number, number, number] {\n    return ColorConverter.oklchToXyzd50(this.#l, this.#c, this.#h);\n  }\n\n  #getRGBArray(withAlpha: boolean = true): number[] {\n    const params = [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50())];\n    if (this.#alpha !== null && withAlpha) {\n      params.push(this.#alpha);\n    }\n    return params;\n  }\n\n  constructor(l: number, c: number, h: number, alpha: number|null, originalText: string|undefined, origin?: Color) {\n    this.#l = clamp(l, {min: 0, max: 1});\n    this.#c = clamp(c, {min: 0});\n    this.#h = h;\n    this.#alpha = clamp(alpha, {min: 0, max: 1});\n    this.#origin = origin;\n    this.#originalText = originalText;\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (this.#origin) {\n      return this.#origin.as(format);\n    }\n    return this.#conversions[format]() as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const oklch = color.as(Format.OKLCH);\n    return oklch.#l === this.#l && oklch.#c === this.#c && oklch.#h === this.#h && oklch.#alpha === this.#alpha;\n  }\n  format(): Format {\n    return Format.OKLCH;\n  }\n  setAlpha(alpha: number): Color {\n    return new Oklch(this.#l, this.#c, this.#h, alpha, undefined);\n  }\n  asString(format?: Format): string|null {\n    if (format) {\n      return this.as(format).asString();\n    }\n    if (this.#originalText) {\n      return this.#originalText;\n    }\n    const alpha = this.#alpha === null || this.#alpha === 1 ? '' : ` / ${stringifyWithPrecision(this.#alpha)}`;\n    return `oklch(${stringifyWithPrecision(this.#l)} ${stringifyWithPrecision(this.#c)} ${\n        stringifyWithPrecision(this.#h)}${alpha})`;\n  }\n\n  static fromSpec(spec: ColorParameterSpec, text: string): Oklch|null {\n    const L = parsePercentage(spec[0], [0, 1]) ?? parseNumber(spec[0]);\n    if (L === null) {\n      return null;\n    }\n    const c = parsePercentage(spec[1], [0, 0.4]) ?? parseNumber(spec[1]);\n    if (c === null) {\n      return null;\n    }\n    const h = parseAngle(spec[2]);\n    if (h === null) {\n      return null;\n    }\n    const alpha = parseAlpha(spec[3]);\n\n    return new Oklch(L, c, h, alpha, text);\n  }\n}\n\nexport class ColorFunction implements Color {\n  readonly #spec: [number, number, number, number|null];\n  readonly #colorSpace: ColorSpace;\n  readonly #origin?: Color;\n  readonly #originalText?: string;\n\n  readonly #conversions: ColorConversions = {\n    [Format.Nickname]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.Nickname, undefined, this),\n    [Format.HEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HEX, undefined, this),\n    [Format.ShortHEX]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.ShortHEX, undefined, this),\n    [Format.HEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HEXA, undefined, this),\n    [Format.ShortHEXA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.ShortHEXA, undefined, this),\n    [Format.RGB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.RGB, undefined, this),\n    [Format.RGBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.RGBA, undefined, this),\n    [Format.HSL]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HSL, undefined, this),\n    [Format.HSLA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HSLA, undefined, this),\n    [Format.HWB]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ false), Format.HWB, undefined, this),\n    [Format.HWBA]: () => new Legacy(this.#getRGBArray(/* withAlpha= */ true), Format.HWBA, undefined, this),\n    [Format.LCH]: () => new LCH(\n        ...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...this.#toXyzd50())), this.#alpha, undefined, this),\n    [Format.OKLCH]: () => new Oklch(...ColorConverter.xyzd50ToOklch(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.LAB]: () => new Lab(...ColorConverter.xyzd50ToLab(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.OKLAB]: () => new Oklab(\n        ...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...this.#toXyzd50())), this.#alpha, undefined,\n        this),\n\n    [Format.SRGB]: () => new ColorFunction(\n        Format.SRGB, [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.SRGB_LINEAR]: () => new ColorFunction(\n        Format.SRGB_LINEAR, [...ColorConverter.xyzd50TosRGBLinear(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.DISPLAY_P3]: () => new ColorFunction(\n        Format.DISPLAY_P3, [...ColorConverter.xyzd50ToDisplayP3(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.A98_RGB]: () => new ColorFunction(\n        Format.A98_RGB, [...ColorConverter.xyzd50ToAdobeRGB(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.PROPHOTO_RGB]: () => new ColorFunction(\n        Format.PROPHOTO_RGB, [...ColorConverter.xyzd50ToProPhoto(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.REC_2020]: () => new ColorFunction(\n        Format.REC_2020, [...ColorConverter.xyzd50ToRec2020(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ]: () => new ColorFunction(\n        Format.XYZ, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ_D50]: () => new ColorFunction(Format.XYZ_D50, [...this.#toXyzd50(), this.#alpha], undefined, this),\n    [Format.XYZ_D65]: () => new ColorFunction(\n        Format.XYZ_D65, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n  };\n\n  get #alpha(): number|null {\n    return this.#spec[3] ?? null;\n  }\n\n  #toXyzd50(): [number, number, number] {\n    const [p0, p1, p2] = this.#spec;\n    switch (this.#colorSpace) {\n      case Format.SRGB:\n        return ColorConverter.srgbToXyzd50(p0, p1, p2);\n      case Format.SRGB_LINEAR:\n        return ColorConverter.srgbLinearToXyzd50(p0, p1, p2);\n      case Format.DISPLAY_P3:\n        return ColorConverter.displayP3ToXyzd50(p0, p1, p2);\n      case Format.A98_RGB:\n        return ColorConverter.adobeRGBToXyzd50(p0, p1, p2);\n      case Format.PROPHOTO_RGB:\n        return ColorConverter.proPhotoToXyzd50(p0, p1, p2);\n      case Format.REC_2020:\n        return ColorConverter.rec2020ToXyzd50(p0, p1, p2);\n      case Format.XYZ_D50:\n        return [p0, p1, p2];\n      case Format.XYZ:\n      case Format.XYZ_D65:\n        return ColorConverter.xyzd65ToD50(p0, p1, p2);\n    }\n    throw new Error('Invalid color space');\n  }\n\n  #getRGBArray(withAlpha: boolean = true): number[] {\n    const [p0, p1, p2] = this.#spec;\n    const params =\n        this.#colorSpace === Format.SRGB ? [p0, p1, p2] : [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50())];\n    if (this.#alpha !== null && withAlpha) {\n      params.push(this.#alpha);\n    }\n    return params;\n  }\n\n  constructor(\n      colorSpace: ColorSpace, rgbOrXyz: [number, number, number, number|null], originalText: string|undefined,\n      origin?: Color) {\n    this.#colorSpace = colorSpace;\n    this.#origin = origin;\n    this.#originalText = originalText;\n\n    if (colorSpace === Format.XYZ || colorSpace === Format.XYZ_D50 || colorSpace === Format.XYZ_D65) {\n      this.#spec = [rgbOrXyz[0], rgbOrXyz[1], rgbOrXyz[2], clamp(rgbOrXyz[3], {min: 0, max: 1})];\n    } else {\n      this.#spec = [\n        clamp(rgbOrXyz[0], {min: 0, max: 1}),\n        clamp(rgbOrXyz[1], {min: 0, max: 1}),\n        clamp(rgbOrXyz[2], {min: 0, max: 1}),\n        clamp(rgbOrXyz[3], {min: 0, max: 1}),\n      ];\n    }\n  }\n  asLegacyColor(): Legacy {\n    return this.as(Format.RGBA);\n  }\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (this.#colorSpace === format) {\n      return this as ReturnType<ColorConversions[T]>;\n    }\n    if (this.#origin) {\n      return this.#origin.as(format);\n    }\n    return this.#conversions[format]() as ReturnType<ColorConversions[T]>;\n  }\n  equal(color: Color): boolean {\n    const space = color.as(this.#colorSpace);\n    return space.#spec[0] === this.#spec[0] && space.#spec[1] === this.#spec[1] && space.#spec[2] === this.#spec[2] &&\n        space.#spec[3] === this.#spec[3];\n  }\n  format(): Format {\n    return this.#colorSpace;\n  }\n  setAlpha(alpha: number): Color {\n    return new ColorFunction(this.#colorSpace, [this.#spec[0], this.#spec[1], this.#spec[2], alpha], undefined);\n  }\n  asString(format?: Format): string|null {\n    if (format) {\n      return this.as(format).asString();\n    }\n    if (this.#originalText) {\n      return this.#originalText;\n    }\n    const alpha = this.#spec[3] === null || this.#spec[3] === 1 ? '' : ` / ${stringifyWithPrecision(this.#spec[3])}`;\n    return `color(${this.#colorSpace} ${stringifyWithPrecision(this.#spec[0])} ${\n        stringifyWithPrecision(this.#spec[1])} ${stringifyWithPrecision(this.#spec[2])}${alpha})`;\n  }\n}\n\ntype LegacyColor = Format.Nickname|Format.HEX|Format.ShortHEX|Format.HEXA|Format.ShortHEXA|Format.RGB|Format.RGBA|\n                   Format.HSL|Format.HSLA|Format.HWB|Format.HWBA;\nexport class Legacy implements Color {\n  #hslaInternal: number[]|undefined;\n  #hwbaInternal: number[]|undefined;\n  #rgbaInternal: number[];\n  #originalText: string|null;\n  #formatInternal: LegacyColor;\n  readonly #origin?: Color;\n\n  readonly #conversions: ColorConversions = {\n    [Format.Nickname]: () => new Legacy(this.#rgbaInternal, Format.Nickname, undefined, this),\n    [Format.HEX]: () => new Legacy(this.#rgbaInternal, Format.HEX, undefined, this),\n    [Format.ShortHEX]: () => new Legacy(this.#rgbaInternal, Format.ShortHEX, undefined, this),\n    [Format.HEXA]: () => new Legacy(this.#rgbaInternal, Format.HEXA, undefined, this),\n    [Format.ShortHEXA]: () => new Legacy(this.#rgbaInternal, Format.ShortHEXA, undefined, this),\n    [Format.RGB]: () => new Legacy(this.#rgbaInternal, Format.RGB, undefined, this),\n    [Format.RGBA]: () => new Legacy(this.#rgbaInternal, Format.RGBA, undefined, this),\n    [Format.HSL]: () => new Legacy(this.#rgbaInternal, Format.HSL, undefined, this),\n    [Format.HSLA]: () => new Legacy(this.#rgbaInternal, Format.HSLA, undefined, this),\n    [Format.HWB]: () => new Legacy(this.#rgbaInternal, Format.HWB, undefined, this),\n    [Format.HWBA]: () => new Legacy(this.#rgbaInternal, Format.HWBA, undefined, this),\n    [Format.LCH]: () => new LCH(\n        ...ColorConverter.labToLch(...ColorConverter.xyzd50ToLab(...this.#toXyzd50())), this.#alpha, undefined, this),\n    [Format.OKLCH]: () => new Oklch(...ColorConverter.xyzd50ToOklch(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.LAB]: () => new Lab(...ColorConverter.xyzd50ToLab(...this.#toXyzd50()), this.#alpha, undefined, this),\n    [Format.OKLAB]: () => new Oklab(\n        ...ColorConverter.xyzd65ToOklab(...ColorConverter.xyzd50ToD65(...this.#toXyzd50())), this.#alpha, undefined,\n        this),\n\n    [Format.SRGB]: () => new ColorFunction(\n        Format.SRGB, [...ColorConverter.xyzd50ToSrgb(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.SRGB_LINEAR]: () => new ColorFunction(\n        Format.SRGB_LINEAR, [...ColorConverter.xyzd50TosRGBLinear(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.DISPLAY_P3]: () => new ColorFunction(\n        Format.DISPLAY_P3, [...ColorConverter.xyzd50ToDisplayP3(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.A98_RGB]: () => new ColorFunction(\n        Format.A98_RGB, [...ColorConverter.xyzd50ToAdobeRGB(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.PROPHOTO_RGB]: () => new ColorFunction(\n        Format.PROPHOTO_RGB, [...ColorConverter.xyzd50ToProPhoto(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.REC_2020]: () => new ColorFunction(\n        Format.REC_2020, [...ColorConverter.xyzd50ToRec2020(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ]: () => new ColorFunction(\n        Format.XYZ, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n    [Format.XYZ_D50]: () => new ColorFunction(Format.XYZ_D50, [...this.#toXyzd50(), this.#alpha], undefined, this),\n    [Format.XYZ_D65]: () => new ColorFunction(\n        Format.XYZ_D65, [...ColorConverter.xyzd50ToD65(...this.#toXyzd50()), this.#alpha], undefined, this),\n  };\n\n  #toXyzd50(): [number, number, number] {\n    const [r, g, b] = this.#rgbaInternal;\n    return ColorConverter.srgbToXyzd50(r, g, b);\n  }\n\n  get #alpha(): number|null {\n    switch (this.format()) {\n      case Format.HEXA:\n      case Format.ShortHEXA:\n      case Format.RGBA:\n      case Format.HSLA:\n      case Format.HWBA:\n        return this.#rgbaInternal[3];\n      default:\n        return null;\n    }\n  }\n\n  asLegacyColor(): Legacy {\n    return this;\n  }\n\n  constructor(rgba: number[], format: LegacyColor, originalText?: string, origin?: Color) {\n    this.#hslaInternal = undefined;\n    this.#hwbaInternal = undefined;\n    this.#originalText = originalText || null;\n    this.#formatInternal = format;\n    this.#origin = origin;\n\n    this.#rgbaInternal = [\n      clamp(rgba[0], {min: 0, max: 1}),\n      clamp(rgba[1], {min: 0, max: 1}),\n      clamp(rgba[2], {min: 0, max: 1}),\n      clamp(rgba[3] ?? 1, {min: 0, max: 1}),\n    ];\n  }\n\n  static fromHex(hex: string, text: string): Legacy {\n    hex = hex.toLowerCase();\n    let format: LegacyColor;\n    if (hex.length === 3) {\n      format = Format.ShortHEX;\n      hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);\n    } else if (hex.length === 4) {\n      format = Format.ShortHEXA;\n      hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2) +\n          hex.charAt(3) + hex.charAt(3);\n    } else if (hex.length === 6) {\n      format = Format.HEX;\n    } else {\n      format = Format.HEXA;\n    }\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    let a = 1;\n    if (hex.length === 8) {\n      a = parseInt(hex.substring(6, 8), 16) / 255;\n    }\n    return new Legacy([r / 255, g / 255, b / 255, a], format, text);\n  }\n\n  static fromName(name: string, text: string): Legacy|null {\n    const nickname = name.toLowerCase();\n    const rgba = Nicknames.get(nickname);\n    if (rgba !== undefined) {\n      const color = Legacy.fromRGBA(rgba);\n      color.#formatInternal = Format.Nickname;\n      color.#originalText = text;\n      return color;\n    }\n    return null;\n  }\n\n  static fromRGBAFunction(r: string, g: string, b: string, alpha: string|undefined, text: string): Legacy|null {\n    const rgba = [\n      parseRgbNumeric(r),\n      parseRgbNumeric(g),\n      parseRgbNumeric(b),\n      alpha ? parseAlphaNumeric(alpha) : 1,\n    ];\n\n    if (!Platform.ArrayUtilities.arrayDoesNotContainNullOrUndefined(rgba)) {\n      return null;\n    }\n    return new Legacy(rgba, alpha ? Format.RGBA : Format.RGB, text);\n  }\n\n  static fromHSLA(h: string, s: string, l: string, alpha: string|undefined, text: string): Legacy|null {\n    const parameters = [\n      parseHueNumeric(h),\n      parseSatLightNumeric(s),\n      parseSatLightNumeric(l),\n      alpha ? parseAlphaNumeric(alpha) : 1,\n    ];\n    if (!Platform.ArrayUtilities.arrayDoesNotContainNullOrUndefined(parameters)) {\n      return null;\n    }\n    const rgba: number[] = [];\n    hsl2rgb(parameters, rgba);\n    return new Legacy(rgba, alpha ? Format.HSLA : Format.HSL, text);\n  }\n\n  static fromHWB(h: string, w: string, b: string, alpha: string|undefined, text: string): Legacy|null {\n    const parameters = [\n      parseHueNumeric(h),\n      parseSatLightNumeric(w),\n      parseSatLightNumeric(b),\n      alpha ? parseAlphaNumeric(alpha) : 1,\n    ];\n    if (!Platform.ArrayUtilities.arrayDoesNotContainNullOrUndefined(parameters)) {\n      return null;\n    }\n    const rgba: number[] = [];\n    hwb2rgb(parameters, rgba);\n    return new Legacy(rgba, alpha ? Format.HWBA : Format.HWB, text);\n  }\n\n  static fromRGBA(rgba: number[]): Legacy {\n    return new Legacy([rgba[0] / 255, rgba[1] / 255, rgba[2] / 255, rgba[3]], Format.RGBA);\n  }\n\n  static fromHSVA(hsva: number[]): Legacy {\n    const rgba: number[] = [];\n    hsva2rgba(hsva, rgba);\n    return new Legacy(rgba, Format.HSLA);\n  }\n\n  as<T extends Format>(format: T): ReturnType<ColorConversions[T]> {\n    if (format === this.format()) {\n      return this as ReturnType<ColorConversions[T]>;\n    }\n    if (this.#origin) {\n      return this.#origin.as(format);\n    }\n    return this.#conversions[format]() as ReturnType<ColorConversions[T]>;\n  }\n\n  format(): LegacyColor {\n    return this.#formatInternal;\n  }\n\n  /** HSLA with components within [0..1]\n   */\n  hsla(): number[] {\n    if (this.#hslaInternal) {\n      return this.#hslaInternal;\n    }\n    this.#hslaInternal = rgbaToHsla(this.#rgbaInternal);\n    return this.#hslaInternal;\n  }\n\n  canonicalHSLA(): number[] {\n    const hsla = this.hsla();\n    return [Math.round(hsla[0] * 360), Math.round(hsla[1] * 100), Math.round(hsla[2] * 100), hsla[3]];\n  }\n\n  /** HSVA with components within [0..1]\n   */\n  hsva(): number[] {\n    const hsla = this.hsla();\n    const h = hsla[0];\n    let s = hsla[1];\n    const l = hsla[2];\n\n    s *= l < 0.5 ? l : 1 - l;\n    return [h, s !== 0 ? 2 * s / (l + s) : 0, (l + s), hsla[3]];\n  }\n\n  /** HWBA with components within [0..1]\n   */\n  hwba(): number[] {\n    if (this.#hwbaInternal) {\n      return this.#hwbaInternal;\n    }\n    this.#hwbaInternal = rgbaToHwba(this.#rgbaInternal);\n    return this.#hwbaInternal;\n  }\n\n  canonicalHWBA(): number[] {\n    const hwba = this.hwba();\n    return [Math.round(hwba[0] * 360), Math.round(hwba[1] * 100), Math.round(hwba[2] * 100), hwba[3]];\n  }\n\n  hasAlpha(): boolean {\n    return this.#rgbaInternal[3] !== 1;\n  }\n\n  detectHEXFormat(): Format {\n    let canBeShort = true;\n    for (let i = 0; i < 4; ++i) {\n      const c = Math.round(this.#rgbaInternal[i] * 255);\n      if (c % 17) {\n        canBeShort = false;\n        break;\n      }\n    }\n\n    const hasAlpha = this.hasAlpha();\n    if (canBeShort) {\n      return hasAlpha ? Format.ShortHEXA : Format.ShortHEX;\n    }\n    return hasAlpha ? Format.HEXA : Format.HEX;\n  }\n\n  asString(format?: Format): string|null {\n    if (format) {\n      return this.as(format).asString();\n    }\n\n    if (!format) {\n      format = this.#formatInternal;\n    }\n\n    if (format === this.#formatInternal && this.#originalText) {\n      return this.#originalText;\n    }\n\n    function toRgbValue(value: number): number {\n      return Math.round(value * 255);\n    }\n\n    function toHexValue(value: number): string {\n      const hex = Math.round(value * 255).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    }\n\n    function toShortHexValue(value: number): string {\n      return (Math.round(value * 255) / 17).toString(16);\n    }\n\n    switch (format) {\n      case Format.RGB:\n      case Format.RGBA: {\n        const start = Platform.StringUtilities.sprintf(\n            'rgb(%d %d %d', toRgbValue(this.#rgbaInternal[0]), toRgbValue(this.#rgbaInternal[1]),\n            toRgbValue(this.#rgbaInternal[2]));\n        if (this.hasAlpha()) {\n          return start + Platform.StringUtilities.sprintf(' / %d%)', Math.round(this.#rgbaInternal[3] * 100));\n        }\n        return start + ')';\n      }\n      case Format.HSL:\n      case Format.HSLA: {\n        const hsla = this.hsla();\n        const start = Platform.StringUtilities.sprintf(\n            'hsl(%ddeg %d% %d%', Math.round(hsla[0] * 360), Math.round(hsla[1] * 100), Math.round(hsla[2] * 100));\n        if (this.hasAlpha()) {\n          return start + Platform.StringUtilities.sprintf(' / %d%)', Math.round(hsla[3] * 100));\n        }\n        return start + ')';\n      }\n      case Format.HWB:\n      case Format.HWBA: {\n        const hwba = this.hwba();\n        const start = Platform.StringUtilities.sprintf(\n            'hwb(%ddeg %d% %d%', Math.round(hwba[0] * 360), Math.round(hwba[1] * 100), Math.round(hwba[2] * 100));\n        if (this.hasAlpha()) {\n          return start + Platform.StringUtilities.sprintf(' / %d%)', Math.round(hwba[3] * 100));\n        }\n        return start + ')';\n      }\n      case Format.HEXA: {\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s%s', toHexValue(this.#rgbaInternal[0]), toHexValue(this.#rgbaInternal[1]),\n                toHexValue(this.#rgbaInternal[2]), toHexValue(this.#rgbaInternal[3]))\n            .toLowerCase();\n      }\n      case Format.HEX: {\n        if (this.hasAlpha()) {\n          return null;\n        }\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s', toHexValue(this.#rgbaInternal[0]), toHexValue(this.#rgbaInternal[1]),\n                toHexValue(this.#rgbaInternal[2]))\n            .toLowerCase();\n      }\n      case Format.ShortHEXA: {\n        const hexFormat = this.detectHEXFormat();\n        if (hexFormat !== Format.ShortHEXA && hexFormat !== Format.ShortHEX) {\n          return null;\n        }\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s%s', toShortHexValue(this.#rgbaInternal[0]), toShortHexValue(this.#rgbaInternal[1]),\n                toShortHexValue(this.#rgbaInternal[2]), toShortHexValue(this.#rgbaInternal[3]))\n            .toLowerCase();\n      }\n      case Format.ShortHEX: {\n        if (this.hasAlpha()) {\n          return null;\n        }\n        if (this.detectHEXFormat() !== Format.ShortHEX) {\n          return null;\n        }\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s', toShortHexValue(this.#rgbaInternal[0]), toShortHexValue(this.#rgbaInternal[1]),\n                toShortHexValue(this.#rgbaInternal[2]))\n            .toLowerCase();\n      }\n      case Format.Nickname: {\n        return this.nickname();\n      }\n    }\n\n    return this.#originalText;\n  }\n\n  rgba(): number[] {\n    return this.#rgbaInternal.slice();\n  }\n\n  canonicalRGBA(): number[] {\n    const rgba = new Array(4);\n    for (let i = 0; i < 3; ++i) {\n      rgba[i] = Math.round(this.#rgbaInternal[i] * 255);\n    }\n    rgba[3] = this.#rgbaInternal[3];\n    return rgba;\n  }\n\n  /** nickname\n   */\n  nickname(): string|null {\n    return RGBAToNickname.get(String(this.canonicalRGBA())) || null;\n  }\n\n  toProtocolRGBA(): {\n    r: number,\n    g: number,\n    b: number,\n    a: (number|undefined),\n  } {\n    const rgba = this.canonicalRGBA();\n    const result: {\n      r: number,\n      g: number,\n      b: number,\n      a: number|undefined,\n    } = {r: rgba[0], g: rgba[1], b: rgba[2], a: undefined};\n    if (rgba[3] !== 1) {\n      result.a = rgba[3];\n    }\n    return result;\n  }\n\n  invert(): Legacy {\n    const rgba = [];\n    rgba[0] = 1 - this.#rgbaInternal[0];\n    rgba[1] = 1 - this.#rgbaInternal[1];\n    rgba[2] = 1 - this.#rgbaInternal[2];\n    rgba[3] = this.#rgbaInternal[3];\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  setAlpha(alpha: number): Legacy {\n    const rgba = this.#rgbaInternal.slice();\n    rgba[3] = alpha;\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  blendWith(fgColor: Legacy): Legacy {\n    const rgba: number[] = blendColors(fgColor.#rgbaInternal, this.#rgbaInternal);\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  blendWithAlpha(alpha: number): Legacy {\n    const rgba = this.#rgbaInternal.slice();\n    rgba[3] *= alpha;\n    return new Legacy(rgba, Format.RGBA);\n  }\n\n  setFormat(format: LegacyColor): void {\n    this.#formatInternal = format;\n  }\n\n  equal(other: Legacy): boolean {\n    return this.#rgbaInternal.every((v, i) => v === other.#rgbaInternal[i]) &&\n        this.#formatInternal === other.#formatInternal;\n  }\n}\n\nexport const Regex: RegExp =\n    /((?:rgba?|hsla?|hwba?|lab|lch|oklab|oklch|color)\\([^)]+\\)|#[0-9a-fA-F]{8}|#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3,4}|\\b[a-zA-Z]+\\b(?!-))/g;\n\nexport const enum Format {\n  Nickname = 'nickname',\n  HEX = 'hex',\n  ShortHEX = 'shorthex',\n  HEXA = 'hexa',\n  ShortHEXA = 'shorthexa',\n  RGB = 'rgb',\n  RGBA = 'rgba',\n  HSL = 'hsl',\n  HSLA = 'hsla',\n  HWB = 'hwb',\n  HWBA = 'hwba',\n  LCH = 'lch',\n  OKLCH = 'oklch',\n  LAB = 'lab',\n  OKLAB = 'oklab',\n  SRGB = 'srgb',\n  SRGB_LINEAR = 'srgb-linear',\n  DISPLAY_P3 = 'display-p3',\n  A98_RGB = 'a98-rgb',\n  PROPHOTO_RGB = 'prophoto-rgb',\n  REC_2020 = 'rec2020',\n  XYZ = 'xyz',\n  XYZ_D50 = 'xyz-d50',\n  XYZ_D65 = 'xyz-d65',\n}\n\nconst COLOR_TO_RGBA_ENTRIES: Array<readonly[string, number[]]> = [\n  ['aliceblue', [240, 248, 255]],\n  ['antiquewhite', [250, 235, 215]],\n  ['aqua', [0, 255, 255]],\n  ['aquamarine', [127, 255, 212]],\n  ['azure', [240, 255, 255]],\n  ['beige', [245, 245, 220]],\n  ['bisque', [255, 228, 196]],\n  ['black', [0, 0, 0]],\n  ['blanchedalmond', [255, 235, 205]],\n  ['blue', [0, 0, 255]],\n  ['blueviolet', [138, 43, 226]],\n  ['brown', [165, 42, 42]],\n  ['burlywood', [222, 184, 135]],\n  ['cadetblue', [95, 158, 160]],\n  ['chartreuse', [127, 255, 0]],\n  ['chocolate', [210, 105, 30]],\n  ['coral', [255, 127, 80]],\n  ['cornflowerblue', [100, 149, 237]],\n  ['cornsilk', [255, 248, 220]],\n  ['crimson', [237, 20, 61]],\n  ['cyan', [0, 255, 255]],\n  ['darkblue', [0, 0, 139]],\n  ['darkcyan', [0, 139, 139]],\n  ['darkgoldenrod', [184, 134, 11]],\n  ['darkgray', [169, 169, 169]],\n  ['darkgrey', [169, 169, 169]],\n  ['darkgreen', [0, 100, 0]],\n  ['darkkhaki', [189, 183, 107]],\n  ['darkmagenta', [139, 0, 139]],\n  ['darkolivegreen', [85, 107, 47]],\n  ['darkorange', [255, 140, 0]],\n  ['darkorchid', [153, 50, 204]],\n  ['darkred', [139, 0, 0]],\n  ['darksalmon', [233, 150, 122]],\n  ['darkseagreen', [143, 188, 143]],\n  ['darkslateblue', [72, 61, 139]],\n  ['darkslategray', [47, 79, 79]],\n  ['darkslategrey', [47, 79, 79]],\n  ['darkturquoise', [0, 206, 209]],\n  ['darkviolet', [148, 0, 211]],\n  ['deeppink', [255, 20, 147]],\n  ['deepskyblue', [0, 191, 255]],\n  ['dimgray', [105, 105, 105]],\n  ['dimgrey', [105, 105, 105]],\n  ['dodgerblue', [30, 144, 255]],\n  ['firebrick', [178, 34, 34]],\n  ['floralwhite', [255, 250, 240]],\n  ['forestgreen', [34, 139, 34]],\n  ['fuchsia', [255, 0, 255]],\n  ['gainsboro', [220, 220, 220]],\n  ['ghostwhite', [248, 248, 255]],\n  ['gold', [255, 215, 0]],\n  ['goldenrod', [218, 165, 32]],\n  ['gray', [128, 128, 128]],\n  ['grey', [128, 128, 128]],\n  ['green', [0, 128, 0]],\n  ['greenyellow', [173, 255, 47]],\n  ['honeydew', [240, 255, 240]],\n  ['hotpink', [255, 105, 180]],\n  ['indianred', [205, 92, 92]],\n  ['indigo', [75, 0, 130]],\n  ['ivory', [255, 255, 240]],\n  ['khaki', [240, 230, 140]],\n  ['lavender', [230, 230, 250]],\n  ['lavenderblush', [255, 240, 245]],\n  ['lawngreen', [124, 252, 0]],\n  ['lemonchiffon', [255, 250, 205]],\n  ['lightblue', [173, 216, 230]],\n  ['lightcoral', [240, 128, 128]],\n  ['lightcyan', [224, 255, 255]],\n  ['lightgoldenrodyellow', [250, 250, 210]],\n  ['lightgreen', [144, 238, 144]],\n  ['lightgray', [211, 211, 211]],\n  ['lightgrey', [211, 211, 211]],\n  ['lightpink', [255, 182, 193]],\n  ['lightsalmon', [255, 160, 122]],\n  ['lightseagreen', [32, 178, 170]],\n  ['lightskyblue', [135, 206, 250]],\n  ['lightslategray', [119, 136, 153]],\n  ['lightslategrey', [119, 136, 153]],\n  ['lightsteelblue', [176, 196, 222]],\n  ['lightyellow', [255, 255, 224]],\n  ['lime', [0, 255, 0]],\n  ['limegreen', [50, 205, 50]],\n  ['linen', [250, 240, 230]],\n  ['magenta', [255, 0, 255]],\n  ['maroon', [128, 0, 0]],\n  ['mediumaquamarine', [102, 205, 170]],\n  ['mediumblue', [0, 0, 205]],\n  ['mediumorchid', [186, 85, 211]],\n  ['mediumpurple', [147, 112, 219]],\n  ['mediumseagreen', [60, 179, 113]],\n  ['mediumslateblue', [123, 104, 238]],\n  ['mediumspringgreen', [0, 250, 154]],\n  ['mediumturquoise', [72, 209, 204]],\n  ['mediumvioletred', [199, 21, 133]],\n  ['midnightblue', [25, 25, 112]],\n  ['mintcream', [245, 255, 250]],\n  ['mistyrose', [255, 228, 225]],\n  ['moccasin', [255, 228, 181]],\n  ['navajowhite', [255, 222, 173]],\n  ['navy', [0, 0, 128]],\n  ['oldlace', [253, 245, 230]],\n  ['olive', [128, 128, 0]],\n  ['olivedrab', [107, 142, 35]],\n  ['orange', [255, 165, 0]],\n  ['orangered', [255, 69, 0]],\n  ['orchid', [218, 112, 214]],\n  ['palegoldenrod', [238, 232, 170]],\n  ['palegreen', [152, 251, 152]],\n  ['paleturquoise', [175, 238, 238]],\n  ['palevioletred', [219, 112, 147]],\n  ['papayawhip', [255, 239, 213]],\n  ['peachpuff', [255, 218, 185]],\n  ['peru', [205, 133, 63]],\n  ['pink', [255, 192, 203]],\n  ['plum', [221, 160, 221]],\n  ['powderblue', [176, 224, 230]],\n  ['purple', [128, 0, 128]],\n  ['rebeccapurple', [102, 51, 153]],\n  ['red', [255, 0, 0]],\n  ['rosybrown', [188, 143, 143]],\n  ['royalblue', [65, 105, 225]],\n  ['saddlebrown', [139, 69, 19]],\n  ['salmon', [250, 128, 114]],\n  ['sandybrown', [244, 164, 96]],\n  ['seagreen', [46, 139, 87]],\n  ['seashell', [255, 245, 238]],\n  ['sienna', [160, 82, 45]],\n  ['silver', [192, 192, 192]],\n  ['skyblue', [135, 206, 235]],\n  ['slateblue', [106, 90, 205]],\n  ['slategray', [112, 128, 144]],\n  ['slategrey', [112, 128, 144]],\n  ['snow', [255, 250, 250]],\n  ['springgreen', [0, 255, 127]],\n  ['steelblue', [70, 130, 180]],\n  ['tan', [210, 180, 140]],\n  ['teal', [0, 128, 128]],\n  ['thistle', [216, 191, 216]],\n  ['tomato', [255, 99, 71]],\n  ['turquoise', [64, 224, 208]],\n  ['violet', [238, 130, 238]],\n  ['wheat', [245, 222, 179]],\n  ['white', [255, 255, 255]],\n  ['whitesmoke', [245, 245, 245]],\n  ['yellow', [255, 255, 0]],\n  ['yellowgreen', [154, 205, 50]],\n  ['transparent', [0, 0, 0, 0]],\n];\n\nPlatform.DCHECK(() => {\n  return COLOR_TO_RGBA_ENTRIES.every(([nickname]) => nickname.toLowerCase() === nickname);\n}, 'All color nicknames must be lowercase.');\n\nexport const Nicknames = new Map(COLOR_TO_RGBA_ENTRIES);\n\nconst RGBAToNickname = new Map(\n    // Default opacity to 1 if the color only specified 3 channels\n    COLOR_TO_RGBA_ENTRIES.map(([nickname, [r, g, b, a = 1]]) => {\n      return [String([r, g, b, a]), nickname];\n    }),\n);\n\nconst LAYOUT_LINES_HIGHLIGHT_COLOR = [127, 32, 210];\n\nexport const PageHighlight = {\n  Content: Legacy.fromRGBA([111, 168, 220, .66]),\n  ContentLight: Legacy.fromRGBA([111, 168, 220, .5]),\n  ContentOutline: Legacy.fromRGBA([9, 83, 148]),\n  Padding: Legacy.fromRGBA([147, 196, 125, .55]),\n  PaddingLight: Legacy.fromRGBA([147, 196, 125, .4]),\n  Border: Legacy.fromRGBA([255, 229, 153, .66]),\n  BorderLight: Legacy.fromRGBA([255, 229, 153, .5]),\n  Margin: Legacy.fromRGBA([246, 178, 107, .66]),\n  MarginLight: Legacy.fromRGBA([246, 178, 107, .5]),\n  EventTarget: Legacy.fromRGBA([255, 196, 196, .66]),\n  Shape: Legacy.fromRGBA([96, 82, 177, 0.8]),\n  ShapeMargin: Legacy.fromRGBA([96, 82, 127, .6]),\n  CssGrid: Legacy.fromRGBA([0x4b, 0, 0x82, 1]),\n  LayoutLine: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, 1]),\n  GridBorder: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, 1]),\n  GapBackground: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, .3]),\n  GapHatch: Legacy.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, .8]),\n  GridAreaBorder: Legacy.fromRGBA([26, 115, 232, 1]),\n};\n\nexport const SourceOrderHighlight = {\n  ParentOutline: Legacy.fromRGBA([224, 90, 183, 1]),\n  ChildOutline: Legacy.fromRGBA([0, 120, 212, 1]),\n};\n\nexport const IsolationModeHighlight = {\n  Resizer: Legacy.fromRGBA([222, 225, 230, 1]),  // --color-background-elevation-2\n  ResizerHandle: Legacy.fromRGBA([166, 166, 166, 1]),\n  Mask: Legacy.fromRGBA([248, 249, 249, 1]),\n};\n\nexport class Generator {\n  readonly #hueSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #satSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #lightnessSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #alphaSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #colors: Map<string, string>;\n  constructor(\n      hueSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      },\n      satSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      },\n      lightnessSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      },\n      alphaSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      }) {\n    this.#hueSpace = hueSpace || {min: 0, max: 360, count: undefined};\n    this.#satSpace = satSpace || 67;\n    this.#lightnessSpace = lightnessSpace || 80;\n    this.#alphaSpace = alphaSpace || 1;\n    this.#colors = new Map();\n  }\n\n  setColorForID(id: string, color: string): void {\n    this.#colors.set(id, color);\n  }\n\n  colorForID(id: string): string {\n    let color = this.#colors.get(id);\n    if (!color) {\n      color = this.generateColorForID(id);\n      this.#colors.set(id, color);\n    }\n    return color;\n  }\n\n  private generateColorForID(id: string): string {\n    const hash = Platform.StringUtilities.hashCode(id);\n    const h = this.indexToValueInSpace(hash, this.#hueSpace);\n    const s = this.indexToValueInSpace(hash >> 8, this.#satSpace);\n    const l = this.indexToValueInSpace(hash >> 16, this.#lightnessSpace);\n    const a = this.indexToValueInSpace(hash >> 24, this.#alphaSpace);\n    const start = `hsl(${h}deg ${s}% ${l}%`;\n    if (a !== 1) {\n      return `${start} / ${Math.floor(a * 100)}%)`;\n    }\n    return `${start})`;\n  }\n\n  private indexToValueInSpace(index: number, space: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  }): number {\n    if (typeof space === 'number') {\n      return space;\n    }\n    const count = space.count || space.max - space.min;\n    index %= count;\n    return space.min + Math.floor(index / (count - 1) * (space.max - space.min));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
