{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/ColorConverter.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Implementation of this module and all the tests are heavily influenced by\n * https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/color_conversions.cc\n */\n\n// https://en.wikipedia.org/wiki/CIELAB_color_space#Converting_between_CIELAB_and_CIEXYZ_coordinates\nconst D50_X = 0.9642;\nconst D50_Y = 1.0;\nconst D50_Z = 0.8251;\n\ntype Array3x3 = [\n  [number, number, number],\n  [number, number, number],\n  [number, number, number],\n];\n\nclass Vector3 {\n  values: [number, number, number] = [0, 0, 0];\n  constructor(values?: [number, number, number]) {\n    if (values) {\n      this.values = values;\n    }\n  }\n}\n\nclass Matrix3x3 {\n  values: Array3x3 = [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n  ];\n\n  constructor(values?: Array3x3) {\n    if (values) {\n      this.values = values;\n    }\n  }\n\n  multiply(other: Vector3): Vector3 {\n    const dst = new Vector3();\n    for (let row = 0; row < 3; ++row) {\n      dst.values[row] = this.values[row][0] * other.values[0] + this.values[row][1] * other.values[1] +\n          this.values[row][2] * other.values[2];\n    }\n    return dst;\n  }\n}\n\n// A transfer function mapping encoded values to linear values,\n// represented by this 7-parameter piecewise function:\n//\n//   linear = sign(encoded) *  (c*|encoded| + f)       , 0 <= |encoded| < d\n//          = sign(encoded) * ((a*|encoded| + b)^g + e), d <= |encoded|\n//\n// (A simple gamma transfer function sets g to gamma and a to 1.)\nclass TransferFunction {\n  g: number;\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n\n  constructor(g: number, a: number, b: number = 0, c: number = 0, d: number = 0, e: number = 0, f: number = 0) {\n    this.g = g;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.e = e;\n    this.f = f;\n  }\n\n  eval(val: number): number {\n    const sign = val < 0 ? -1.0 : 1.0;\n    const abs = val * sign;\n\n    // 0 <= |encoded| < d path\n    if (abs < this.d) {\n      return sign * (this.c * abs + this.f);\n    }\n\n    // d <= |encoded| path\n    return sign * (Math.pow(this.a * abs + this.b, this.g) + this.e);\n  }\n}\n\nconst NAMED_TRANSFER_FN = {\n  sRGB: new TransferFunction(2.4, (1 / 1.055), (0.055 / 1.055), (1 / 12.92), 0.04045, 0.0, 0.0),\n  sRGB_INVERSE: new TransferFunction(0.416667, 1.13728, -0, 12.92, 0.0031308, -0.0549698, -0),\n\n  proPhotoRGB: new TransferFunction(1.8, 1),\n  proPhotoRGB_INVERSE: new TransferFunction(0.555556, 1, -0, 0, 0, 0, 0),\n\n  k2Dot2: new TransferFunction(2.2, 1.0),\n  k2Dot2_INVERSE: new TransferFunction(0.454545, 1),\n\n  rec2020: new TransferFunction(2.22222, 0.909672, 0.0903276, 0.222222, 0.0812429, 0, 0),\n  rec2020_INVERSE: new TransferFunction(0.45, 1.23439, -0, 4.5, 0.018054, -0.0993195, -0),\n};\n\nconst NAMED_GAMUTS = {\n  sRGB: new Matrix3x3([\n    [0.436065674, 0.385147095, 0.143066406],\n    [0.222488403, 0.716873169, 0.060607910],\n    [0.013916016, 0.097076416, 0.714096069],\n  ]),\n  sRGB_INVERSE: new Matrix3x3([\n    [3.134112151374599, -1.6173924597114966, -0.4906334036481285],\n    [-0.9787872938826594, 1.9162795854799963, 0.0334547139520088],\n    [0.07198304248352326, -0.2289858493321844, 1.4053851325241447],\n  ]),\n  displayP3: new Matrix3x3([\n    [0.515102, 0.291965, 0.157153],\n    [0.241182, 0.692236, 0.0665819],\n    [-0.00104941, 0.0418818, 0.784378],\n  ]),\n  displayP3_INVERSE: new Matrix3x3([\n    [2.404045155982687, -0.9898986932663839, -0.3976317191366333],\n    [-0.8422283799266768, 1.7988505115115485, 0.016048170293157416],\n    [0.04818705979712955, -0.09737385156228891, 1.2735066448052303],\n  ]),\n  adobeRGB: new Matrix3x3([\n    [0.60974, 0.20528, 0.14919],\n    [0.31111, 0.62567, 0.06322],\n    [0.01947, 0.06087, 0.74457],\n  ]),\n  adobeRGB_INVERSE: new Matrix3x3([\n    [1.9625385510109137, -0.6106892546501431, -0.3413827467482388],\n    [-0.9787580455521, 1.9161624707082339, 0.03341676594241408],\n    [0.028696263137883395, -0.1406807819331586, 1.349252109991369],\n  ]),\n  rec2020: new Matrix3x3([\n    [0.673459, 0.165661, 0.125100],\n    [0.279033, 0.675338, 0.0456288],\n    [-0.00193139, 0.0299794, 0.797162],\n  ]),\n  rec2020_INVERSE: new Matrix3x3([\n    [1.647275201661012, -0.3936024771460771, -0.23598028884792507],\n    [-0.6826176165196962, 1.647617775014935, 0.01281626807852422],\n    [0.029662725298529837, -0.06291668721366285, 1.2533964313435522],\n  ]),\n  xyz: new Matrix3x3([\n    [1.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [0.0, 0.0, 1.0],\n  ]),\n\n};\n\nfunction degToRad(deg: number): number {\n  return deg * (Math.PI / 180);\n}\n\nfunction radToDeg(rad: number): number {\n  return rad * (180 / Math.PI);\n}\n\nfunction applyTransferFns(fn: TransferFunction, r: number, g: number, b: number): [number, number, number] {\n  return [fn.eval(r), fn.eval(g), fn.eval(b)];\n}\n\nconst OKLAB_TO_LMS_MATRIX = new Matrix3x3([\n  [0.99999999845051981432, 0.39633779217376785678, 0.21580375806075880339],\n  [1.0000000088817607767, -0.1055613423236563494, -0.063854174771705903402],\n  [1.0000000546724109177, -0.089484182094965759684, -1.2914855378640917399],\n]);\n\n// Inverse of the OKLAB_TO_LMS_MATRIX\nconst LMS_TO_OKLAB_MATRIX = new Matrix3x3([\n  [0.2104542553, 0.7936177849999999, -0.0040720468],\n  [1.9779984951000003, -2.4285922049999997, 0.4505937099000001],\n  [0.025904037099999982, 0.7827717662, -0.8086757660000001],\n]);\n\nconst XYZ_TO_LMS_MATRIX = new Matrix3x3([\n  [0.8190224432164319, 0.3619062562801221, -0.12887378261216414],\n  [0.0329836671980271, 0.9292868468965546, 0.03614466816999844],\n  [0.048177199566046255, 0.26423952494422764, 0.6335478258136937],\n]);\n// Inverse of XYZ_TO_LMS_MATRIX\nconst LMS_TO_XYZ_MATRIX = new Matrix3x3([\n  [1.226879873374156, -0.5578149965554814, 0.2813910501772159],\n  [-0.040575762624313734, 1.1122868293970596, -0.07171106666151703],\n  [-0.07637294974672144, -0.4214933239627915, 1.586924024427242],\n]);\n\nconst PRO_PHOTO_TO_XYZD50_MATRIX = new Matrix3x3([\n  [0.7976700747153241, 0.13519395152800417, 0.03135596341127167],\n  [0.28803902352472205, 0.7118744007923554, 0.00008661179538844252],\n  [2.739876695467402e-7, -0.0000014405226518969991, 0.825211112593861],\n]);\n// Inverse of PRO_PHOTO_TO_XYZD50_MATRIX\nconst XYZD50_TO_PRO_PHOTO_MATRIX = new Matrix3x3([\n  [1.3459533710138858, -0.25561367037652133, -0.051116041522131374],\n  [-0.544600415668951, 1.5081687311475767, 0.020535163968720935],\n  [-0.0000013975622054109725, 0.000002717590904589903, 1.2118111696814942],\n]);\n\nconst XYZD65_TO_XYZD50_MATRIX = new Matrix3x3([\n  [1.0478573189120088, 0.022907374491829943, -0.050162247377152525],\n  [0.029570500050499514, 0.9904755577034089, -0.017061518194840468],\n  [-0.00924047197558879, 0.015052921526981566, 0.7519708530777581],\n]);\n// Inverse of XYZD65_TO_XYZD50_MATRIX\nconst XYZD50_TO_XYZD65_MATRIX = new Matrix3x3([\n  [0.9555366447632887, -0.02306009252137888, 0.06321844147263304],\n  [-0.028315378228764922, 1.009951351591575, 0.021026001591792402],\n  [0.012308773293784308, -0.02050053471777469, 1.3301947294775631],\n]);\n\nconst XYZD65_TO_SRGB_MATRIX = new Matrix3x3([\n  [3.2408089365140573, -1.5375788839307314, -0.4985609572551541],\n  [-0.9692732213205414, 1.876110235238969, 0.041560501141251774],\n  [0.05567030990267439, -0.2040007921971802, 1.0571046720577026],\n]);\n\nexport class ColorConverter {\n  static labToXyzd50(l: number, a: number, b: number): [number, number, number] {\n    let y = (l + 16.0) / 116.0;\n    let x = y + a / 500.0;\n    let z = y - b / 200.0;\n\n    function labInverseTransferFunction(t: number): number {\n      const delta = (24.0 / 116.0);\n\n      if (t <= delta) {\n        return (108.0 / 841.0) * (t - (16.0 / 116.0));\n      }\n\n      return t * t * t;\n    }\n\n    x = labInverseTransferFunction(x) * D50_X;\n    y = labInverseTransferFunction(y) * D50_Y;\n    z = labInverseTransferFunction(z) * D50_Z;\n\n    return [x, y, z];\n  }\n\n  static xyzd50ToLab(x: number, y: number, z: number): [number, number, number] {\n    function labTransferFunction(t: number): number {\n      const deltaLimit: number = (24.0 / 116.0) * (24.0 / 116.0) * (24.0 / 116.0);\n\n      if (t <= deltaLimit) {\n        return (841.0 / 108.0) * t + (16.0 / 116.0);\n      }\n      return Math.pow(t, 1.0 / 3.0);\n    }\n\n    x = labTransferFunction(x / D50_X);\n    y = labTransferFunction(y / D50_Y);\n    z = labTransferFunction(z / D50_Z);\n\n    const l = 116.0 * y - 16.0;\n    const a = 500.0 * (x - y);\n    const b = 200.0 * (y - z);\n\n    return [l, a, b];\n  }\n\n  static oklabToXyzd65(l: number, a: number, b: number): [number, number, number] {\n    const labInput = new Vector3([l, a, b]);\n    const lmsIntermediate = OKLAB_TO_LMS_MATRIX.multiply(labInput);\n    lmsIntermediate.values[0] = lmsIntermediate.values[0] * lmsIntermediate.values[0] * lmsIntermediate.values[0];\n    lmsIntermediate.values[1] = lmsIntermediate.values[1] * lmsIntermediate.values[1] * lmsIntermediate.values[1];\n    lmsIntermediate.values[2] = lmsIntermediate.values[2] * lmsIntermediate.values[2] * lmsIntermediate.values[2];\n    const xyzOutput = LMS_TO_XYZ_MATRIX.multiply(lmsIntermediate);\n    return xyzOutput.values;\n  }\n\n  static xyzd65ToOklab(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const lmsIntermediate = XYZ_TO_LMS_MATRIX.multiply(xyzInput);\n\n    lmsIntermediate.values[0] = Math.pow(lmsIntermediate.values[0], 1.0 / 3.0);\n    lmsIntermediate.values[1] = Math.pow(lmsIntermediate.values[1], 1.0 / 3.0);\n    lmsIntermediate.values[2] = Math.pow(lmsIntermediate.values[2], 1.0 / 3.0);\n\n    const labOutput = LMS_TO_OKLAB_MATRIX.multiply(lmsIntermediate);\n    return [labOutput.values[0], labOutput.values[1], labOutput.values[2]];\n  }\n\n  static lchToLab(l: number, c: number, h: number|undefined): [number, number, number] {\n    if (h === undefined) {\n      return [l, 0, 0];\n    }\n\n    return [l, c * Math.cos(degToRad(h)), c * Math.sin(degToRad(h))];\n  }\n\n  static labToLch(l: number, a: number, b: number): [number, number, number] {\n    return [l, Math.sqrt(a * a + b * b), radToDeg(Math.atan2(b, a))];\n  }\n\n  static displayP3ToXyzd50(r: number, g: number, b: number): [number, number, number] {\n    const [mappedR, mappedG, mappedB] = applyTransferFns(NAMED_TRANSFER_FN.sRGB, r, g, b);\n    const rgbInput = new Vector3([mappedR, mappedG, mappedB]);\n    const xyzOutput = NAMED_GAMUTS.displayP3.multiply(rgbInput);\n    return xyzOutput.values;\n  }\n\n  static xyzd50ToDisplayP3(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const rgbOutput = NAMED_GAMUTS.displayP3_INVERSE.multiply(xyzInput);\n    return applyTransferFns(\n        NAMED_TRANSFER_FN.sRGB_INVERSE, rgbOutput.values[0], rgbOutput.values[1], rgbOutput.values[2]);\n  }\n\n  static proPhotoToXyzd50(r: number, g: number, b: number): [number, number, number] {\n    const [mappedR, mappedG, mappedB] = applyTransferFns(NAMED_TRANSFER_FN.proPhotoRGB, r, g, b);\n    const rgbInput = new Vector3([mappedR, mappedG, mappedB]);\n    const xyzOutput = PRO_PHOTO_TO_XYZD50_MATRIX.multiply(rgbInput);\n    return xyzOutput.values;\n  }\n\n  static xyzd50ToProPhoto(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const rgbOutput = XYZD50_TO_PRO_PHOTO_MATRIX.multiply(xyzInput);\n    return applyTransferFns(\n        NAMED_TRANSFER_FN.proPhotoRGB_INVERSE, rgbOutput.values[0], rgbOutput.values[1], rgbOutput.values[2]);\n  }\n\n  static adobeRGBToXyzd50(r: number, g: number, b: number): [number, number, number] {\n    const [mappedR, mappedG, mappedB] = applyTransferFns(NAMED_TRANSFER_FN.k2Dot2, r, g, b);\n    const rgbInput = new Vector3([mappedR, mappedG, mappedB]);\n    const xyzOutput = NAMED_GAMUTS.adobeRGB.multiply(rgbInput);\n    return xyzOutput.values;\n  }\n\n  static xyzd50ToAdobeRGB(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const rgbOutput = NAMED_GAMUTS.adobeRGB_INVERSE.multiply(xyzInput);\n    return applyTransferFns(\n        NAMED_TRANSFER_FN.k2Dot2_INVERSE, rgbOutput.values[0], rgbOutput.values[1], rgbOutput.values[2]);\n  }\n\n  static rec2020ToXyzd50(r: number, g: number, b: number): [number, number, number] {\n    const [mappedR, mappedG, mappedB] = applyTransferFns(NAMED_TRANSFER_FN.rec2020, r, g, b);\n    const rgbInput = new Vector3([mappedR, mappedG, mappedB]);\n    const xyzOutput = NAMED_GAMUTS.rec2020.multiply(rgbInput);\n    return xyzOutput.values;\n  }\n\n  static xyzd50ToRec2020(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const rgbOutput = NAMED_GAMUTS.rec2020_INVERSE.multiply(xyzInput);\n    return applyTransferFns(\n        NAMED_TRANSFER_FN.rec2020_INVERSE, rgbOutput.values[0], rgbOutput.values[1], rgbOutput.values[2]);\n  }\n\n  static xyzd50ToD65(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const xyzOutput = XYZD50_TO_XYZD65_MATRIX.multiply(xyzInput);\n    return xyzOutput.values;\n  }\n\n  static xyzd65ToD50(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const xyzOutput = XYZD65_TO_XYZD50_MATRIX.multiply(xyzInput);\n    return xyzOutput.values;\n  }\n\n  static xyzd65TosRGBLinear(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const rgbResult = XYZD65_TO_SRGB_MATRIX.multiply(xyzInput);\n    return rgbResult.values;\n  }\n\n  static xyzd50TosRGBLinear(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const rgbResult = NAMED_GAMUTS.sRGB_INVERSE.multiply(xyzInput);\n    return rgbResult.values;\n  }\n\n  static srgbLinearToXyzd50(r: number, g: number, b: number): [number, number, number] {\n    const rgbInput = new Vector3([r, g, b]);\n    const xyzOutput = NAMED_GAMUTS.sRGB.multiply(rgbInput);\n    return xyzOutput.values;\n  }\n\n  static srgbToXyzd50(r: number, g: number, b: number): [number, number, number] {\n    const [mappedR, mappedG, mappedB] = applyTransferFns(NAMED_TRANSFER_FN.sRGB, r, g, b);\n    const rgbInput = new Vector3([mappedR, mappedG, mappedB]);\n    const xyzOutput = NAMED_GAMUTS.sRGB.multiply(rgbInput);\n    return xyzOutput.values;\n  }\n\n  static xyzd50ToSrgb(x: number, y: number, z: number): [number, number, number] {\n    const xyzInput = new Vector3([x, y, z]);\n    const rgbOutput = NAMED_GAMUTS.sRGB_INVERSE.multiply(xyzInput);\n    return applyTransferFns(\n        NAMED_TRANSFER_FN.sRGB_INVERSE, rgbOutput.values[0], rgbOutput.values[1], rgbOutput.values[2]);\n  }\n\n  static oklchToXyzd50(lInput: number, c: number, h: number): [number, number, number] {\n    const [l, a, b] = ColorConverter.lchToLab(lInput, c, h);\n    const [x65, y65, z65] = ColorConverter.oklabToXyzd65(l, a, b);\n    return ColorConverter.xyzd65ToD50(x65, y65, z65);\n  }\n\n  static xyzd50ToOklch(x: number, y: number, z: number): [number, number, number] {\n    const [x65, y65, z65] = ColorConverter.xyzd50ToD65(x, y, z);\n    const [l, a, b] = ColorConverter.xyzd65ToOklab(x65, y65, z65);\n    return ColorConverter.labToLch(l, a, b);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
