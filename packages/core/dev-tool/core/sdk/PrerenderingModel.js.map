{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/PrerenderingModel.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as Common from '../common/common.js';\n\nimport type * as Platform from '../platform/platform.js';\n\nimport * as ChildTargetManager from './ChildTargetManager.js';\nimport * as ResourceTreeModel from './ResourceTreeModel.js';\nimport * as SDKModel from './SDKModel.js';\nimport * as Target from './Target.js';\nimport * as TargetManager from './TargetManager.js';\n\n// Holds prerendering information of given target.\n//\n// Note: In first implementation of Preloading Status Panel, we utilize\n// TargetInfo to detect beginning of prerendering. See the discussion in\n// https://chromium-review.googlesource.com/c/chromium/src/+/3875947/comment/595dd0d3_bb2cb92f/\nexport class PrerenderingModel extends SDKModel.SDKModel<EventTypes> implements\n    TargetManager.SDKModelObserver<ResourceTreeModel.ResourceTreeModel> {\n  private registry: PrerenderingRegistry = new PrerenderingRegistry();\n\n  constructor(target: Target.Target) {\n    super(target);\n\n    TargetManager.TargetManager.instance().addModelListener(\n        ChildTargetManager.ChildTargetManager, ChildTargetManager.Events.TargetInfoChanged, this.onTargetInfoChanged,\n        this);\n    TargetManager.TargetManager.instance().observeModels(ResourceTreeModel.ResourceTreeModel, this);\n  }\n\n  dispose(): void {\n    super.dispose();\n\n    TargetManager.TargetManager.instance().removeModelListener(\n        ChildTargetManager.ChildTargetManager, ChildTargetManager.Events.TargetInfoChanged, this.onTargetInfoChanged,\n        this);\n    TargetManager.TargetManager.instance().unobserveModels(ResourceTreeModel.ResourceTreeModel, this);\n  }\n\n  // Returns reference. Don't save returned values.\n  getById(id: PreloadingId): PrerenderingAttempt|null {\n    return this.registry.getById(id);\n  }\n\n  // Returns array of pairs of id and reference. Don't save returned references.\n  getAll(): PrerenderingAttemptWithId[] {\n    return this.registry.getAll();\n  }\n\n  clearNotOngoing(): void {\n    this.registry.clearNotOngoing();\n    this.dispatchPrerenderingAttemptsRemoved();\n  }\n\n  private dispatchPrerenderingAttemptStarted(): void {\n    this.dispatchEventToListeners(Events.PrerenderingAttemptStarted);\n  }\n\n  private dispatchPrerenderingAttemptUpdated(): void {\n    this.dispatchEventToListeners(Events.PrerenderingAttemptUpdated);\n  }\n\n  private dispatchPrerenderingAttemptsRemoved(): void {\n    this.dispatchEventToListeners(Events.PrerenderingAttemptsRemoved);\n  }\n\n  private onTargetInfoChanged(event: Common.EventTarget.EventTargetEvent<Protocol.Target.TargetInfo>): void {\n    const targetInfo = event.data;\n\n    if (targetInfo.subtype !== 'prerender') {\n      return;\n    }\n\n    // Ad-hoc filtering. Ignore the active page.\n    if (targetInfo.url === '') {\n      return;\n    }\n\n    // Non trivial assumption\n    //\n    // We assume that targetId is the same to frameId for targetInfo\n    // with subtype === 'prerender'.\n    const frameId = (targetInfo.targetId as string) as Protocol.Page.FrameId;\n\n    this.registry.maybeAddOpaquePrerendering(frameId, targetInfo.url as Platform.DevToolsPath.UrlString);\n\n    this.dispatchPrerenderingAttemptStarted();\n  }\n\n  // implements TargetManager.SDKModelObserver<ResourceTreeModel.ResourceTreeModel>\n  modelAdded(model: ResourceTreeModel.ResourceTreeModel): void {\n    model.addEventListener(ResourceTreeModel.Events.PrerenderAttemptCompleted, this.onPrerenderAttemptCompleted, this);\n  }\n\n  // implements TargetManager.SDKModelObserver<ResourceTreeModel.ResourceTreeModel>\n  modelRemoved(model: ResourceTreeModel.ResourceTreeModel): void {\n    model.removeEventListener(\n        ResourceTreeModel.Events.PrerenderAttemptCompleted, this.onPrerenderAttemptCompleted, this);\n  }\n\n  private onPrerenderAttemptCompleted(\n      event: Common.EventTarget.EventTargetEvent<Protocol.Page.PrerenderAttemptCompletedEvent>): void {\n    const inner = event.data;\n\n    this.registry.updateOpaquePrerenderingAttempt(inner);\n\n    this.dispatchPrerenderingAttemptUpdated();\n  }\n}\n\nSDKModel.SDKModel.register(PrerenderingModel, {capabilities: Target.Capability.Target, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  PrerenderingAttemptStarted = 'PrerenderingAttemptStarted',\n  PrerenderingAttemptUpdated = 'PrerenderingAttemptUpdated',\n  PrerenderingAttemptsRemoved = 'PrerenderingAttemtsRemoved',\n}\n\nexport type EventTypes = {\n  [Events.PrerenderingAttemptStarted]: void,\n  [Events.PrerenderingAttemptUpdated]: void,\n  [Events.PrerenderingAttemptsRemoved]: void,\n};\n\n// Id for preloading events and prerendering attempt.\nexport type PreloadingId = string;\n\nexport type PrerenderingAttemptId = string;\n\nexport interface PrerenderingAttempt {\n  prerenderingAttemptId: PrerenderingAttemptId;\n  startedAt: number;\n  trigger: PrerenderingTrigger;\n  url: Platform.DevToolsPath.UrlString;\n  status: PrerenderingStatus;\n  discardedReason?: Protocol.Page.PrerenderFinalStatus|null|'Unknown';\n}\n\ntype PrerenderingTrigger =\n    PrerenderingTriggerSpecRules|PrerenderingTriggerDUI|PrerenderingTriggerDSE|PrerenderingTriggerOpaque;\n\ninterface PrerenderingTriggerSpecRules {\n  kind: 'PrerenderingTriggerSpecRules';\n  rule: object;\n}\n\ninterface PrerenderingTriggerDUI {\n  kind: 'PrerenderingTriggerDUI';\n}\n\ninterface PrerenderingTriggerDSE {\n  kind: 'PrerenderingTriggerDSE';\n}\n\ninterface PrerenderingTriggerOpaque {\n  kind: 'PrerenderingTriggerOpaque';\n}\n\nexport const enum PrerenderingStatus {\n  Prerendering = 'Prerendering',\n  Activated = 'Activated',\n  Discarded = 'Discarded',\n}\n\nexport type PrerenderingAttemptEvent = PrerenderingAttemptEventAdd|PrerenderingAttemptEventUpdate;\n\nexport interface PrerenderingAttemptEventAdd {\n  kind: 'PrerenderingAttemptEventAdd';\n  attempt: PrerenderingAttempt;\n}\n\nexport interface PrerenderingAttemptEventUpdate {\n  kind: 'PrerenderingAttemptEventUpdate';\n  update: PrerenderingAttempt;\n}\n\nexport interface PrerenderingAttemptWithId {\n  id: PreloadingId;\n  attempt: PrerenderingAttempt;\n}\n\n// export only for testing.\nexport class PrerenderingRegistry {\n  private entities: Map<PreloadingId, PrerenderingAttempt> = new Map<PreloadingId, PrerenderingAttempt>();\n  // Currently, PrerenderAttemptCompleted event doesn't have information\n  // to identify corresponding attempt. To mitigate this, we utilize the\n  // fact that attempts are activated/cancelled if navigated out. So,\n  // in many cases, we can identify an ongoing attempt by URL.\n  private opaqueUrlToPreId: Map<Platform.DevToolsPath.UrlString, PreloadingId> =\n      new Map<Platform.DevToolsPath.UrlString, PreloadingId>();\n\n  // Returns reference. Don't save returned values.\n  getById(id: PreloadingId): PrerenderingAttempt|null {\n    return this.entities.get(id) || null;\n  }\n\n  // Returns array of pairs of id and reference. Don't save returned references.\n  getAll(): PrerenderingAttemptWithId[] {\n    return Array.from(this.entities.entries()).map(([id, attempt]) => ({id, attempt}));\n  }\n\n  private makePreloadingId(x: PrerenderingAttempt): PreloadingId {\n    if (x.trigger.kind === 'PrerenderingTriggerOpaque') {\n      return `PrerenderingAttempt-opaque:${x.prerenderingAttemptId}` as PreloadingId;\n    }\n    return `PrerenderingAttempt:${x.prerenderingAttemptId}` as PreloadingId;\n  }\n\n  private makePreIdOfPrerendering(frameId: Protocol.Page.FrameId): PreloadingId {\n    return `PrerenderingAttempt-opaque:${frameId}` as PreloadingId;\n  }\n\n  // TODO(https://crbug.com/1384419): Make this private.\n  processEvent(event: PrerenderingAttemptEvent): void {\n    switch (event.kind) {\n      case 'PrerenderingAttemptEventAdd': {\n        this.entities.set(this.makePreloadingId(event.attempt), event.attempt);\n        break;\n      }\n      case 'PrerenderingAttemptEventUpdate': {\n        this.entities.set(this.makePreloadingId(event.update), event.update);\n\n        const x = event.update;\n        if (x.status !== PrerenderingStatus.Prerendering) {\n          if (this.opaqueUrlToPreId.get(x.url)) {\n            this.opaqueUrlToPreId.delete(x.url);\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n  // Clear not ongoing prerendering attempts.\n  clearNotOngoing(): void {\n    for (const [id, x] of this.entities.entries()) {\n      if (x.status !== PrerenderingStatus.Prerendering) {\n        this.entities.delete(id);\n      }\n    }\n  }\n\n  // Initial support of detecting prerendering start\n  // TODO: Make CDP changes correctly.\n  maybeAddOpaquePrerendering(frameId: Protocol.Page.FrameId, url: Platform.DevToolsPath.UrlString): void {\n    // Ad-hoc filtering\n    //\n    // If a page has SpeculationRules and browser navigated out to a not\n    // related page, current Chrome throws PrerenderAttemptCompleted\n    // event and then TargetInfoChanged event. This filtering prevents\n    // adding a new prerendering attempt by the latter TargetInfoChanged.\n    if (this.entities.get(this.makePreIdOfPrerendering(frameId)) !== undefined) {\n      return;\n    }\n\n    const prerenderingAttemptId: PrerenderingAttemptId = frameId as PrerenderingAttemptId;\n    const event: PrerenderingAttemptEventAdd = {\n      kind: 'PrerenderingAttemptEventAdd',\n      attempt: {\n        prerenderingAttemptId: prerenderingAttemptId,\n        startedAt: Date.now(),\n        trigger: {\n          kind: 'PrerenderingTriggerOpaque',\n        },\n        url,\n        status: PrerenderingStatus.Prerendering,\n      },\n    };\n    this.processEvent(event);\n\n    const id = this.makePreIdOfPrerendering(frameId);\n    this.opaqueUrlToPreId.set(url, id);\n  }\n\n  updateOpaquePrerenderingAttempt(event: Protocol.Page.PrerenderAttemptCompletedEvent): void {\n    const id = this.opaqueUrlToPreId.get(event.prerenderingUrl as Platform.DevToolsPath.UrlString);\n\n    if (id === undefined) {\n      return;\n    }\n\n    const originalAttempt = this.entities.get(id);\n\n    if (originalAttempt === undefined) {\n      return;\n    }\n\n    const status = (event.finalStatus === Protocol.Page.PrerenderFinalStatus.Activated) ? PrerenderingStatus.Activated :\n                                                                                          PrerenderingStatus.Discarded;\n    const eventInternal: PrerenderingAttemptEventUpdate = {\n      kind: 'PrerenderingAttemptEventUpdate',\n      update: {\n        prerenderingAttemptId: originalAttempt.prerenderingAttemptId,\n        startedAt: originalAttempt.startedAt,\n        trigger: originalAttempt.trigger,\n        url: originalAttempt.url,\n        status: status,\n        discardedReason: this.getDiscardedReason(event),\n      },\n    };\n    this.processEvent(eventInternal);\n  }\n\n  private getDiscardedReason(event: Protocol.Page.PrerenderAttemptCompletedEvent): Protocol.Page.PrerenderFinalStatus\n      |null {\n    switch (event.finalStatus) {\n      case Protocol.Page.PrerenderFinalStatus.Activated:\n        return null;\n      case Protocol.Page.PrerenderFinalStatus.Destroyed:\n        return null;\n      default:\n        return event.finalStatus;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
