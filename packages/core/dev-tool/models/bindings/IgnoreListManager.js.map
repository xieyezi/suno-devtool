{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/IgnoreListManager.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {type DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to stop preventing the debugger from stepping into library code\n   */\n  removeFromIgnoreList: 'Remove from ignore list',\n  /**\n   *@description Text for scripts that should not be stepped into when debugging\n   */\n  addScriptToIgnoreList: 'Add script to ignore list',\n  /**\n   *@description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  removeAllContentScriptsFrom: 'Remove all content scripts from ignore list',\n  /**\n   *@description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  addAllContentScriptsToIgnoreList: 'Add all content scripts to ignore list',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/bindings/IgnoreListManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet ignoreListManagerInstance: IgnoreListManager;\n\nexport class IgnoreListManager implements SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  readonly #debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  readonly #listeners: Set<() => void>;\n  readonly #isIgnoreListedURLCache: Map<string, boolean>;\n\n  private constructor(debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.#debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared,\n        this.clearCacheIfNeeded.bind(this), this);\n    Common.Settings.Settings.instance()\n        .moduleSetting('skipStackFramesPattern')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('skipContentScripts')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('automaticallyIgnoreListKnownThirdPartyScripts')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('enableIgnoreListing')\n        .addChangeListener(this.patternChanged.bind(this));\n\n    this.#listeners = new Set();\n\n    this.#isIgnoreListedURLCache = new Map();\n\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.DebuggerModel.DebuggerModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    debuggerWorkspaceBinding: DebuggerWorkspaceBinding|null,\n  } = {forceNew: null, debuggerWorkspaceBinding: null}): IgnoreListManager {\n    const {forceNew, debuggerWorkspaceBinding} = opts;\n    if (!ignoreListManagerInstance || forceNew) {\n      if (!debuggerWorkspaceBinding) {\n        throw new Error(\n            `Unable to create settings: targetManager, workspace, and debuggerWorkspaceBinding must be provided: ${\n                new Error().stack}`);\n      }\n\n      ignoreListManagerInstance = new IgnoreListManager(debuggerWorkspaceBinding);\n    }\n\n    return ignoreListManagerInstance;\n  }\n\n  addChangeListener(listener: () => void): void {\n    this.#listeners.add(listener);\n  }\n\n  removeChangeListener(listener: () => void): void {\n    this.#listeners.delete(listener);\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    void this.setIgnoreListPatterns(debuggerModel);\n    const sourceMapManager = debuggerModel.sourceMapManager();\n    sourceMapManager.addEventListener(SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this);\n    sourceMapManager.addEventListener(SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this);\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    this.clearCacheIfNeeded();\n    const sourceMapManager = debuggerModel.sourceMapManager();\n    sourceMapManager.removeEventListener(SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this);\n    sourceMapManager.removeEventListener(SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this);\n  }\n\n  private clearCacheIfNeeded(): void {\n    if (this.#isIgnoreListedURLCache.size > 1024) {\n      this.#isIgnoreListedURLCache.clear();\n    }\n  }\n\n  private getSkipStackFramesPatternSetting(): Common.Settings.RegExpSetting {\n    return Common.Settings.Settings.instance().moduleSetting('skipStackFramesPattern') as Common.Settings.RegExpSetting;\n  }\n\n  private setIgnoreListPatterns(debuggerModel: SDK.DebuggerModel.DebuggerModel): Promise<boolean> {\n    const regexPatterns = this.enableIgnoreListing ? this.getSkipStackFramesPatternSetting().getAsArray() : [];\n    const patterns = ([] as string[]);\n    for (const item of regexPatterns) {\n      if (!item.disabled && item.pattern) {\n        patterns.push(item.pattern);\n      }\n    }\n    return debuggerModel.setBlackboxPatterns(patterns);\n  }\n\n  isUserOrSourceMapIgnoreListedUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    const projectType = uiSourceCode.project().type();\n    const isContentScript = projectType === Workspace.Workspace.projectTypes.ContentScripts;\n    if (this.skipContentScripts && isContentScript) {\n      return true;\n    }\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    return url ? this.isUserOrSourceMapIgnoreListedURL(url, uiSourceCode.isKnownThirdParty()) : false;\n  }\n\n  isUserOrSourceMapIgnoreListedURL(url: Platform.DevToolsPath.UrlString, isKnownThirdParty: boolean): boolean {\n    if (this.isUserIgnoreListedURL(url)) {\n      return true;\n    }\n    if (this.automaticallyIgnoreListKnownThirdPartyScripts && isKnownThirdParty) {\n      return true;\n    }\n    return false;\n  }\n\n  isUserIgnoreListedURL(url: Platform.DevToolsPath.UrlString, isContentScript?: boolean): boolean {\n    if (!this.enableIgnoreListing) {\n      return false;\n    }\n    if (this.#isIgnoreListedURLCache.has(url)) {\n      return Boolean(this.#isIgnoreListedURLCache.get(url));\n    }\n    if (isContentScript && this.skipContentScripts) {\n      return true;\n    }\n    const regex = this.getSkipStackFramesPatternSetting().asRegExp();\n    const isIgnoreListed = (regex && regex.test(url)) || false;\n    this.#isIgnoreListedURLCache.set(url, isIgnoreListed);\n    return isIgnoreListed;\n  }\n\n  private sourceMapAttached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      void {\n    const script = event.data.client;\n    const sourceMap = event.data.sourceMap;\n    void this.updateScriptRanges(script, sourceMap);\n  }\n\n  private sourceMapDetached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      void {\n    const script = event.data.client;\n    void this.updateScriptRanges(script, undefined);\n  }\n\n  private async updateScriptRanges(script: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap|undefined):\n      Promise<void> {\n    let hasIgnoreListedMappings = false;\n    if (!IgnoreListManager.instance().isUserIgnoreListedURL(script.sourceURL, script.isContentScript())) {\n      hasIgnoreListedMappings =\n          sourceMap?.sourceURLs().some(\n              url => this.isUserOrSourceMapIgnoreListedURL(url, sourceMap.hasIgnoreListHint(url))) ??\n          false;\n    }\n    if (!hasIgnoreListedMappings) {\n      if (scriptToRange.get(script) && await script.setBlackboxedRanges([])) {\n        scriptToRange.delete(script);\n      }\n      await this.#debuggerWorkspaceBinding.updateLocations(script);\n      return;\n    }\n\n    if (!sourceMap) {\n      return;\n    }\n\n    const newRanges =\n        sourceMap\n            .findRanges(\n                srcURL => this.isUserOrSourceMapIgnoreListedURL(srcURL, sourceMap.hasIgnoreListHint(srcURL)),\n                {isStartMatching: true})\n            .flatMap(range => [range.start, range.end]);\n\n    const oldRanges = scriptToRange.get(script) || [];\n    if (!isEqual(oldRanges, newRanges) && await script.setBlackboxedRanges(newRanges)) {\n      scriptToRange.set(script, newRanges);\n    }\n    void this.#debuggerWorkspaceBinding.updateLocations(script);\n\n    function isEqual(rangesA: SourceRange[], rangesB: SourceRange[]): boolean {\n      if (rangesA.length !== rangesB.length) {\n        return false;\n      }\n      for (let i = 0; i < rangesA.length; ++i) {\n        if (rangesA[i].lineNumber !== rangesB[i].lineNumber || rangesA[i].columnNumber !== rangesB[i].columnNumber) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  private uiSourceCodeURL(uiSourceCode: Workspace.UISourceCode.UISourceCode): Platform.DevToolsPath.UrlString|null {\n    return uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Debugger ? null : uiSourceCode.url();\n  }\n\n  canIgnoreListUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    return url ? Boolean(this.urlToRegExpString(url)) : false;\n  }\n\n  ignoreListUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    if (url) {\n      this.ignoreListURL(url);\n    }\n  }\n\n  unIgnoreListUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    if (url) {\n      this.unIgnoreListURL(url);\n    }\n  }\n\n  get enableIgnoreListing(): boolean {\n    return Common.Settings.Settings.instance().moduleSetting('enableIgnoreListing').get();\n  }\n\n  get skipContentScripts(): boolean {\n    return this.enableIgnoreListing && Common.Settings.Settings.instance().moduleSetting('skipContentScripts').get();\n  }\n\n  get automaticallyIgnoreListKnownThirdPartyScripts(): boolean {\n    return this.enableIgnoreListing &&\n        Common.Settings.Settings.instance().moduleSetting('automaticallyIgnoreListKnownThirdPartyScripts').get();\n  }\n\n  ignoreListContentScripts(): void {\n    Common.Settings.Settings.instance().moduleSetting('skipContentScripts').set(true);\n  }\n\n  unIgnoreListContentScripts(): void {\n    Common.Settings.Settings.instance().moduleSetting('skipContentScripts').set(false);\n  }\n\n  private ignoreListURL(url: Platform.DevToolsPath.UrlString): void {\n    const regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    const regexValue = this.urlToRegExpString(url);\n    if (!regexValue) {\n      return;\n    }\n    let found = false;\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.pattern === regexValue) {\n        item.disabled = false;\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      regexPatterns.push({pattern: regexValue, disabled: undefined});\n    }\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  private unIgnoreListURL(url: Platform.DevToolsPath.UrlString): void {\n    let regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    const regexValue = IgnoreListManager.instance().urlToRegExpString(url);\n    if (!regexValue) {\n      return;\n    }\n    regexPatterns = regexPatterns.filter(function(item) {\n      return item.pattern !== regexValue;\n    });\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.disabled) {\n        continue;\n      }\n      try {\n        const regex = new RegExp(item.pattern);\n        if (regex.test(url)) {\n          item.disabled = true;\n        }\n      } catch (e) {\n      }\n    }\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  private async patternChanged(): Promise<void> {\n    this.#isIgnoreListedURLCache.clear();\n\n    const promises: Promise<unknown>[] = [];\n    for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(SDK.DebuggerModel.DebuggerModel)) {\n      promises.push(this.setIgnoreListPatterns(debuggerModel));\n      const sourceMapManager = debuggerModel.sourceMapManager();\n      for (const script of debuggerModel.scripts()) {\n        promises.push(this.updateScriptRanges(script, sourceMapManager.sourceMapForClient(script)));\n      }\n    }\n    await Promise.all(promises);\n    const listeners = Array.from(this.#listeners);\n    for (const listener of listeners) {\n      listener();\n    }\n    this.patternChangeFinishedForTests();\n  }\n\n  private patternChangeFinishedForTests(): void {\n    // This method is sniffed in tests.\n  }\n\n  private urlToRegExpString(url: Platform.DevToolsPath.UrlString): string {\n    const parsedURL = new Common.ParsedURL.ParsedURL(url);\n    if (parsedURL.isAboutBlank() || parsedURL.isDataURL()) {\n      return '';\n    }\n    if (!parsedURL.isValid) {\n      return '^' + Platform.StringUtilities.escapeForRegExp(url) + '$';\n    }\n    let name: string = parsedURL.lastPathComponent;\n    if (name) {\n      name = '/' + name;\n    } else if (parsedURL.folderPathComponents) {\n      name = parsedURL.folderPathComponents + '/';\n    }\n    if (!name) {\n      name = parsedURL.host;\n    }\n    if (!name) {\n      return '';\n    }\n    const scheme = parsedURL.scheme;\n    let prefix = '';\n    if (scheme && scheme !== 'http' && scheme !== 'https') {\n      prefix = '^' + scheme + '://';\n      if (scheme === 'chrome-extension') {\n        prefix += parsedURL.host + '\\\\b';\n      }\n      prefix += '.*';\n    }\n    return prefix + Platform.StringUtilities.escapeForRegExp(name) + (url.endsWith(name) ? '$' : '\\\\b');\n  }\n\n  getIgnoreListURLContextMenuItems(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Array<{text: string, callback: () => void}> {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      return [];\n    }\n\n    const menuItems: Array<{text: string, callback: () => void}> = [];\n    const canIgnoreList = this.canIgnoreListUISourceCode(uiSourceCode);\n    const isIgnoreListed = this.isUserIgnoreListedURL(uiSourceCode.url());\n    const isContentScript = uiSourceCode.project().type() === Workspace.Workspace.projectTypes.ContentScripts;\n\n    if (canIgnoreList) {\n      if (isIgnoreListed) {\n        menuItems.push({\n          text: i18nString(UIStrings.removeFromIgnoreList),\n          callback: this.unIgnoreListUISourceCode.bind(this, uiSourceCode),\n        });\n      } else {\n        menuItems.push({\n          text: i18nString(UIStrings.addScriptToIgnoreList),\n          callback: this.ignoreListUISourceCode.bind(this, uiSourceCode),\n        });\n      }\n    }\n    if (isContentScript) {\n      if (isIgnoreListed) {\n        menuItems.push({\n          text: i18nString(UIStrings.removeAllContentScriptsFrom),\n          callback: this.ignoreListContentScripts.bind(this),\n        });\n      } else {\n        menuItems.push({\n          text: i18nString(UIStrings.addAllContentScriptsToIgnoreList),\n          callback: this.unIgnoreListContentScripts.bind(this),\n        });\n      }\n    }\n    return menuItems;\n  }\n}\nexport interface SourceRange {\n  lineNumber: number;\n  columnNumber: number;\n}\n\nconst scriptToRange = new WeakMap<SDK.Script.Script, SourceRange[]>();\n"],
  "mappings": "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",
  "names": []
}
