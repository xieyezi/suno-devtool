{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/ResourceScriptMapping.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {BreakpointManager, type Breakpoint} from './BreakpointManager.js';\nimport {ContentProviderBasedProject} from './ContentProviderBasedProject.js';\nimport {DebuggerWorkspaceBinding, type DebuggerSourceMapping} from './DebuggerWorkspaceBinding.js';\nimport {NetworkProject} from './NetworkProject.js';\nimport {metadataForURL} from './ResourceUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Error text displayed in the console when editing a live script fails. LiveEdit is\n   *the name of the feature for editing code that is already running.\n   *@example {warning} PH1\n   */\n  liveEditFailed: '`LiveEdit` failed: {PH1}',\n  /**\n   *@description Error text displayed in the console when compiling a live-edited script fails. LiveEdit is\n   *the name of the feature for editing code that is already running.\n   *@example {connection lost} PH1\n   */\n  liveEditCompileFailed: '`LiveEdit` compile failed: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/bindings/ResourceScriptMapping.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ResourceScriptMapping implements DebuggerSourceMapping {\n  readonly debuggerModel: SDK.DebuggerModel.DebuggerModel;\n  #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  readonly #uiSourceCodeToScriptFile: Map<Workspace.UISourceCode.UISourceCode, ResourceScriptFile>;\n  readonly #projects: Map<string, ContentProviderBasedProject>;\n  readonly #scriptToUISourceCode: Map<SDK.Script.Script, Workspace.UISourceCode.UISourceCode>;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n\n  constructor(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.debuggerModel = debuggerModel;\n    this.#workspace = workspace;\n    this.debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n    this.#uiSourceCodeToScriptFile = new Map();\n\n    this.#projects = new Map();\n\n    this.#scriptToUISourceCode = new Map();\n    const runtimeModel = debuggerModel.runtimeModel();\n    this.#eventListeners = [\n      this.debuggerModel.addEventListener(\n          SDK.DebuggerModel.Events.ParsedScriptSource, event => this.addScript(event.data), this),\n      this.debuggerModel.addEventListener(SDK.DebuggerModel.Events.GlobalObjectCleared, this.globalObjectCleared, this),\n      runtimeModel.addEventListener(\n          SDK.RuntimeModel.Events.ExecutionContextDestroyed, this.executionContextDestroyed, this),\n      runtimeModel.target().targetManager().addEventListener(\n          SDK.TargetManager.Events.InspectedURLChanged, this.inspectedURLChanged, this),\n    ];\n  }\n\n  private project(script: SDK.Script.Script): ContentProviderBasedProject {\n    const prefix = script.isContentScript() ? 'js:extensions:' : 'js::';\n    const projectId = prefix + this.debuggerModel.target().id() + ':' + script.frameId;\n    let project = this.#projects.get(projectId);\n    if (!project) {\n      const projectType = script.isContentScript() ? Workspace.Workspace.projectTypes.ContentScripts :\n                                                     Workspace.Workspace.projectTypes.Network;\n      project = new ContentProviderBasedProject(\n          this.#workspace, projectId, projectType, '' /* displayName */, false /* isServiceProject */);\n      NetworkProject.setTargetForProject(project, this.debuggerModel.target());\n      this.#projects.set(projectId, project);\n    }\n    return project;\n  }\n\n  rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null {\n    const script = rawLocation.script();\n    if (!script) {\n      return null;\n    }\n    const uiSourceCode = this.#scriptToUISourceCode.get(script);\n    if (!uiSourceCode) {\n      return null;\n    }\n    const scriptFile = this.#uiSourceCodeToScriptFile.get(uiSourceCode);\n    if (!scriptFile) {\n      return null;\n    }\n    if ((scriptFile.hasDivergedFromVM() && !scriptFile.isMergingToVM()) || scriptFile.isDivergingFromVM()) {\n      return null;\n    }\n    if (!scriptFile.hasScripts([script])) {\n      return null;\n    }\n    const {lineNumber, columnNumber = 0} = rawLocation;\n    return uiSourceCode.uiLocation(lineNumber, columnNumber);\n  }\n\n  uiLocationToRawLocations(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number):\n      SDK.DebuggerModel.Location[] {\n    const scriptFile = this.#uiSourceCodeToScriptFile.get(uiSourceCode);\n    if (!scriptFile) {\n      return [];\n    }\n\n    const {script} = scriptFile;\n    if (!script) {\n      return [];\n    }\n\n    return [this.debuggerModel.createRawLocation(script, lineNumber, columnNumber)];\n  }\n\n  private inspectedURLChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    for (let target: SDK.Target.Target|null = this.debuggerModel.target(); target !== event.data;\n         target = target.parentTarget()) {\n      if (target === null) {\n        return;\n      }\n    }\n\n    // Just remove and readd all scripts to ensure their URLs are reflected correctly.\n    for (const script of Array.from(this.#scriptToUISourceCode.keys())) {\n      this.removeScript(script);\n      this.addScript(script);\n    }\n  }\n\n  private addScript(script: SDK.Script.Script): void {\n    // Ignore live edit scripts here.\n    if (script.isLiveEdit()) {\n      return;\n    }\n\n    let url = script.sourceURL;\n    if (!url) {\n      return;\n    }\n\n    if (script.hasSourceURL) {\n      // Try to resolve `//# sourceURL=` annotations relative to\n      // the base URL, according to the sourcemap specification.\n      url = SDK.SourceMapManager.SourceMapManager.resolveRelativeSourceURL(script.debuggerModel.target(), url);\n    } else {\n      // Ignore inline <script>s without `//# sourceURL` annotation here.\n      if (script.isInlineScript()) {\n        return;\n      }\n\n      // Filter out embedder injected content scripts.\n      if (script.isContentScript()) {\n        const parsedURL = new Common.ParsedURL.ParsedURL(url);\n        if (!parsedURL.isValid) {\n          return;\n        }\n      }\n    }\n\n    // Remove previous UISourceCode, if any\n    const project = this.project(script);\n    const oldUISourceCode = project.uiSourceCodeForURL(url);\n    if (oldUISourceCode) {\n      const oldScriptFile = this.#uiSourceCodeToScriptFile.get(oldUISourceCode);\n      if (oldScriptFile && oldScriptFile.script) {\n        this.removeScript(oldScriptFile.script);\n      }\n    }\n\n    // Create UISourceCode.\n    const originalContentProvider = script.originalContentProvider();\n    const uiSourceCode = project.createUISourceCode(url, originalContentProvider.contentType());\n    NetworkProject.setInitialFrameAttribution(uiSourceCode, script.frameId);\n    const metadata = metadataForURL(this.debuggerModel.target(), script.frameId, url);\n\n    // Bind UISourceCode to scripts.\n    const scriptFile = new ResourceScriptFile(this, uiSourceCode, [script]);\n    this.#uiSourceCodeToScriptFile.set(uiSourceCode, scriptFile);\n    this.#scriptToUISourceCode.set(script, uiSourceCode);\n\n    const mimeType = script.isWasm() ? 'application/wasm' : 'text/javascript';\n    project.addUISourceCodeWithProvider(uiSourceCode, originalContentProvider, metadata, mimeType);\n    void this.debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  scriptFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): ResourceScriptFile|null {\n    return this.#uiSourceCodeToScriptFile.get(uiSourceCode) || null;\n  }\n\n  private removeScript(script: SDK.Script.Script): void {\n    const uiSourceCode = this.#scriptToUISourceCode.get(script);\n    if (!uiSourceCode) {\n      return;\n    }\n    const scriptFile = this.#uiSourceCodeToScriptFile.get(uiSourceCode);\n    if (scriptFile) {\n      scriptFile.dispose();\n    }\n    this.#uiSourceCodeToScriptFile.delete(uiSourceCode);\n    this.#scriptToUISourceCode.delete(script);\n    const project = uiSourceCode.project() as ContentProviderBasedProject;\n    project.removeFile(uiSourceCode.url());\n    void this.debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  private executionContextDestroyed(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    const executionContext = event.data;\n    for (const script of this.debuggerModel.scriptsForExecutionContext(executionContext)) {\n      this.removeScript(script);\n    }\n  }\n\n  private globalObjectCleared(): void {\n    for (const script of this.#scriptToUISourceCode.keys()) {\n      this.removeScript(script);\n    }\n  }\n\n  resetForTest(): void {\n    this.globalObjectCleared();\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.globalObjectCleared();\n    for (const project of this.#projects.values()) {\n      project.removeProject();\n    }\n    this.#projects.clear();\n  }\n}\n\nexport class ResourceScriptFile extends Common.ObjectWrapper.ObjectWrapper<ResourceScriptFile.EventTypes> {\n  readonly #resourceScriptMapping: ResourceScriptMapping;\n  readonly #uiSourceCodeInternal: Workspace.UISourceCode.UISourceCode;\n  scriptInternal: SDK.Script.Script|undefined;\n  #scriptSource?: string|null;\n  #isDivergingFromVMInternal?: boolean;\n  #hasDivergedFromVMInternal?: boolean;\n  #isMergingToVMInternal?: boolean;\n  constructor(\n      resourceScriptMapping: ResourceScriptMapping, uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      scripts: SDK.Script.Script[]) {\n    super();\n    console.assert(scripts.length > 0);\n\n    this.#resourceScriptMapping = resourceScriptMapping;\n    this.#uiSourceCodeInternal = uiSourceCode;\n\n    if (this.#uiSourceCodeInternal.contentType().isScript()) {\n      this.scriptInternal = scripts[scripts.length - 1];\n    }\n\n    this.#uiSourceCodeInternal.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.workingCopyChanged, this);\n    this.#uiSourceCodeInternal.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.workingCopyCommitted, this);\n  }\n\n  hasScripts(scripts: SDK.Script.Script[]): boolean {\n    return Boolean(this.scriptInternal) && this.scriptInternal === scripts[0];\n  }\n\n  private isDiverged(): boolean {\n    if (this.#uiSourceCodeInternal.isDirty()) {\n      return true;\n    }\n    if (!this.scriptInternal) {\n      return false;\n    }\n    if (typeof this.#scriptSource === 'undefined' || this.#scriptSource === null) {\n      return false;\n    }\n    const workingCopy = this.#uiSourceCodeInternal.workingCopy();\n    if (!workingCopy) {\n      return false;\n    }\n\n    // Match ignoring sourceURL.\n    if (!workingCopy.startsWith(this.#scriptSource.trimEnd())) {\n      return true;\n    }\n    const suffix = this.#uiSourceCodeInternal.workingCopy().substr(this.#scriptSource.length);\n    return Boolean(suffix.length) && !suffix.match(SDK.Script.sourceURLRegex);\n  }\n\n  private workingCopyChanged(): void {\n    void this.update();\n  }\n\n  private workingCopyCommitted(): void {\n    if (this.#uiSourceCodeInternal.project().canSetFileContent()) {\n      return;\n    }\n    if (!this.scriptInternal) {\n      return;\n    }\n    const breakpoints = BreakpointManager.instance()\n                            .breakpointLocationsForUISourceCode(this.#uiSourceCodeInternal)\n                            .map(breakpointLocation => breakpointLocation.breakpoint);\n    const source = this.#uiSourceCodeInternal.workingCopy();\n    void this.scriptInternal.editSource(source).then(({status, exceptionDetails}) => {\n      void this.scriptSourceWasSet(source, breakpoints, status, exceptionDetails);\n    });\n  }\n\n  async scriptSourceWasSet(\n      source: string, breakpoints: Breakpoint[], status: Protocol.Debugger.SetScriptSourceResponseStatus,\n      exceptionDetails?: Protocol.Runtime.ExceptionDetails): Promise<void> {\n    if (status === Protocol.Debugger.SetScriptSourceResponseStatus.Ok) {\n      this.#scriptSource = source;\n    }\n    await this.update();\n\n    if (status === Protocol.Debugger.SetScriptSourceResponseStatus.Ok) {\n      // Live edit can cause #breakpoints to be in the wrong position, or to be lost altogether.\n      // If any #breakpoints were in the pre-live edit script, they need to be re-added.\n      await Promise.all(breakpoints.map(breakpoint => breakpoint.refreshInDebugger()));\n      return;\n    }\n    if (!exceptionDetails) {\n      // TODO(crbug.com/1334484): Instead of to the console, report these errors in an \"info bar\" at the bottom\n      //                          of the text editor, similar to e.g. source mapping errors.\n      Common.Console.Console.instance().addMessage(\n          i18nString(UIStrings.liveEditFailed, {PH1: getErrorText(status)}), Common.Console.MessageLevel.Warning);\n      return;\n    }\n    const messageText = i18nString(UIStrings.liveEditCompileFailed, {PH1: exceptionDetails.text});\n    this.#uiSourceCodeInternal.addLineMessage(\n        Workspace.UISourceCode.Message.Level.Error, messageText, exceptionDetails.lineNumber,\n        exceptionDetails.columnNumber);\n\n    function getErrorText(status: Protocol.Debugger.SetScriptSourceResponseStatus): string {\n      switch (status) {\n        case Protocol.Debugger.SetScriptSourceResponseStatus.BlockedByActiveFunction:\n          return 'Functions that are on the stack (currently being executed) can not be edited';\n        case Protocol.Debugger.SetScriptSourceResponseStatus.BlockedByActiveGenerator:\n          return 'Async functions/generators that are active can not be edited';\n        case Protocol.Debugger.SetScriptSourceResponseStatus.CompileError:\n        case Protocol.Debugger.SetScriptSourceResponseStatus.Ok:\n          throw new Error('Compile errors and Ok status must not be reported on the console');\n      }\n    }\n  }\n\n  private async update(): Promise<void> {\n    if (this.isDiverged() && !this.#hasDivergedFromVMInternal) {\n      await this.divergeFromVM();\n    } else if (!this.isDiverged() && this.#hasDivergedFromVMInternal) {\n      await this.mergeToVM();\n    }\n  }\n\n  private async divergeFromVM(): Promise<void> {\n    if (this.scriptInternal) {\n      this.#isDivergingFromVMInternal = true;\n      await this.#resourceScriptMapping.debuggerWorkspaceBinding.updateLocations(this.scriptInternal);\n      this.#isDivergingFromVMInternal = undefined;\n      this.#hasDivergedFromVMInternal = true;\n      this.dispatchEventToListeners(ResourceScriptFile.Events.DidDivergeFromVM);\n    }\n  }\n\n  private async mergeToVM(): Promise<void> {\n    if (this.scriptInternal) {\n      this.#hasDivergedFromVMInternal = undefined;\n      this.#isMergingToVMInternal = true;\n      await this.#resourceScriptMapping.debuggerWorkspaceBinding.updateLocations(this.scriptInternal);\n      this.#isMergingToVMInternal = undefined;\n      this.dispatchEventToListeners(ResourceScriptFile.Events.DidMergeToVM);\n    }\n  }\n\n  hasDivergedFromVM(): boolean {\n    return Boolean(this.#hasDivergedFromVMInternal);\n  }\n\n  isDivergingFromVM(): boolean {\n    return Boolean(this.#isDivergingFromVMInternal);\n  }\n\n  isMergingToVM(): boolean {\n    return Boolean(this.#isMergingToVMInternal);\n  }\n\n  checkMapping(): void {\n    if (!this.scriptInternal || typeof this.#scriptSource !== 'undefined') {\n      this.mappingCheckedForTest();\n      return;\n    }\n    void this.scriptInternal.requestContent().then(deferredContent => {\n      this.#scriptSource = deferredContent.content;\n      void this.update().then(() => this.mappingCheckedForTest());\n    });\n  }\n\n  private mappingCheckedForTest(): void {\n  }\n\n  dispose(): void {\n    this.#uiSourceCodeInternal.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.workingCopyChanged, this);\n    this.#uiSourceCodeInternal.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.workingCopyCommitted, this);\n  }\n\n  addSourceMapURL(sourceMapURL: Platform.DevToolsPath.UrlString): void {\n    if (!this.scriptInternal) {\n      return;\n    }\n    this.scriptInternal.debuggerModel.setSourceMapURL(this.scriptInternal, sourceMapURL);\n  }\n\n  addDebugInfoURL(debugInfoURL: Platform.DevToolsPath.UrlString): void {\n    if (!this.scriptInternal) {\n      return;\n    }\n    const {pluginManager} = DebuggerWorkspaceBinding.instance();\n    if (pluginManager) {\n      pluginManager.setDebugInfoURL(this.scriptInternal, debugInfoURL);\n    }\n  }\n\n  hasSourceMapURL(): boolean {\n    return this.scriptInternal !== undefined && Boolean(this.scriptInternal.sourceMapURL);\n  }\n\n  async missingSymbolFiles(): Promise<string[]|null> {\n    if (!this.scriptInternal) {\n      return null;\n    }\n    const {pluginManager} = this.#resourceScriptMapping.debuggerWorkspaceBinding;\n    if (!pluginManager) {\n      return null;\n    }\n    const sources = await pluginManager.getSourcesForScript(this.scriptInternal);\n    return sources && 'missingSymbolFiles' in sources ? sources.missingSymbolFiles : null;\n  }\n\n  get script(): SDK.Script.Script|null {\n    return this.scriptInternal || null;\n  }\n\n  get uiSourceCode(): Workspace.UISourceCode.UISourceCode {\n    return this.#uiSourceCodeInternal;\n  }\n}\n\nexport namespace ResourceScriptFile {\n  export const enum Events {\n    DidMergeToVM = 'DidMergeToVM',\n    DidDivergeFromVM = 'DidDivergeFromVM',\n  }\n\n  export type EventTypes = {\n    [Events.DidMergeToVM]: void,\n    [Events.DidDivergeFromVM]: void,\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
