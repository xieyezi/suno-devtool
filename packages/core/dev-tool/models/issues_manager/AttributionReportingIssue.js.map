{
  "version": 3,
  "sources": ["../../../../../../front_end/models/issues_manager/AttributionReportingIssue.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport {type MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nexport const enum IssueCode {\n  PermissionPolicyDisabled = 'AttributionReportingIssue::PermissionPolicyDisabled',\n  PermissionPolicyNotDelegated = 'AttributionReportingIssue::PermissionPolicyNotDelegated',\n  UntrustworthyReportingOrigin = 'AttributionReportingIssue::UntrustworthyReportingOrigin',\n  InsecureContext = 'AttributionReportingIssue::InsecureContext',\n  InvalidRegisterSourceHeader = 'AttributionReportingIssue::InvalidRegisterSourceHeader',\n  InvalidRegisterTriggerHeader = 'AttributionReportingIssue::InvalidRegisterTriggerHeader',\n  InvalidEligibleHeader = 'AttributionReportingIssue::InvalidEligibleHeader',\n  TooManyConcurrentRequests = 'AttributionReportingIssue::TooManyConcurrentRequests',\n  SourceAndTriggerHeaders = 'AttributionReportingIssue::SourceAndTriggerHeaders',\n  SourceIgnored = 'AttributionReportingIssue::SourceIgnored',\n  TriggerIgnored = 'AttributionReportingIssue::TriggerIgnored',\n  // TODO(apaseltiner): Remove this once old issue types are removed from\n  // protocol.\n  Unknown = 'AttributionReportingIssue::Unknown',\n}\n\nfunction getIssueCode(details: Protocol.Audits.AttributionReportingIssueDetails): IssueCode {\n  switch (details.violationType) {\n    case Protocol.Audits.AttributionReportingIssueType.PermissionPolicyDisabled:\n      return IssueCode.PermissionPolicyDisabled;\n    case Protocol.Audits.AttributionReportingIssueType.PermissionPolicyNotDelegated:\n      return IssueCode.PermissionPolicyNotDelegated;\n    case Protocol.Audits.AttributionReportingIssueType.UntrustworthyReportingOrigin:\n      return IssueCode.UntrustworthyReportingOrigin;\n    case Protocol.Audits.AttributionReportingIssueType.InsecureContext:\n      return IssueCode.InsecureContext;\n    case Protocol.Audits.AttributionReportingIssueType.InvalidHeader:\n      return IssueCode.InvalidRegisterSourceHeader;\n    case Protocol.Audits.AttributionReportingIssueType.InvalidRegisterTriggerHeader:\n      return IssueCode.InvalidRegisterTriggerHeader;\n    case Protocol.Audits.AttributionReportingIssueType.InvalidEligibleHeader:\n      return IssueCode.InvalidEligibleHeader;\n    case Protocol.Audits.AttributionReportingIssueType.TooManyConcurrentRequests:\n      return IssueCode.TooManyConcurrentRequests;\n    case Protocol.Audits.AttributionReportingIssueType.SourceAndTriggerHeaders:\n      return IssueCode.SourceAndTriggerHeaders;\n    case Protocol.Audits.AttributionReportingIssueType.SourceIgnored:\n      return IssueCode.SourceIgnored;\n    case Protocol.Audits.AttributionReportingIssueType.TriggerIgnored:\n      return IssueCode.TriggerIgnored;\n    default:\n      return IssueCode.Unknown;\n  }\n}\n\nconst structuredHeaderLink = {\n  link: 'https://tools.ietf.org/id/draft-ietf-httpbis-header-structure-15.html#rfc.section.4.2.2',\n  linkTitle: 'Structured Headers RFC',\n};\n\nexport class AttributionReportingIssue extends Issue<IssueCode> {\n  issueDetails: Readonly<Protocol.Audits.AttributionReportingIssueDetails>;\n\n  constructor(\n      issueDetails: Protocol.Audits.AttributionReportingIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    super(getIssueCode(issueDetails), issuesModel);\n    this.issueDetails = issueDetails;\n  }\n\n  getCategory(): IssueCategory {\n    return IssueCategory.AttributionReporting;\n  }\n\n  getHeaderValidatorLink(name: string): {link: string, linkTitle: string} {\n    const url = new URL('https://wicg.github.io/attribution-reporting-api/validate-headers');\n    url.searchParams.set('header', name);\n\n    if (this.issueDetails.invalidParameter) {\n      url.searchParams.set('json', this.issueDetails.invalidParameter);\n    }\n\n    return {\n      link: url.toString(),\n      linkTitle: 'Header Validator',\n    };\n  }\n\n  getDescription(): MarkdownIssueDescription|null {\n    switch (this.code()) {\n      case IssueCode.PermissionPolicyDisabled:\n        return {\n          file: 'arPermissionPolicyDisabled.md',\n          links: [],\n        };\n      case IssueCode.PermissionPolicyNotDelegated:\n        return {\n          file: 'arPermissionPolicyNotDelegated.md',\n          links: [],\n        };\n      case IssueCode.UntrustworthyReportingOrigin:\n        return {\n          file: 'arUntrustworthyReportingOrigin.md',\n          links: [],\n        };\n      case IssueCode.InsecureContext:\n        return {\n          file: 'arInsecureContext.md',\n          links: [],\n        };\n      case IssueCode.InvalidRegisterSourceHeader:\n        return {\n          file: 'arInvalidRegisterSourceHeader.md',\n          links: [this.getHeaderValidatorLink('source')],\n        };\n      case IssueCode.InvalidRegisterTriggerHeader:\n        return {\n          file: 'arInvalidRegisterTriggerHeader.md',\n          links: [this.getHeaderValidatorLink('trigger')],\n        };\n      case IssueCode.InvalidEligibleHeader:\n        return {\n          file: 'arInvalidEligibleHeader.md',\n          links: [\n            this.getHeaderValidatorLink('eligible'),\n            structuredHeaderLink,\n          ],\n        };\n      case IssueCode.TooManyConcurrentRequests:\n        return {\n          file: 'arTooManyConcurrentRequests.md',\n          links: [],\n        };\n      case IssueCode.SourceAndTriggerHeaders:\n        return {\n          file: 'arSourceAndTriggerHeaders.md',\n          links: [],\n        };\n      case IssueCode.SourceIgnored:\n        return {\n          file: 'arSourceIgnored.md',\n          links: [structuredHeaderLink],\n        };\n      case IssueCode.TriggerIgnored:\n        return {\n          file: 'arTriggerIgnored.md',\n          links: [structuredHeaderLink],\n        };\n      case IssueCode.Unknown:\n        return null;\n    }\n  }\n\n  primaryKey(): string {\n    return JSON.stringify(this.issueDetails);\n  }\n\n  getKind(): IssueKind {\n    switch (this.code()) {\n      case IssueCode.PermissionPolicyNotDelegated:\n        return IssueKind.BreakingChange;\n      case IssueCode.PermissionPolicyDisabled:\n      case IssueCode.UntrustworthyReportingOrigin:\n      case IssueCode.InsecureContext:\n      case IssueCode.InvalidRegisterSourceHeader:\n      case IssueCode.InvalidRegisterTriggerHeader:\n      case IssueCode.InvalidEligibleHeader:\n      case IssueCode.TooManyConcurrentRequests:\n      case IssueCode.SourceAndTriggerHeaders:\n      case IssueCode.SourceIgnored:\n      case IssueCode.TriggerIgnored:\n      case IssueCode.Unknown:\n        return IssueKind.PageError;\n    }\n  }\n\n  static fromInspectorIssue(issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      AttributionReportingIssue[] {\n    const {attributionReportingIssueDetails} = inspectorIssue.details;\n    if (!attributionReportingIssueDetails) {\n      console.warn('Attribution Reporting issue without details received.');\n      return [];\n    }\n    return [new AttributionReportingIssue(attributionReportingIssueDetails, issuesModel)];\n  }\n}\n"],
  "mappings": "AAKA;AAEA;AAGO,WAAW,YAAX,kBAAW,eAAX;AACL,2CAA2B;AAC3B,+CAA+B;AAC/B,+CAA+B;AAC/B,kCAAkB;AAClB,8CAA8B;AAC9B,+CAA+B;AAC/B,wCAAwB;AACxB,4CAA4B;AAC5B,0CAA0B;AAC1B,gCAAgB;AAChB,iCAAiB;AAGjB,0BAAU;AAdM;AAAA;AAiBlB,sBAAsB,SAAsE;AAC1F,UAAQ,QAAQ;AAAA,SACT,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA,SACJ,SAAS,OAAO,8BAA8B;AACjD,aAAO;AAAA;AAEP,aAAO;AAAA;AAAA;AAIb,MAAM,uBAAuB;AAAA,EAC3B,MAAM;AAAA,EACN,WAAW;AAAA;AAGN,+CAAwC,MAAiB;AAAA,EAC9D;AAAA,EAEA,YACI,cAAgE,aAA0C;AAC5G,UAAM,aAAa,eAAe;AAClC,SAAK,eAAe;AAAA;AAAA,EAGtB,cAA6B;AAC3B,WAAO,cAAc;AAAA;AAAA,EAGvB,uBAAuB,MAAiD;AACtE,UAAM,MAAM,IAAI,IAAI;AACpB,QAAI,aAAa,IAAI,UAAU;AAE/B,QAAI,KAAK,aAAa,kBAAkB;AACtC,UAAI,aAAa,IAAI,QAAQ,KAAK,aAAa;AAAA;AAGjD,WAAO;AAAA,MACL,MAAM,IAAI;AAAA,MACV,WAAW;AAAA;AAAA;AAAA,EAIf,iBAAgD;AAC9C,YAAQ,KAAK;AAAA,WACN;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,WAEN;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,WAEN;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,WAEN;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,WAEN;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,CAAC,KAAK,uBAAuB;AAAA;AAAA,WAEnC;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,CAAC,KAAK,uBAAuB;AAAA;AAAA,WAEnC;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,YACL,KAAK,uBAAuB;AAAA,YAC5B;AAAA;AAAA;AAAA,WAGD;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,WAEN;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,WAEN;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,CAAC;AAAA;AAAA,WAEP;AACH,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,CAAC;AAAA;AAAA,WAEP;AACH,eAAO;AAAA;AAAA;AAAA,EAIb,aAAqB;AACnB,WAAO,KAAK,UAAU,KAAK;AAAA;AAAA,EAG7B,UAAqB;AACnB,YAAQ,KAAK;AAAA,WACN;AACH,eAAO,UAAU;AAAA,WACd;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AACH,eAAO,UAAU;AAAA;AAAA;AAAA,SAIhB,mBAAmB,aAA0C,gBACpC;AAC9B,UAAM,EAAC,qCAAoC,eAAe;AAC1D,QAAI,CAAC,kCAAkC;AACrC,cAAQ,KAAK;AACb,aAAO;AAAA;AAET,WAAO,CAAC,IAAI,0BAA0B,kCAAkC;AAAA;AAAA;",
  "names": []
}
