{
  "version": 3,
  "sources": ["../../../../../../../front_end/models/trace/helpers/Timing.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Types from '../types/types.js';\n\nexport const millisecondsToMicroseconds = (value: Types.Timing.MilliSeconds): Types.Timing.MicroSeconds =>\n    Types.Timing.MicroSeconds(value * 1000);\n\nexport const secondsToMilliseconds = (value: Types.Timing.Seconds): Types.Timing.MilliSeconds =>\n    Types.Timing.MilliSeconds(value * 1000);\n\nexport const secondsToMicroseconds = (value: Types.Timing.Seconds): Types.Timing.MicroSeconds =>\n    millisecondsToMicroseconds(secondsToMilliseconds(value));\n\nexport function detectBestTimeUnit(timeInMicroseconds: Types.Timing.MicroSeconds): Types.Timing.TimeUnit {\n  if (timeInMicroseconds < 1000) {\n    return Types.Timing.TimeUnit.MICROSECONDS;\n  }\n\n  const timeInMilliseconds = timeInMicroseconds / 1000;\n  if (timeInMilliseconds < 1000) {\n    return Types.Timing.TimeUnit.MILLISECONDS;\n  }\n\n  const timeInSeconds = timeInMilliseconds / 1000;\n  if (timeInSeconds < 60) {\n    return Types.Timing.TimeUnit.SECONDS;\n  }\n\n  return Types.Timing.TimeUnit.MINUTES;\n}\n\ninterface FormatOptions extends Intl.NumberFormatOptions {\n  format?: Types.Timing.TimeUnit;\n}\n\nconst defaultFormatOptions = {\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'narrow',\n};\n\n// Create a bunch of common formatters up front, so that we're not creating\n// them repeatedly during rendering.\nconst serialize = (value: {}): string => JSON.stringify(value);\nconst formatterFactory = (key: string|undefined): Intl.NumberFormat => {\n  return new Intl.NumberFormat(navigator.language, key ? JSON.parse(key) : {});\n};\nconst formatters = new Map<string, Intl.NumberFormat>();\n\n// Microsecond Formatter.\nPlatform.MapUtilities.getWithDefault(formatters, serialize({style: 'decimal'}), formatterFactory);\n\n// Millisecond Formatter\nPlatform.MapUtilities.getWithDefault(formatters, serialize(defaultFormatOptions), formatterFactory);\n\n// Second Formatter\nPlatform.MapUtilities.getWithDefault(\n    formatters, serialize({...defaultFormatOptions, unit: 'second'}), formatterFactory);\n\n// Minute Formatter\nPlatform.MapUtilities.getWithDefault(\n    formatters, serialize({...defaultFormatOptions, unit: 'minute'}), formatterFactory);\n\nexport function formatMicrosecondsTime(\n    timeInMicroseconds: Types.Timing.MicroSeconds, opts: FormatOptions = {}): string {\n  if (!opts.format) {\n    opts.format = detectBestTimeUnit(timeInMicroseconds);\n  }\n\n  const timeInMilliseconds = timeInMicroseconds / 1000;\n  const timeInSeconds = timeInMilliseconds / 1000;\n  const formatterOpts = {...defaultFormatOptions, ...opts};\n\n  switch (opts.format) {\n    case Types.Timing.TimeUnit.MICROSECONDS: {\n      const formatter =\n          Platform.MapUtilities.getWithDefault(formatters, serialize({style: 'decimal'}), formatterFactory);\n      return `${formatter.format(timeInMicroseconds)}\u03BCs`;\n    }\n\n    case Types.Timing.TimeUnit.MILLISECONDS: {\n      const formatter = Platform.MapUtilities.getWithDefault(formatters, serialize(formatterOpts), formatterFactory);\n      return formatter.format(timeInMilliseconds);\n    }\n\n    case Types.Timing.TimeUnit.SECONDS: {\n      const formatter = Platform.MapUtilities.getWithDefault(\n          formatters, serialize({...formatterOpts, unit: 'second'}), formatterFactory);\n      return formatter.format(timeInSeconds);\n    }\n\n    default: {\n      // Switch to mins & seconds.\n      const minuteFormatter = Platform.MapUtilities.getWithDefault(\n          formatters, serialize({...formatterOpts, unit: 'minute'}), formatterFactory);\n      const secondFormatter = Platform.MapUtilities.getWithDefault(\n          formatters, serialize({...formatterOpts, unit: 'second'}), formatterFactory);\n      const timeInMinutes = timeInSeconds / 60;\n      const [mins, divider, fraction] = minuteFormatter.formatToParts(timeInMinutes);\n\n      let seconds = 0;\n      if (divider && fraction) {\n        // Convert the fraction value (a string) to the nearest second.\n        seconds = Math.round(Number(`0.${fraction.value}`) * 60);\n      }\n      return `${minuteFormatter.format(Number(mins.value))} ${secondFormatter.format(seconds)}`;\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEO,aAAM,6BAA6B,CAAC,UACvC,MAAM,OAAO,aAAa,QAAQ;AAE/B,aAAM,wBAAwB,CAAC,UAClC,MAAM,OAAO,aAAa,QAAQ;AAE/B,aAAM,wBAAwB,CAAC,UAClC,2BAA2B,sBAAsB;AAE9C,mCAA4B,oBAAsE;AACvG,MAAI,qBAAqB,KAAM;AAC7B,WAAO,MAAM,OAAO,SAAS;AAAA;AAG/B,QAAM,qBAAqB,qBAAqB;AAChD,MAAI,qBAAqB,KAAM;AAC7B,WAAO,MAAM,OAAO,SAAS;AAAA;AAG/B,QAAM,gBAAgB,qBAAqB;AAC3C,MAAI,gBAAgB,IAAI;AACtB,WAAO,MAAM,OAAO,SAAS;AAAA;AAG/B,SAAO,MAAM,OAAO,SAAS;AAAA;AAO/B,MAAM,uBAAuB;AAAA,EAC3B,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA;AAKf,MAAM,YAAY,CAAC,UAAsB,KAAK,UAAU;AACxD,MAAM,mBAAmB,CAAC,QAA6C;AACrE,SAAO,IAAI,KAAK,aAAa,UAAU,UAAU,MAAM,KAAK,MAAM,OAAO;AAAA;AAE3E,MAAM,aAAa,oBAAI;AAGvB,SAAS,aAAa,eAAe,YAAY,UAAU,EAAC,OAAO,cAAa;AAGhF,SAAS,aAAa,eAAe,YAAY,UAAU,uBAAuB;AAGlF,SAAS,aAAa,eAClB,YAAY,UAAU,KAAI,sBAAsB,MAAM,aAAY;AAGtE,SAAS,aAAa,eAClB,YAAY,UAAU,KAAI,sBAAsB,MAAM,aAAY;AAE/D,uCACH,oBAA+C,OAAsB,IAAY;AACnF,MAAI,CAAC,KAAK,QAAQ;AAChB,SAAK,SAAS,mBAAmB;AAAA;AAGnC,QAAM,qBAAqB,qBAAqB;AAChD,QAAM,gBAAgB,qBAAqB;AAC3C,QAAM,gBAAgB,KAAI,yBAAyB;AAEnD,UAAQ,KAAK;AAAA,SACN,MAAM,OAAO,SAAS,cAAc;AACvC,YAAM,YACF,SAAS,aAAa,eAAe,YAAY,UAAU,EAAC,OAAO,cAAa;AACpF,aAAO,GAAG,UAAU,OAAO;AAAA;AAAA,SAGxB,MAAM,OAAO,SAAS,cAAc;AACvC,YAAM,YAAY,SAAS,aAAa,eAAe,YAAY,UAAU,gBAAgB;AAC7F,aAAO,UAAU,OAAO;AAAA;AAAA,SAGrB,MAAM,OAAO,SAAS,SAAS;AAClC,YAAM,YAAY,SAAS,aAAa,eACpC,YAAY,UAAU,KAAI,eAAe,MAAM,aAAY;AAC/D,aAAO,UAAU,OAAO;AAAA;AAAA,aAGjB;AAEP,YAAM,kBAAkB,SAAS,aAAa,eAC1C,YAAY,UAAU,KAAI,eAAe,MAAM,aAAY;AAC/D,YAAM,kBAAkB,SAAS,aAAa,eAC1C,YAAY,UAAU,KAAI,eAAe,MAAM,aAAY;AAC/D,YAAM,gBAAgB,gBAAgB;AACtC,YAAM,CAAC,MAAM,SAAS,YAAY,gBAAgB,cAAc;AAEhE,UAAI,UAAU;AACd,UAAI,WAAW,UAAU;AAEvB,kBAAU,KAAK,MAAM,OAAO,KAAK,SAAS,WAAW;AAAA;AAEvD,aAAO,GAAG,gBAAgB,OAAO,OAAO,KAAK,WAAW,gBAAgB,OAAO;AAAA;AAAA;AAAA;",
  "names": []
}
