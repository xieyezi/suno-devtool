{
  "version": 3,
  "sources": ["../../../../../../../front_end/models/trace/helpers/Trace.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Types from '../types/types.js';\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\n\nexport function extractOriginFromTrace(firstNavigationURL: string): string|null {\n  const url = Common.ParsedURL.ParsedURL.fromString(firstNavigationURL);\n  if (url) {\n    // We do this to save some space in the toolbar - seeing the `www` is less\n    // useful than seeing `foo.com` if it's truncated at narrow widths\n    if (url.host.startsWith('www.')) {\n      return url.host.slice(4);\n    }\n    return url.host;\n  }\n  return null;\n}\n\nexport type EventsInThread<T extends Types.TraceEvents.TraceEventData> = Map<Types.TraceEvents.ThreadID, T[]>;\n// Each thread contains events. Events indicate the thread and process IDs, which are\n// used to store the event in the correct process thread entry below.\nexport function addEventToProcessThread<T extends Types.TraceEvents.TraceEventData>(\n    event: T,\n    eventsInProcessThread: Map<Types.TraceEvents.ProcessID, EventsInThread<T>>,\n    ): void {\n  const {tid, pid} = event;\n  let eventsInThread = eventsInProcessThread.get(pid);\n  if (!eventsInThread) {\n    eventsInThread = new Map<Types.TraceEvents.ThreadID, T[]>();\n  }\n\n  let events = eventsInThread.get(tid);\n  if (!events) {\n    events = [];\n  }\n\n  events.push(event);\n  eventsInThread.set(event.tid, events);\n  eventsInProcessThread.set(event.pid, eventsInThread);\n}\n/**\n * Sorts all the events in place, in order, by their start time. If they have\n * the same start time, orders them by longest first.\n */\nexport function sortTraceEventsInPlace(events: Types.TraceEvents.TraceEventData[]): void {\n  events.sort((a, b) => {\n    const aBeginTime = a.ts;\n    const bBeginTime = b.ts;\n    if (aBeginTime < bBeginTime) {\n      return -1;\n    }\n    if (aBeginTime > bBeginTime) {\n      return 1;\n    }\n    const aDuration = a.dur ?? 0;\n    const bDuration = b.dur ?? 0;\n    const aEndTime = aBeginTime + aDuration;\n    const bEndTime = bBeginTime + bDuration;\n    if (aEndTime > bEndTime) {\n      return -1;\n    }\n    if (aEndTime < bEndTime) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\nexport function getNavigationForTraceEvent(\n    event: Types.TraceEvents.TraceEventData,\n    eventFrameId: string,\n    navigationsByFrameId: Map<string, Types.TraceEvents.TraceEventNavigationStart[]>,\n    ): Types.TraceEvents.TraceEventNavigationStart|null {\n  const navigations = navigationsByFrameId.get(eventFrameId);\n  if (!navigations || eventFrameId === '') {\n    // This event's navigation has been filtered out by the meta handler as a noise event\n    // or contains an empty frameId.\n    return null;\n  }\n\n  const eventNavigationIndex =\n      Platform.ArrayUtilities.nearestIndexFromEnd(navigations, navigation => navigation.ts <= event.ts);\n\n  if (eventNavigationIndex === null) {\n    // This event's navigation has been filtered out by the meta handler as a noise event.\n    return null;\n  }\n  return navigations[eventNavigationIndex];\n}\n"],
  "mappings": "AAKA;AACA;AAEO,uCAAgC,oBAAyC;AAC9E,QAAM,MAAM,OAAO,UAAU,UAAU,WAAW;AAClD,MAAI,KAAK;AAGP,QAAI,IAAI,KAAK,WAAW,SAAS;AAC/B,aAAO,IAAI,KAAK,MAAM;AAAA;AAExB,WAAO,IAAI;AAAA;AAEb,SAAO;AAAA;AAMF,wCACH,OACA,uBACQ;AACV,QAAM,EAAC,KAAK,QAAO;AACnB,MAAI,iBAAiB,sBAAsB,IAAI;AAC/C,MAAI,CAAC,gBAAgB;AACnB,qBAAiB,oBAAI;AAAA;AAGvB,MAAI,SAAS,eAAe,IAAI;AAChC,MAAI,CAAC,QAAQ;AACX,aAAS;AAAA;AAGX,SAAO,KAAK;AACZ,iBAAe,IAAI,MAAM,KAAK;AAC9B,wBAAsB,IAAI,MAAM,KAAK;AAAA;AAMhC,uCAAgC,QAAkD;AACvF,SAAO,KAAK,CAAC,GAAG,MAAM;AACpB,UAAM,aAAa,EAAE;AACrB,UAAM,aAAa,EAAE;AACrB,QAAI,aAAa,YAAY;AAC3B,aAAO;AAAA;AAET,QAAI,aAAa,YAAY;AAC3B,aAAO;AAAA;AAET,UAAM,YAAY,EAAE,OAAO;AAC3B,UAAM,YAAY,EAAE,OAAO;AAC3B,UAAM,WAAW,aAAa;AAC9B,UAAM,WAAW,aAAa;AAC9B,QAAI,WAAW,UAAU;AACvB,aAAO;AAAA;AAET,QAAI,WAAW,UAAU;AACvB,aAAO;AAAA;AAET,WAAO;AAAA;AAAA;AAIJ,2CACH,OACA,cACA,sBACoD;AACtD,QAAM,cAAc,qBAAqB,IAAI;AAC7C,MAAI,CAAC,eAAe,iBAAiB,IAAI;AAGvC,WAAO;AAAA;AAGT,QAAM,uBACF,SAAS,eAAe,oBAAoB,aAAa,gBAAc,WAAW,MAAM,MAAM;AAElG,MAAI,yBAAyB,MAAM;AAEjC,WAAO;AAAA;AAET,SAAO,YAAY;AAAA;",
  "names": []
}
