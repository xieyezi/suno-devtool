{
  "version": 3,
  "sources": ["../../../../../../../front_end/models/trace/handlers/UserInteractionsHandler.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {HandlerState} from './types.js';\n\n// This handler serves two purposes. It generates a list of evnets that are\n// used to show user clicks in the timeline. It is also used to gather\n// EventTimings into Interactions, which we use to show interactions and\n// highlight long interactions to the user, along with INP.\n\n// We don't need to know which process / thread these events occurred in,\n// because they are effectively global, so we just track all that we find.\nconst allEvents: Types.TraceEvents.TraceEventEventTiming[] = [];\n\nexport interface UserInteractionsData {\n  allEvents: readonly Types.TraceEvents.TraceEventEventTiming[];\n  interactionEvents: readonly InteractionEvent[];\n}\n\nexport interface InteractionEvent extends Types.TraceEvents.TraceEventEventTiming {\n  dur: Types.Timing.MicroSeconds;\n  interactionId: number;\n}\n\nconst interactionEvents: InteractionEvent[] = [];\n\nlet handlerState = HandlerState.UNINITIALIZED;\nexport function reset(): void {\n  allEvents.length = 0;\n  interactionEvents.length = 0;\n  handlerState = HandlerState.INITIALIZED;\n}\n\nexport function handleEvent(event: Types.TraceEvents.TraceEventData): void {\n  if (handlerState !== HandlerState.INITIALIZED) {\n    throw new Error('Handler is not initialized');\n  }\n\n  if (!Types.TraceEvents.isTraceEventEventTiming(event)) {\n    return;\n  }\n\n  allEvents.push(event);\n\n  if (!event.args.data) {\n    return;\n  }\n  const {duration, interactionId} = event.args.data;\n  // We exclude events for the sake of interactions if:\n  // 1. They have no duration.\n  // 2. They have no interactionId\n  // 3. They have an interactionId of 0: this indicates that it's not an\n  //    interaction that we care about because it hasn't had its own interactionId\n  //    set (0 is the default on the backend).\n  // See: https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/timing/responsiveness_metrics.cc;l=133;drc=40c209a9c365ebb9f16fb99dfe78c7fe768b9594\n\n  if (duration < 1 || interactionId === undefined || interactionId === 0) {\n    return;\n  }\n\n  const interactionEvent: InteractionEvent = {\n    ...event,\n    // We also store the interactionId on the top level for easier access\n    interactionId,\n    // EventTiming events do not have a duration, but ones we use for\n    // Interactions do, in args.data.duration. But that value is in milliseconds.\n    // To avoid confusion and accidental bad maths adding micro + milliseconds,\n    // we set `dur` to the MicroSeconds value here before returning the events.\n    dur: Helpers.Timing.millisecondsToMicroseconds(duration),\n  };\n\n  interactionEvents.push(interactionEvent);\n}\n\nexport async function finalize(): Promise<void> {\n  handlerState = HandlerState.FINALIZED;\n}\n\nexport function data(): UserInteractionsData {\n  return {\n    allEvents: [...allEvents],\n    interactionEvents: [...interactionEvents],\n  };\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AASA,MAAM,YAAuD;AAY7D,MAAM,oBAAwC;AAE9C,IAAI,eAAe,aAAa;AACzB,wBAAuB;AAC5B,YAAU,SAAS;AACnB,oBAAkB,SAAS;AAC3B,iBAAe,aAAa;AAAA;AAGvB,4BAAqB,OAA+C;AACzE,MAAI,iBAAiB,aAAa,aAAa;AAC7C,UAAM,IAAI,MAAM;AAAA;AAGlB,MAAI,CAAC,MAAM,YAAY,wBAAwB,QAAQ;AACrD;AAAA;AAGF,YAAU,KAAK;AAEf,MAAI,CAAC,MAAM,KAAK,MAAM;AACpB;AAAA;AAEF,QAAM,EAAC,UAAU,kBAAiB,MAAM,KAAK;AAS7C,MAAI,WAAW,KAAK,kBAAkB,UAAa,kBAAkB,GAAG;AACtE;AAAA;AAGF,QAAM,mBAAqC;AAAA,OACtC;AAAA,IAEH;AAAA,IAKA,KAAK,QAAQ,OAAO,2BAA2B;AAAA;AAGjD,oBAAkB,KAAK;AAAA;AAGzB,iCAAgD;AAC9C,iBAAe,aAAa;AAAA;AAGvB,uBAAsC;AAC3C,SAAO;AAAA,IACL,WAAW,CAAC,GAAG;AAAA,IACf,mBAAmB,CAAC,GAAG;AAAA;AAAA;",
  "names": []
}
