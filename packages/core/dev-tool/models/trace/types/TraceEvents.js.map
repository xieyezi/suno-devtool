{
  "version": 3,
  "sources": ["../../../../../../../front_end/models/trace/types/TraceEvents.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable no-unused-private-class-members */\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {type MicroSeconds, type MilliSeconds, type Seconds} from './Timing.js';\n\n// Trace Events.\nexport const enum TraceEventPhase {\n  // Standard\n  BEGIN = 'B',\n  END = 'E',\n  COMPLETE = 'X',\n  INSTANT = 'I',\n  COUNTER = 'C',\n\n  // Async\n  ASYNC_NESTABLE_START = 'b',\n  ASYNC_NESTABLE_INSTANT = 'n',\n  ASYNC_NESTABLE_END = 'e',\n\n  // Flow\n  FLOW_START = 's',\n  FLOW_STEP = 't',\n  FLOW_END = 'f',\n\n  // Sample\n  SAMPLE = 'P',\n\n  // Object\n  OBJECT_CREATED = 'N',\n  OBJECT_SNAPSHOT = 'O',\n  OBJECT_DESTROYED = 'D',\n\n  // Metadata\n  METADATA = 'M',\n\n  // Memory Dump\n  MEMORY_DUMP_GLOBAL = 'V',\n  MEMORY_DUMP_PROCESS = 'v',\n\n  // Mark\n  MARK = 'R',\n\n  // Clock sync\n  CLOCK_SYNC = 'c',\n}\n\nexport const enum TraceEventScope {\n  THREAD = 't',\n  PROCESS = 'p',\n  GLOBAL = 'g',\n}\n\nexport interface TraceEventData {\n  args?: TraceEventArgs;\n  cat: string;\n  name: string;\n  ph: TraceEventPhase;\n  pid: ProcessID;\n  tid: ThreadID;\n  tts?: MicroSeconds;\n  ts: MicroSeconds;\n  tdur?: MicroSeconds;\n  dur?: MicroSeconds;\n}\n\nexport interface TraceEventArgs {\n  data?: TraceEventArgsData;\n}\n\nexport interface TraceEventArgsData {\n  stackTrace?: TraceEventCallFrame[];\n}\n\nexport interface TraceEventCallFrame {\n  codeType?: string;\n  functionName: string;\n  scriptId: number;\n  columnNumber?: number;\n  lineNumber?: number;\n  url?: string;\n}\n\nexport interface TraceFrame {\n  frame: string;\n  name: string;\n  processId: ProcessID;\n  url: string;\n  parent?: string;\n}\n\n// Sample events.\n\nexport interface TraceEventSample extends TraceEventData {\n  ph: TraceEventPhase.SAMPLE;\n}\n\nexport interface TraceEventProfile extends TraceEventSample {\n  name: 'Profile';\n  id: ProfileID;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      startTime: MicroSeconds,\n    },\n  };\n}\n\nexport interface TraceEventProfileChunk extends TraceEventSample {\n  name: 'ProfileChunk';\n  id: ProfileID;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      cpuProfile?: TraceEventPartialProfile,\n      timeDeltas?: MicroSeconds[],\n    },\n  };\n}\n\nexport interface TraceEventPartialProfile {\n  nodes?: TraceEventPartialNode[];\n  samples: CallFrameID[];\n}\n\nexport interface TraceEventPartialNode {\n  callFrame: TraceEventCallFrame;\n  id: CallFrameID;\n  parent?: CallFrameID;\n}\n\n// Complete events.\n\nexport interface TraceEventComplete extends TraceEventData {\n  ph: TraceEventPhase.COMPLETE;\n  dur: MicroSeconds;\n}\n\nexport interface TraceEventDispatch extends TraceEventComplete {\n  name: 'EventDispatch';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      type: string,\n    },\n  };\n}\n\nexport interface TraceEventEventTiming extends TraceEventData {\n  ph: TraceEventPhase.ASYNC_NESTABLE_START|TraceEventPhase.ASYNC_NESTABLE_END;\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      cancelable: boolean,\n      duration: MilliSeconds,\n      processingEnd: MicroSeconds,\n      processingStart: MicroSeconds,\n      timeStamp: MicroSeconds,\n      interactionId?: number, type: string,\n    },\n  };\n}\n\nexport interface TraceEventGPUTask extends TraceEventComplete {\n  name: 'GPUTask';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      renderer_pid: ProcessID,\n      used_bytes: number,\n      /* eslint-enable @typescript-eslint/naming-convention */\n    },\n  };\n}\n\nexport interface TraceEventSyntheticNetworkRedirect {\n  url: string;\n  priority: string;\n  ts: MicroSeconds;\n  dur: MicroSeconds;\n}\n\nexport interface TraceEventSyntheticNetworkRequest extends TraceEventComplete {\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      decodedBodyLength: number,\n      dnsLookup: MicroSeconds,\n      download: MicroSeconds,\n      encodedDataLength: number,\n      finishTime: MicroSeconds,\n      frame: string,\n      fromCache: boolean,\n      fromServiceWorker: boolean,\n      host: string,\n      initialConnection: MicroSeconds,\n      isHttps: boolean,\n      mimeType: string,\n      networkDuration: MicroSeconds,\n      pathname: string,\n      search: string,\n      priority: string,\n      processingDuration: MicroSeconds,\n      protocol: string,\n      proxyNegotiation: MicroSeconds,\n      queueing: MicroSeconds,\n      receiveHeadersEnd: MicroSeconds,\n      redirects: TraceEventSyntheticNetworkRedirect[],\n      redirectionDuration: MicroSeconds,\n      renderBlocking: RenderBlocking,\n      requestId: string,\n      requestingFrameUrl: string,\n      requestSent: MicroSeconds,\n      requestTime: number,\n      sendEnd: MicroSeconds,\n      sendStart: MicroSeconds,\n      statusCode: number,\n      ssl: MicroSeconds,\n      sslStart: MicroSeconds,\n      stalled: MicroSeconds,\n      totalTime: MicroSeconds,\n      url: string,\n      waiting: MicroSeconds,\n    },\n  };\n  cat: 'loading';\n  name: 'SyntheticNetworkRequest';\n  ph: TraceEventPhase.COMPLETE;\n  dur: MicroSeconds;\n  tdur: MicroSeconds;\n  ts: MicroSeconds;\n  tts: MicroSeconds;\n  pid: ProcessID;\n  tid: ThreadID;\n}\n\n// Snapshot events.\n\nexport interface TraceEventSnapshot extends TraceEventData {\n  args: TraceEventArgs&{\n    snapshot: string,\n  };\n  name: 'Screenshot';\n  cat: 'disabled-by-default-devtools.screenshot';\n  ph: TraceEventPhase.OBJECT_SNAPSHOT;\n}\n\n// Animation events.\n\nexport interface TraceEventAnimation extends TraceEventData {\n  args: TraceEventArgs&{\n    id?: string,\n    name?: string,\n    nodeId?: number,\n    nodeName?: string,\n    state?: string,\n    compositeFailed?: number,\n    unsupportedProperties?: string[],\n  };\n  name: 'Animation';\n  id2?: {\n    local?: string,\n  };\n}\n\n// Metadata events.\n\nexport interface TraceEventMetadata extends TraceEventData {\n  ph: TraceEventPhase.METADATA;\n  args: TraceEventArgs&{\n    name?: string,\n    uptime?: string,\n  };\n}\n\nexport interface TraceEventThreadName extends TraceEventMetadata {\n  name: 'thread_name';\n  args: TraceEventArgs&{\n    name?: string,\n  };\n}\n\nexport interface TraceEventProcessName extends TraceEventMetadata {\n  name: 'process_name';\n}\n\n// Mark events.\n\nexport interface TraceEventMark extends TraceEventData {\n  ph: TraceEventPhase.MARK;\n}\n\nexport interface TraceEventNavigationStart extends TraceEventMark {\n  name: 'navigationStart';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      documentLoaderURL: string,\n      isLoadingMainFrame: boolean,\n      // isOutermostMainFrame was introduced in crrev.com/c/3625434 and exists\n      // because of Fenced Frames\n      // [github.com/WICG/fenced-frame/tree/master/explainer].\n      // Fenced frames introduce a situation where isLoadingMainFrame could be\n      // true for a navigation, but that navigation be within an embedded \"main\n      // frame\", and therefore it wouldn't be on the top level main frame.\n      // In situations where we need to distinguish that, we can rely on\n      // isOutermostMainFrame, which will only be true for navigations on the\n      // top level main frame.\n\n      // This flag is optional as it was introduced in May 2022; so users\n      // reasonably may import traces from before that date that do not have\n      // this field present.\n      isOutermostMainFrame?: boolean, navigationId: string,\n    },\n        frame: string,\n  };\n}\n\nexport interface TraceEventFirstContentfulPaint extends TraceEventMark {\n  name: 'firstContentfulPaint';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      navigationId: string,\n    },\n  };\n}\n\nexport type PageLoadEvent = TraceEventFirstContentfulPaint|TraceEventMarkDOMContent|TraceEventInteractiveTime|\n    TraceEventLargestContentfulPaintCandidate|TraceEventLayoutShift;\n\nexport interface TraceEventLargestContentfulPaintCandidate extends TraceEventMark {\n  name: 'largestContentfulPaint::Candidate';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      candidateIndex: number,\n      navigationId: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      type?: string,\n    },\n  };\n}\nexport interface TraceEventLargestImagePaintCandidate extends TraceEventMark {\n  name: 'LargestImagePaint::Candidate';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      candidateIndex: number,\n      imageUrl: string,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      DOMNodeId: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\nexport interface TraceEventLargestTextPaintCandidate extends TraceEventMark {\n  name: 'LargestTextPaint::Candidate';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      candidateIndex: number,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      DOMNodeId: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\n\nexport interface TraceEventInteractiveTime extends TraceEventMark {\n  name: 'InteractiveTime';\n  args: TraceEventArgs&{\n    args: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      total_blocking_time_ms: number,\n    },\n    frame: string,\n  };\n}\n\n// Instant events.\n\nexport interface TraceEventInstant extends TraceEventData {\n  ph: TraceEventPhase.INSTANT;\n  s: TraceEventScope;\n}\n\nexport type TraceEventRendererData = TraceEventInstant|TraceEventComplete;\n\nexport interface TraceEventTracingStartedInBrowser extends TraceEventInstant {\n  name: 'TracingStartedInBrowser';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frameTreeNodeId: number,\n      frames: TraceFrame[],\n      persistentIds: boolean,\n    },\n  };\n}\n\nexport interface TraceEventFrameCommittedInBrowser extends TraceEventInstant {\n  name: 'FrameCommittedInBrowser';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & TraceFrame,\n  };\n}\n\nexport interface TraceEventMainFrameViewport extends TraceEventInstant {\n  name: 'PaintTimingVisualizer::Viewport';\n  args: {\n    data: TraceEventArgsData&{\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      viewport_rect: number[],\n    },\n  };\n}\n\nexport interface TraceEventCommitLoad extends TraceEventInstant {\n  name: 'CommitLoad';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      name: string,\n      nodeId: number,\n      page: string,\n      parent: string,\n      url: string,\n    },\n  };\n}\n\nexport interface TraceEventMarkDOMContent extends TraceEventInstant {\n  name: 'MarkDOMContent';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      page: string,\n    },\n  };\n}\n\nexport type TraceRect = [number, number, number, number];\nexport type TraceImpactedNode = {\n  // These keys come from the trace data, so we have to use underscores.\n  /* eslint-disable @typescript-eslint/naming-convention */\n  new_rect: TraceRect,\n  node_id: Protocol.DOM.BackendNodeId,\n  old_rect: TraceRect,\n  /* eslint-enable @typescript-eslint/naming-convention */\n};\n\n// These keys come from the trace data, so we have to use underscores.\nexport interface TraceEventLayoutShift extends TraceEventInstant {\n  name: 'LayoutShift';\n  normalized?: boolean;\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      // These keys come from the trace data, so we have to use underscores.\n      /* eslint-disable @typescript-eslint/naming-convention */\n      cumulative_score: number,\n      frame_max_distance: number,\n      had_recent_input: boolean,\n      impacted_nodes: TraceImpactedNode[]|undefined,\n      is_main_frame: boolean,\n      overall_max_distance: number,\n      region_rects: TraceRect[],\n      score: number,\n      weighted_score_delta: number,\n      /* eslint-enable @typescript-eslint/naming-convention */\n    },\n  };\n}\n\nexport type Priorty = 'Low'|'High'|'VeryHigh'|'Highest';\nexport type RenderBlocking = 'blocking'|'non_blocking'|'in_body_parser_blocking'|'potentially_blocking';\nexport interface TraceEventResourceSendRequest extends TraceEventInstant {\n  name: 'ResourceSendRequest';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      frame: string,\n      requestId: string,\n      url: string,\n      priority: Priorty,\n      renderBlocking?: RenderBlocking,\n    },\n  };\n}\n\nexport interface TraceEventResourceWillSendRequest extends TraceEventInstant {\n  name: 'ResourceWillSendRequest';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      requestId: string,\n    },\n  };\n}\n\nexport interface TraceEventResourceFinish extends TraceEventInstant {\n  name: 'ResourceFinish';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      decodedBodyLength: number,\n      didFail: boolean,\n      encodedDataLength: number,\n      finishTime: Seconds,\n      requestId: string,\n    },\n  };\n}\n\nexport interface TraceEventResourceReceivedData extends TraceEventInstant {\n  name: 'ResourceReceivedData';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      encodedDataLength: number,\n      frame: string,\n      requestId: string,\n    },\n  };\n}\n\nexport interface TraceEventResourceReceiveResponse extends TraceEventInstant {\n  name: 'ResourceReceiveResponse';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      encodedDataLength: number,\n      frame: string,\n      fromCache: boolean,\n      fromServiceWorker: boolean,\n      mimeType: string,\n      requestId: string,\n      responseTime: MilliSeconds,\n      statusCode: number,\n      timing: {\n        connectEnd: MilliSeconds,\n        connectStart: MilliSeconds,\n        dnsEnd: MilliSeconds,\n        dnsStart: MilliSeconds,\n        proxyEnd: MilliSeconds,\n        proxyStart: MilliSeconds,\n        pushEnd: MilliSeconds,\n        pushStart: MilliSeconds,\n        receiveHeadersEnd: MilliSeconds,\n        requestTime: number,\n        sendEnd: MilliSeconds,\n        sendStart: MilliSeconds,\n        sslEnd: MilliSeconds,\n        sslStart: MilliSeconds,\n        workerReady: MilliSeconds,\n        workerStart: MilliSeconds,\n      },\n    },\n  };\n}\nexport interface TraceEventMarkDOMContent extends TraceEventInstant {\n  name: 'MarkDOMContent';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      page: string,\n    },\n  };\n}\n\nexport const enum LayoutInvalidationReason {\n  SIZE_CHANGED = 'Size changed',\n  ATTRIBUTE = 'Attribute',\n  ADDED_TO_LAYOUT = 'Added to layout',\n  SCROLLBAR_CHANGED = 'Scrollbar changed',\n  REMOVED_FROM_LAYOUT = 'Removed from layout',\n  STYLE_CHANGED = 'Style changed',\n  FONTS_CHANGED = 'Fonts changed',\n  UNKNOWN = 'Unknown',\n}\n\nexport interface TraceEventLayoutInvalidation extends TraceEventInstant {\n  name: 'LayoutInvalidationTracking'|'ScheduleStyleInvalidationTracking';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      reason: LayoutInvalidationReason,\n      nodeName?: string,\n    },\n  };\n}\n\nexport const enum StyleRecalcInvalidationReason {\n  ANIMATION = 'Animation',\n}\n\nexport interface TraceEventStyleRecalcInvalidation extends TraceEventInstant {\n  name: 'StyleRecalcInvalidationTracking';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      reason: StyleRecalcInvalidationReason,\n      subtree: boolean,\n      nodeName?: string,\n      extraData?: string,\n    },\n  };\n}\n\nexport interface TraceEventPrePaint extends TraceEventComplete {\n  name: 'PrePaint';\n}\n\nexport type TraceEventAsyncUserTiming = TraceEventUserTimingBegin|TraceEventUserTimingEnd;\n\nexport interface TraceEventUserTimingBegin extends TraceEventData {\n  cat: 'blink.user_timing';\n  ph: TraceEventPhase.ASYNC_NESTABLE_START;\n  id: string;\n}\n\nexport interface TraceEventUserTimingEnd extends TraceEventData {\n  cat: 'blink.user_timing';\n  ph: TraceEventPhase.ASYNC_NESTABLE_END;\n  id: string;\n}\n\n// A UserTiming block is made up of two distinct events: the begin, and the\n// end. We need both of them to be able to display the right information, so\n// the UserTimingHandler creates these synthetic events.\nexport interface TraceEventSyntheticUserTiming extends TraceEventData {\n  id: string;\n  dur: MicroSeconds;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      beginEvent: TraceEventUserTimingBegin,\n      endEvent: TraceEventUserTimingEnd,\n    },\n  };\n}\n\nclass ProfileIdTag {\n  readonly #profileIdTag: (symbol|undefined);\n}\nexport type ProfileID = string&ProfileIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ProfileID(value: string): ProfileID {\n  return value as ProfileID;\n}\n\nclass CallFrameIdTag {\n  readonly #callFrameIdTag: (symbol|undefined);\n}\nexport type CallFrameID = number&CallFrameIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function CallFrameID(value: number): CallFrameID {\n  return value as CallFrameID;\n}\n\nclass ProcessIdTag {\n  readonly #processIdTag: (symbol|undefined);\n}\nexport type ProcessID = number&ProcessIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ProcessID(value: number): ProcessID {\n  return value as ProcessID;\n}\n\nclass ThreadIdTag {\n  readonly #threadIdTag: (symbol|undefined);\n}\nexport type ThreadID = number&ThreadIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ThreadID(value: number): ThreadID {\n  return value as ThreadID;\n}\n\nexport function isTraceEventComplete(event: TraceEventData): event is TraceEventComplete {\n  return event.ph === TraceEventPhase.COMPLETE;\n}\n\nexport function isTraceEventDispatch(event: TraceEventData): event is TraceEventDispatch {\n  return event.name === 'EventDispatch';\n}\n\nexport function isTraceEventInstant(event: TraceEventData): event is TraceEventInstant {\n  return event.ph === TraceEventPhase.INSTANT;\n}\n\nexport function isTraceEventRendererEvent(event: TraceEventData): event is TraceEventRendererData {\n  return isTraceEventInstant(event) || isTraceEventComplete(event);\n}\n\nexport function isThreadName(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventThreadName {\n  return traceEventData.name === 'thread_name';\n}\n\nexport function isProcessName(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventProcessName {\n  return traceEventData.name === 'process_name';\n}\n\nexport function isTraceEventTracingStartedInBrowser(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventTracingStartedInBrowser {\n  return traceEventData.name === 'TracingStartedInBrowser';\n}\n\nexport function isTraceEventFrameCommittedInBrowser(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventFrameCommittedInBrowser {\n  return traceEventData.name === 'FrameCommittedInBrowser';\n}\n\nexport function isTraceEventCommitLoad(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventCommitLoad {\n  return traceEventData.name === 'CommitLoad';\n}\n\nexport function isTraceEventNavigationStart(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventNavigationStart {\n  return traceEventData.name === 'navigationStart';\n}\n\nexport function isTraceEventAnimation(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventAnimation {\n  return traceEventData.name === 'Animation';\n}\n\nexport function isTraceEventLayoutShift(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventLayoutShift {\n  return traceEventData.name === 'LayoutShift';\n}\n\nexport function isTraceEventLayoutInvalidation(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventLayoutInvalidation {\n  return traceEventData.name === 'LayoutInvalidationTracking' ||\n      traceEventData.name === 'ScheduleStyleInvalidationTracking';\n}\n\nexport function isTraceEventStyleRecalcInvalidation(traceEventData: TraceEventData):\n    traceEventData is TraceEventStyleRecalcInvalidation {\n  return traceEventData.name === 'StyleRecalcInvalidationTracking';\n}\n\nexport function isTraceEventFirstContentfulPaint(traceEventData: TraceEventData):\n    traceEventData is TraceEventFirstContentfulPaint {\n  return traceEventData.name === 'firstContentfulPaint';\n}\n\nexport function isTraceEventLargestContentfulPaintCandidate(traceEventData: TraceEventData):\n    traceEventData is TraceEventLargestContentfulPaintCandidate {\n  return traceEventData.name === 'largestContentfulPaint::Candidate';\n}\nexport function isTraceEventLargestImagePaintCandidate(traceEventData: TraceEventData):\n    traceEventData is TraceEventLargestImagePaintCandidate {\n  return traceEventData.name === 'LargestImagePaint::Candidate';\n}\nexport function isTraceEventLargestTextPaintCandidate(traceEventData: TraceEventData):\n    traceEventData is TraceEventLargestTextPaintCandidate {\n  return traceEventData.name === 'LargestTextPaint::Candidate';\n}\n\nexport function isTraceEventMarkDOMContent(traceEventData: TraceEventData): traceEventData is TraceEventMarkDOMContent {\n  return traceEventData.name === 'MarkDOMContent';\n}\n\nexport function isTraceEventInteractiveTime(traceEventData: TraceEventData):\n    traceEventData is TraceEventInteractiveTime {\n  return traceEventData.name === 'InteractiveTime';\n}\n\nexport function isTraceEventEventTiming(traceEventData: TraceEventData): traceEventData is TraceEventEventTiming {\n  return traceEventData.name === 'EventTiming';\n}\n\nexport function isTraceEventGPUTask(traceEventData: TraceEventData): traceEventData is TraceEventGPUTask {\n  return traceEventData.name === 'GPUTask';\n}\n\nexport function isTraceEventProfile(traceEventData: TraceEventData): traceEventData is TraceEventProfile {\n  return traceEventData.name === 'Profile';\n}\n\nexport function isTraceEventProfileChunk(traceEventData: TraceEventData): traceEventData is TraceEventProfileChunk {\n  return traceEventData.name === 'ProfileChunk';\n}\n\nexport function isTraceEventResourceSendRequest(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceSendRequest {\n  return traceEventData.name === 'ResourceSendRequest';\n}\n\nexport function isTraceEventResourceReceiveResponse(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceReceiveResponse {\n  return traceEventData.name === 'ResourceReceiveResponse';\n}\n\nexport function isTraceEventResourceFinish(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceFinish {\n  return traceEventData.name === 'ResourceFinish';\n}\n\nexport function isTraceEventResourceWillSendRequest(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceWillSendRequest {\n  return traceEventData.name === 'ResourceWillSendRequest';\n}\n\nexport function isTraceEventResourceReceivedData(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceReceivedData {\n  return traceEventData.name === 'ResourceReceivedData';\n}\n\nexport function isSyntheticNetworkRequestDetailsEvent(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventSyntheticNetworkRequest {\n  return traceEventData.name === 'SyntheticNetworkRequest';\n}\n\nexport function isTraceEventPrePaint(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventPrePaint {\n  return traceEventData.name === 'PrePaint';\n}\n\nexport function isTraceEventNavigationStartWithURL(event: TraceEventData): event is TraceEventNavigationStart {\n  return Boolean(isTraceEventNavigationStart(event) && event.args.data && event.args.data.documentLoaderURL !== '');\n}\n\nexport function isTraceEventMainFrameViewport(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventMainFrameViewport {\n  return traceEventData.name === 'PaintTimingVisualizer::Viewport';\n}\n\nexport function isSyntheticUserTimingTraceEvent(traceEventData: TraceEventData):\n    traceEventData is TraceEventSyntheticUserTiming {\n  if (traceEventData.cat !== 'blink.user_timing') {\n    return false;\n  }\n  const data = traceEventData.args?.data;\n  if (!data) {\n    return false;\n  }\n  return 'beginEvent' in data && 'endEvent' in data;\n}\n\nexport function isTraceEventUserTimingsBeginOrEnd(traceEventData: TraceEventData):\n    traceEventData is TraceEventUserTimingBegin|TraceEventUserTimingEnd {\n  const validPhases = new Set([TraceEventPhase.ASYNC_NESTABLE_START, TraceEventPhase.ASYNC_NESTABLE_END]);\n\n  return validPhases.has(traceEventData.ph) && traceEventData.cat === 'blink.user_timing';\n}\n"],
  "mappings": "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",
  "names": []
}
