{
  "version": 3,
  "sources": ["../../../../../../front_end/services/puppeteer/PuppeteerConnection.ts"],
  "sourcesContent": ["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as puppeteer from '../../third_party/puppeteer/puppeteer.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\n\nclass Transport implements puppeteer.ConnectionTransport {\n  #connection: SDK.Connections.ParallelConnectionInterface;\n  #knownIds = new Set<number>();\n\n  constructor(connection: SDK.Connections.ParallelConnectionInterface) {\n    this.#connection = connection;\n  }\n\n  send(data: string): void {\n    const message = JSON.parse(data);\n    this.#knownIds.add(message.id);\n    this.#connection.sendRawMessage(data);\n  }\n\n  close(): void {\n    void this.#connection.disconnect();\n  }\n\n  set onmessage(cb: (message: string) => void) {\n    this.#connection.setOnMessage((message: Object) => {\n      const data = (message) as {id: number, method: string, params: unknown, sessionId?: string};\n      if (data.id && !this.#knownIds.has(data.id)) {\n        return;\n      }\n      this.#knownIds.delete(data.id);\n      if (!data.sessionId) {\n        return;\n      }\n      return cb(JSON.stringify({\n        ...data,\n        // Puppeteer is expecting to use the default session, but we give it a non-default session in #connection.\n        // Replace that sessionId with undefined so Puppeteer treats it as default.\n        sessionId: data.sessionId === this.#connection.getSessionId() ? undefined : data.sessionId,\n      }));\n    });\n  }\n\n  set onclose(cb: () => void) {\n    const prev = this.#connection.getOnDisconnect();\n    this.#connection.setOnDisconnect(reason => {\n      if (prev) {\n        prev(reason);\n      }\n      if (cb) {\n        cb();\n      }\n    });\n  }\n}\n\nclass PuppeteerConnection extends puppeteer.Connection {\n  override async onMessage(message: string): Promise<void> {\n    const msgObj = JSON.parse(message) as {id: number, method: string, params: unknown, sessionId?: string};\n    if (msgObj.sessionId && !this._sessions.has(msgObj.sessionId)) {\n      return;\n    }\n    void super.onMessage(message);\n  }\n}\n\nexport class PuppeteerConnectionHelper {\n  static async connectPuppeteerToConnection(options: {\n    connection: SDK.Connections.ParallelConnectionInterface,\n    mainFrameId: string,\n    targetInfos: Protocol.Target.TargetInfo[],\n    targetFilterCallback: (targetInfo: Protocol.Target.TargetInfo) => boolean,\n    isPageTargetCallback: (targetInfo: Protocol.Target.TargetInfo) => boolean,\n  }): Promise<{\n    page: puppeteer.Page | null,\n    browser: puppeteer.Browser,\n    puppeteerConnection: puppeteer.Connection,\n  }> {\n    const {connection, mainFrameId, targetInfos, targetFilterCallback, isPageTargetCallback} = options;\n    // Pass an empty message handler because it will be overwritten by puppeteer anyways.\n    const transport = new Transport(connection);\n\n    // url is an empty string in this case parallel to:\n    // https://github.com/puppeteer/puppeteer/blob/f63a123ecef86693e6457b07437a96f108f3e3c5/src/common/BrowserConnector.ts#L72\n    const puppeteerConnection = new PuppeteerConnection('', transport);\n    const targetIdsForAutoAttachEmulation = targetInfos.filter(targetFilterCallback).map(t => t.targetId);\n\n    const browserPromise = puppeteer.Browser._create(\n        'chrome',\n        puppeteerConnection,\n        [] /* contextIds */,\n        false /* ignoreHTTPSErrors */,\n        undefined /* defaultViewport */,\n        undefined /* process */,\n        undefined /* closeCallback */,\n        targetFilterCallback,\n        isPageTargetCallback,\n    );\n\n    const [, browser] = await Promise.all([\n      Promise.all(targetIdsForAutoAttachEmulation.map(\n          targetId => puppeteerConnection._createSession({targetId}, /* emulateAutoAttach= */ true))),\n      browserPromise,\n    ]);\n\n    // TODO: replace this with browser.pages() once the Puppeteer version is rolled.\n    const pages =\n        await Promise.all(browser.browserContexts()\n                              .map(ctx => ctx.targets())\n                              .flat()\n                              .filter(target => target.type() === 'page' || target.url().startsWith('devtools://'))\n                              .map(target => target.page()));\n    const page =\n        pages.filter((p): p is puppeteer.Page => p !== null).find(p => p.mainFrame()._id === mainFrameId) || null;\n\n    return {page, browser, puppeteerConnection};\n  }\n}\n"],
  "mappings": "AAIA;AAIA,gBAAyD;AAAA;AAAA,cAE3C,oBAAI;AAAA,EAEhB,YAAY,YAAyD;AACnE,uBAAmB;AAAA;AAAA,EAGrB,KAAK,MAAoB;AACvB,UAAM,UAAU,KAAK,MAAM;AAC3B,mBAAe,IAAI,QAAQ;AAC3B,qBAAiB,eAAe;AAAA;AAAA,EAGlC,QAAc;AACZ,SAAK,iBAAiB;AAAA;AAAA,MAGpB,UAAU,IAA+B;AAC3C,qBAAiB,aAAa,CAAC,YAAoB;AACjD,YAAM,OAAQ;AACd,UAAI,KAAK,MAAM,CAAC,eAAe,IAAI,KAAK,KAAK;AAC3C;AAAA;AAEF,qBAAe,OAAO,KAAK;AAC3B,UAAI,CAAC,KAAK,WAAW;AACnB;AAAA;AAEF,aAAO,GAAG,KAAK,UAAU;AAAA,WACpB;AAAA,QAGH,WAAW,KAAK,cAAc,iBAAiB,iBAAiB,SAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAKnF,QAAQ,IAAgB;AAC1B,UAAM,OAAO,iBAAiB;AAC9B,qBAAiB,gBAAgB,YAAU;AACzC,UAAI,MAAM;AACR,aAAK;AAAA;AAEP,UAAI,IAAI;AACN;AAAA;AAAA;AAAA;AAAA;AAMR,kCAAkC,UAAU,WAAW;AAAA,QACtC,UAAU,SAAgC;AACvD,UAAM,SAAS,KAAK,MAAM;AAC1B,QAAI,OAAO,aAAa,CAAC,KAAK,UAAU,IAAI,OAAO,YAAY;AAC7D;AAAA;AAEF,SAAK,MAAM,UAAU;AAAA;AAAA;AAIlB,uCAAgC;AAAA,eACxB,6BAA6B,SAUvC;AACD,UAAM,EAAC,YAAY,aAAa,aAAa,sBAAsB,yBAAwB;AAE3F,UAAM,YAAY,IAAI,UAAU;AAIhC,UAAM,sBAAsB,IAAI,oBAAoB,IAAI;AACxD,UAAM,kCAAkC,YAAY,OAAO,sBAAsB,IAAI,OAAK,EAAE;AAE5F,UAAM,iBAAiB,UAAU,QAAQ,QACrC,UACA,qBACA,IACA,OACA,QACA,QACA,QACA,sBACA;AAGJ,UAAM,CAAC,EAAE,WAAW,MAAM,QAAQ,IAAI;AAAA,MACpC,QAAQ,IAAI,gCAAgC,IACxC,cAAY,oBAAoB,eAAe,EAAC,YAAoC;AAAA,MACxF;AAAA;AAIF,UAAM,QACF,MAAM,QAAQ,IAAI,QAAQ,kBACH,IAAI,SAAO,IAAI,WACf,OACA,OAAO,YAAU,OAAO,WAAW,UAAU,OAAO,MAAM,WAAW,gBACrE,IAAI,YAAU,OAAO;AAChD,UAAM,OACF,MAAM,OAAO,CAAC,MAA2B,MAAM,MAAM,KAAK,OAAK,EAAE,YAAY,QAAQ,gBAAgB;AAEzG,WAAO,EAAC,MAAM,SAAS;AAAA;AAAA;",
  "names": []
}
