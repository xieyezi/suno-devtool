{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/OutlineQuickOpen.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as QuickOpen from '../../ui/legacy/components/quick_open/quick_open.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {type UISourceCodeFrame} from './UISourceCodeFrame.js';\n\nimport {SourcesView} from './SourcesView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Go To Line Quick Open of the Sources panel\n   */\n  noFileSelected: 'No file selected.',\n  /**\n   *@description Text in Outline Quick Open of the Sources panel\n   */\n  openAJavascriptOrCssFileToSee: 'Open a JavaScript or CSS file to see symbols',\n  /**\n   *@description Text to show no results have been found\n   */\n  noResultsFound: 'No results found',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/OutlineQuickOpen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type OutlineItem = {\n  title: string,\n  subtitle?: string, lineNumber: number, columnNumber: number,\n};\n\nexport function outline(state: CodeMirror.EditorState): OutlineItem[] {\n  function toLineColumn(offset: number): {lineNumber: number, columnNumber: number} {\n    offset = Math.max(0, Math.min(offset, state.doc.length));\n    const line = state.doc.lineAt(offset);\n    return {lineNumber: line.number - 1, columnNumber: offset - line.from};\n  }\n\n  function subtitleFromParamList(): string {\n    while (cursor.name !== 'ParamList' && cursor.nextSibling()) {\n    }\n    let parameters = '';\n    if (cursor.name === 'ParamList' && cursor.firstChild()) {\n      do {\n        switch (cursor.name as string) {\n          case 'ArrayPattern':\n            parameters += '[\u2025]';\n            break;\n          case 'ObjectPattern':\n            parameters += '{\u2025}';\n            break;\n          case 'VariableDefinition':\n            parameters += state.sliceDoc(cursor.from, cursor.to);\n            break;\n          case 'Spread':\n            parameters += '...';\n            break;\n          case ',':\n            parameters += ', ';\n            break;\n        }\n      } while (cursor.nextSibling());\n    }\n    return `(${parameters})`;\n  }\n\n  const tree = CodeMirror.syntaxTree(state);\n  const items: OutlineItem[] = [];\n  const cursor = tree.cursor();\n  do {\n    switch (cursor.name) {\n      // css.grammar\n      case 'RuleSet': {\n        for (cursor.firstChild();; cursor.nextSibling()) {\n          const title = state.sliceDoc(cursor.from, cursor.to);\n          const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n          items.push({title, lineNumber, columnNumber});\n          cursor.nextSibling();\n          if (cursor.name as string !== ',') {\n            break;\n          }\n        }\n        break;\n      }\n      // javascript.grammar\n      case 'FunctionDeclaration':\n      case 'MethodDeclaration': {\n        let prefix = '';\n        cursor.firstChild();\n        do {\n          switch (cursor.name as string) {\n            case 'abstract':\n            case 'async':\n            case 'get':\n            case 'set':\n            case 'static':\n              prefix = `${prefix}${cursor.name} `;\n              break;\n            case 'Star':\n              prefix += '*';\n              break;\n            case 'PropertyDefinition':\n            case 'VariableDefinition': {\n              const title = prefix + state.sliceDoc(cursor.from, cursor.to);\n              const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n              const subtitle = subtitleFromParamList();\n              items.push({title, subtitle, lineNumber, columnNumber});\n              break;\n            }\n          }\n        } while (cursor.nextSibling());\n        break;\n      }\n      case 'Property': {\n        let prefix = '';\n        cursor.firstChild();\n        do {\n          if (cursor.name as string === 'async' || cursor.name as string === 'get' || cursor.name as string === 'set') {\n            prefix = `${prefix}${cursor.name} `;\n          } else if (cursor.name as string === 'Star') {\n            prefix += '*';\n          } else if (cursor.name as string === 'PropertyDefinition') {\n            let title = state.sliceDoc(cursor.from, cursor.to);\n            const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n            while (cursor.nextSibling()) {\n              if (cursor.name as string === 'ClassExpression') {\n                title = `class ${title}`;\n                items.push({title, lineNumber, columnNumber});\n                break;\n              }\n              if (cursor.name as string === 'ArrowFunction' || cursor.name as string === 'FunctionExpression') {\n                cursor.firstChild();\n              }\n              if (cursor.name as string === 'async') {\n                prefix = `async ${prefix}`;\n              } else if (cursor.name as string === 'Star') {\n                prefix += '*';\n              } else if (cursor.name as string === 'ParamList') {\n                title = prefix + title;\n                const subtitle = subtitleFromParamList();\n                items.push({title, subtitle, lineNumber, columnNumber});\n                break;\n              }\n            }\n            break;\n          } else {\n            // We don't support any other Property syntax.\n            break;\n          }\n        } while (cursor.nextSibling());\n        break;\n      }\n      case 'PropertyName':\n      case 'VariableDefinition': {\n        if (cursor.matchContext(['ClassDeclaration'])) {\n          const title = 'class ' + state.sliceDoc(cursor.from, cursor.to);\n          const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n          items.push({title, lineNumber, columnNumber});\n        } else if (\n            cursor.matchContext([\n              'AssignmentExpression',\n              'MemberExpression',\n            ]) ||\n            cursor.matchContext([\n              'VariableDeclaration',\n            ])) {\n          let title = state.sliceDoc(cursor.from, cursor.to);\n          const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n          while (cursor.name as string !== 'Equals' && cursor.next()) {\n          }\n          if (!cursor.nextSibling()) {\n            break;\n          }\n          if (cursor.name as string === 'ArrowFunction' || cursor.name as string === 'FunctionExpression') {\n            cursor.firstChild();\n            let prefix = '';\n            while (cursor.name as string !== 'ParamList') {\n              if (cursor.name as string === 'async') {\n                prefix = `async ${prefix}`;\n              } else if (cursor.name as string === 'Star') {\n                prefix += '*';\n              }\n              if (!cursor.nextSibling()) {\n                break;\n              }\n            }\n            title = prefix + title;\n            const subtitle = subtitleFromParamList();\n            items.push({title, subtitle, lineNumber, columnNumber});\n          } else if (cursor.name as string === 'ClassExpression') {\n            title = `class ${title}`;\n            items.push({title, lineNumber, columnNumber});\n          }\n        }\n        break;\n      }\n      // wast.grammar\n      case 'App': {\n        if (cursor.firstChild() && cursor.nextSibling() && state.sliceDoc(cursor.from, cursor.to) === 'module') {\n          if (cursor.nextSibling() && cursor.name as string === 'Identifier') {\n            const title = state.sliceDoc(cursor.from, cursor.to);\n            const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n            items.push({title, lineNumber, columnNumber});\n          }\n          do {\n            if (cursor.name as string === 'App' && cursor.firstChild()) {\n              if (cursor.nextSibling() && state.sliceDoc(cursor.from, cursor.to) === 'func' && cursor.nextSibling() &&\n                  cursor.name as string === 'Identifier') {\n                const title = state.sliceDoc(cursor.from, cursor.to);\n                const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n                const params = [];\n                while (cursor.nextSibling()) {\n                  if (cursor.name as string === 'App' && cursor.firstChild()) {\n                    if (cursor.nextSibling() && state.sliceDoc(cursor.from, cursor.to) === 'param') {\n                      if (cursor.nextSibling() && cursor.name as string === 'Identifier') {\n                        params.push(state.sliceDoc(cursor.from, cursor.to));\n                      } else {\n                        params.push(`$${params.length}`);\n                      }\n                    }\n                    cursor.parent();\n                  }\n                }\n                const subtitle = `(${params.join(', ')})`;\n                items.push({title, subtitle, lineNumber, columnNumber});\n              }\n              cursor.parent();\n            }\n          } while (cursor.nextSibling());\n        }\n        break;\n      }\n      // cpp.grammar\n      case 'FieldIdentifier':\n      case 'Identifier': {\n        if (cursor.matchContext(['FunctionDeclarator'])) {\n          const title = state.sliceDoc(cursor.from, cursor.to);\n          const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n          items.push({title, lineNumber, columnNumber});\n        }\n        break;\n      }\n      case 'TypeIdentifier': {\n        if (cursor.matchContext(['ClassSpecifier'])) {\n          const title = `class ${state.sliceDoc(cursor.from, cursor.to)}`;\n          const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n          items.push({title, lineNumber, columnNumber});\n        } else if (cursor.matchContext(['StructSpecifier'])) {\n          const title = `struct ${state.sliceDoc(cursor.from, cursor.to)}`;\n          const {lineNumber, columnNumber} = toLineColumn(cursor.from);\n          items.push({title, lineNumber, columnNumber});\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  } while (cursor.next());\n  return items;\n}\n\nexport class OutlineQuickOpen extends QuickOpen.FilteredListWidget.Provider {\n  private items: OutlineItem[] = [];\n  private active: boolean = false;\n\n  attach(): void {\n    const sourceFrame = this.currentSourceFrame();\n    if (sourceFrame) {\n      this.active = true;\n      this.items = outline(sourceFrame.textEditor.state).map(({title, subtitle, lineNumber, columnNumber}) => {\n        ({lineNumber, columnNumber} = sourceFrame.editorLocationToUILocation(lineNumber, columnNumber));\n        return {title, subtitle, lineNumber, columnNumber};\n      });\n    } else {\n      this.active = false;\n      this.items = [];\n    }\n  }\n\n  detach(): void {\n    this.active = false;\n    this.items = [];\n  }\n\n  itemCount(): number {\n    return this.items.length;\n  }\n\n  itemKeyAt(itemIndex: number): string {\n    const item = this.items[itemIndex];\n    return item.title + (item.subtitle ? item.subtitle : '');\n  }\n\n  itemScoreAt(itemIndex: number, query: string): number {\n    const item = this.items[itemIndex];\n    const methodName = query.split('(')[0];\n    if (methodName.toLowerCase() === item.title.toLowerCase()) {\n      return 1 / (1 + item.lineNumber);\n    }\n    return -item.lineNumber - 1;\n  }\n\n  renderItem(itemIndex: number, query: string, titleElement: Element, _subtitleElement: Element): void {\n    const item = this.items[itemIndex];\n    titleElement.textContent = item.title + (item.subtitle ? item.subtitle : '');\n    QuickOpen.FilteredListWidget.FilteredListWidget.highlightRanges(titleElement, query);\n\n    const sourceFrame = this.currentSourceFrame();\n    if (!sourceFrame) {\n      return;\n    }\n\n    const tagElement = (titleElement.parentElement?.parentElement?.createChild('span', 'tag') as HTMLElement);\n    if (!tagElement) {\n      return;\n    }\n\n    const disassembly = sourceFrame.wasmDisassembly;\n    if (disassembly) {\n      const lastBytecodeOffset = disassembly.lineNumberToBytecodeOffset(disassembly.lineNumbers - 1);\n      const bytecodeOffsetDigits = lastBytecodeOffset.toString(16).length;\n      tagElement.textContent = `:0x${item.columnNumber.toString(16).padStart(bytecodeOffsetDigits, '0')}`;\n    } else {\n      tagElement.textContent = `:${item.lineNumber + 1}`;\n    }\n  }\n\n  selectItem(itemIndex: number|null, _promptValue: string): void {\n    if (itemIndex === null) {\n      return;\n    }\n    const sourceFrame = this.currentSourceFrame();\n    if (!sourceFrame) {\n      return;\n    }\n    const item = this.items[itemIndex];\n    sourceFrame.revealPosition({lineNumber: item.lineNumber, columnNumber: item.columnNumber}, true);\n  }\n\n  private currentSourceFrame(): UISourceCodeFrame|null {\n    const sourcesView = UI.Context.Context.instance().flavor(SourcesView);\n    return sourcesView && sourcesView.currentSourceFrame();\n  }\n\n  notFoundText(): string {\n    if (!this.currentSourceFrame()) {\n      return i18nString(UIStrings.noFileSelected);\n    }\n    if (!this.active) {\n      return i18nString(UIStrings.openAJavascriptOrCssFileToSee);\n    }\n    return i18nString(UIStrings.noResultsFound);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
