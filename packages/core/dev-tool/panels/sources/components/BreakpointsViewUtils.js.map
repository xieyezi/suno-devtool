{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/sources/components/BreakpointsViewUtils.ts"],
  "sourcesContent": ["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\n\nconst SUMMARY_ELEMENT_SELECTOR = 'summary';\n\nconst domNodeIsTree = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('role') === 'tree';\n};\n\nconst domNodeIsBreakpointItemNode = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('role') === 'treeitem';\n};\n\nconst domNodeIsPauseOnExceptionsNode = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('data-first-pause') !== null || domNode.getAttribute('data-last-pause') !== null;\n};\n\nconst domNodeIsSummaryNode = (domNode: HTMLElement): boolean => {\n  return !domNodeIsBreakpointItemNode(domNode);\n};\n\nconst groupIsExpanded = (detailsElement: HTMLDetailsElement): boolean => {\n  return detailsElement.getAttribute('open') !== null;\n};\n\nconst getFirstBreakpointItemInGroup = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLElement>('[data-first-breakpoint]');\n};\n\nconst getLastBreakpointItemInGroup = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLDivElement>('[data-last-breakpoint]');\n};\n\nconst getNextGroupsSummaryNode = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  const nextDetailsElement = getNextDetailsElement(detailsElement);\n  if (nextDetailsElement && nextDetailsElement instanceof HTMLDetailsElement) {\n    return nextDetailsElement?.querySelector<HTMLElement>('summary');\n  }\n  return null;\n};\n\nconst getCurrentSummaryNode = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLElement>(SUMMARY_ELEMENT_SELECTOR);\n};\n\nconst getNextDetailsElement = (detailsElement: HTMLDetailsElement): HTMLDetailsElement|null => {\n  const nextDetailsElement = detailsElement.nextElementSibling;\n  if (nextDetailsElement && nextDetailsElement instanceof HTMLDetailsElement) {\n    return nextDetailsElement;\n  }\n  return null;\n};\n\nconst getPreviousDetailsElement = (detailsElement: HTMLDetailsElement): HTMLDetailsElement|null => {\n  const previousDetailsElement = detailsElement.previousElementSibling;\n  if (previousDetailsElement && previousDetailsElement instanceof HTMLDetailsElement) {\n    return previousDetailsElement;\n  }\n  return null;\n};\n\nfunction findNextNodeForPauseOnExceptions(target: HTMLElement, key: Platform.KeyboardUtilities.ArrowKey): HTMLElement|\n    null {\n  // Handle keyboard navigation on one of the pause on exceptions checkboxes.\n  console.assert(domNodeIsPauseOnExceptionsNode(target));\n  let nextNode: HTMLElement|null = null;\n  switch (key) {\n    case Platform.KeyboardUtilities.ArrowKey.UP: {\n      const previousElementSibling = target.previousElementSibling;\n      if (previousElementSibling instanceof HTMLElement) {\n        nextNode = previousElementSibling;\n        console.assert(domNodeIsPauseOnExceptionsNode(nextNode));\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.DOWN: {\n      const nextElementSibling = target.nextElementSibling;\n      if (nextElementSibling instanceof HTMLElement) {\n        if (domNodeIsTree(nextElementSibling)) {\n          const detailsElement = nextElementSibling.querySelector<HTMLDetailsElement>('[data-first-group]');\n          if (detailsElement) {\n            nextNode = getCurrentSummaryNode(detailsElement);\n          }\n        } else {\n          nextNode = nextElementSibling;\n          console.assert(domNodeIsPauseOnExceptionsNode(nextNode));\n        }\n      }\n      break;\n    }\n    default:\n      break;\n  }\n\n  return nextNode;\n}\n\nexport async function findNextNodeForKeyboardNavigation(\n    target: HTMLElement, key: Platform.KeyboardUtilities.ArrowKey,\n    setGroupExpandedStateCallback: (detailsElement: HTMLDetailsElement, expanded: boolean) =>\n        Promise<unknown>): Promise<HTMLElement|null> {\n  if (domNodeIsPauseOnExceptionsNode(target)) {\n    return findNextNodeForPauseOnExceptions(target, key);\n  }\n\n  // Handle keyboard navigation in the breakpoint tree.\n  const detailsElement = target.parentElement;\n  if (!detailsElement || !(detailsElement instanceof HTMLDetailsElement)) {\n    throw new Error('The selected nodes should be direct children of an HTMLDetails element.');\n  }\n\n  let nextNode: HTMLElement|null = null;\n  switch (key) {\n    case Platform.KeyboardUtilities.ArrowKey.LEFT: {\n      if (domNodeIsSummaryNode(target)) {\n        // On a summary node, collapse if group is expanded.\n        if (groupIsExpanded(detailsElement)) {\n          await setGroupExpandedStateCallback(detailsElement, false);\n        }\n      } else {\n        // On a breakpoint item node, navigate up to the summary node.\n        return getCurrentSummaryNode(detailsElement);\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.RIGHT: {\n      if (domNodeIsSummaryNode(target)) {\n        // On a summary node, expand if group is collapsed, and otherwise navigate\n        // to the first breakpoint item in this group.\n        if (groupIsExpanded(detailsElement)) {\n          return getFirstBreakpointItemInGroup(detailsElement);\n        }\n        await setGroupExpandedStateCallback(detailsElement, true);\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.DOWN: {\n      if (domNodeIsSummaryNode(target)) {\n        if (groupIsExpanded(detailsElement)) {\n          // If the current node is a summary node of an expanded group, navigating down\n          // should lead to the first breakpoint item within the group.\n          nextNode = getFirstBreakpointItemInGroup(detailsElement);\n        } else {\n          // If the current node is a summary node of a collapsed group, go to the next\n          // group's summary node if existent.\n          nextNode = getNextGroupsSummaryNode(detailsElement);\n        }\n      } else {\n        // If the current node is a breakpoint item, try to get the next\n        // breakpoint item if available, otherwise the next group's summary\n        // node.\n        const nextSibling = target.nextElementSibling;\n        if (nextSibling && nextSibling instanceof HTMLDivElement) {\n          nextNode = nextSibling;\n        } else {\n          nextNode = getNextGroupsSummaryNode(detailsElement);\n        }\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.UP: {\n      // If the current node is a summary node, navigating upwards will either\n      // navigate to the last breakpoint item of the previous group (if expanded),\n      // and otherwise navigate to the previous group's summary node.\n      if (domNodeIsSummaryNode(target)) {\n        const previousDetailsElement = getPreviousDetailsElement(detailsElement);\n        if (previousDetailsElement) {\n          if (groupIsExpanded(previousDetailsElement)) {\n            nextNode = getLastBreakpointItemInGroup(previousDetailsElement);\n          } else {\n            nextNode = getCurrentSummaryNode(previousDetailsElement);\n          }\n        } else {\n          const pauseOnExceptions = detailsElement.parentElement?.previousElementSibling;\n          if (pauseOnExceptions instanceof HTMLElement) {\n            nextNode = pauseOnExceptions;\n          }\n        }\n      } else {\n        // If the current node is a breakpoint item, going up should get\n        // the previous sibling, which can be both a summary node or a\n        // a breakpoint item.\n        const previousSibling = target.previousElementSibling;\n        if (previousSibling instanceof HTMLElement) {\n          nextNode = previousSibling;\n        }\n      }\n      break;\n    }\n  }\n  return nextNode;\n}\n"],
  "mappings": "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",
  "names": []
}
