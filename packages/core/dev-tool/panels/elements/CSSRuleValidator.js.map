{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/CSSRuleValidator.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport {\n  buildPropertyDefinitionText,\n  buildPropertyName,\n  buildPropertyValue,\n  isFlexContainer,\n  isGridContainer,\n  isInlineElement,\n  isMulticolContainer,\n  isPossiblyReplacedElement,\n} from './CSSRuleValidatorHelper.js';\n\nconst UIStrings = {\n  /**\n   *@description The message shown in the Style pane when the user hovers over a property that has no effect due to some other property.\n   *@example {flex-wrap: nowrap} REASON_PROPERTY_DECLARATION_CODE\n   *@example {align-content} AFFECTED_PROPERTY_DECLARATION_CODE\n   */\n  ruleViolatedBySameElementRuleReason:\n      'The {REASON_PROPERTY_DECLARATION_CODE} property prevents {AFFECTED_PROPERTY_DECLARATION_CODE} from having an effect.',\n  /**\n   *@description The message shown in the Style pane when the user hovers over a property declaration that has no effect due to some other property.\n   *@example {flex-wrap} PROPERTY_NAME\n    @example {nowrap} PROPERTY_VALUE\n   */\n  ruleViolatedBySameElementRuleFix: 'Try setting {PROPERTY_NAME} to something other than {PROPERTY_VALUE}.',\n  /**\n   *@description The message shown in the Style pane when the user hovers over a property declaration that has no effect due to the current property value.\n   *@example {display: block} EXISTING_PROPERTY_DECLARATION\n   *@example {display: flex} TARGET_PROPERTY_DECLARATION\n   */\n  ruleViolatedBySameElementRuleChangeSuggestion:\n      'Try setting the {EXISTING_PROPERTY_DECLARATION} property to {TARGET_PROPERTY_DECLARATION}.',\n  /**\n   *@description The message shown in the Style pane when the user hovers over a property declaration that has no effect due to properties of the parent element.\n   *@example {display: block} REASON_PROPERTY_DECLARATION_CODE\n   *@example {flex} AFFECTED_PROPERTY_DECLARATION_CODE\n   */\n  ruleViolatedByParentElementRuleReason:\n      'The {REASON_PROPERTY_DECLARATION_CODE} property on the parent element prevents {AFFECTED_PROPERTY_DECLARATION_CODE} from having an effect.',\n  /**\n   *@description The message shown in the Style pane when the user hovers over a property declaration that has no effect due to the properties of the parent element.\n   *@example {display: block} EXISTING_PARENT_ELEMENT_RULE\n   *@example {display: flex} TARGET_PARENT_ELEMENT_RULE\n   */\n  ruleViolatedByParentElementRuleFix:\n      'Try setting the {EXISTING_PARENT_ELEMENT_RULE} property on the parent to {TARGET_PARENT_ELEMENT_RULE}.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/CSSRuleValidator.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const enum HintType {\n  INACTIVE_PROPERTY = 'ruleValidation',\n  DEPRECATED_PROPERTY = 'deprecatedProperty',\n}\n\nexport class Hint {\n  readonly #hintMessage: string;\n  readonly #possibleFixMessage: string|null;\n  readonly #learnMoreLink: string|undefined;\n\n  constructor(hintMessage: string, possibleFixMessage: string|null, learnMoreLink?: string) {\n    this.#hintMessage = hintMessage;\n    this.#possibleFixMessage = possibleFixMessage;\n    this.#learnMoreLink = learnMoreLink;\n  }\n\n  getMessage(): string {\n    return this.#hintMessage;\n  }\n\n  getPossibleFixMessage(): string|null {\n    return this.#possibleFixMessage;\n  }\n\n  getLearnMoreLink(): string|undefined {\n    return this.#learnMoreLink;\n  }\n}\n\nexport abstract class CSSRuleValidator {\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.Other;\n  }\n\n  readonly #affectedProperties: string[];\n\n  constructor(affectedProperties: string[]) {\n    this.#affectedProperties = affectedProperties;\n  }\n\n  getApplicableProperties(): string[] {\n    return this.#affectedProperties;\n  }\n\n  abstract getHint(\n      propertyName: string, computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>,\n      nodeName?: string): Hint|undefined;\n}\n\nexport class AlignContentValidator extends CSSRuleValidator {\n  constructor() {\n    super(['align-content']);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.AlignContent;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>): boolean {\n    if (computedStyles === null || computedStyles === undefined) {\n      return true;\n    }\n    if (!isFlexContainer(computedStyles)) {\n      return true;\n    }\n    return computedStyles.get('flex-wrap') !== 'nowrap';\n  }\n\n  getHint(_propertyName: string, computedStyles?: Map<string, string>): Hint|undefined {\n    if (this.#isRuleValid(computedStyles)) {\n      return;\n    }\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('flex-wrap', 'nowrap');\n    const affectedPropertyDeclarationCode = buildPropertyName('align-content');\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n          PROPERTY_NAME: buildPropertyName('flex-wrap'),\n          PROPERTY_VALUE: buildPropertyValue('nowrap'),\n        }),\n    );\n  }\n}\n\nexport class FlexItemValidator extends CSSRuleValidator {\n  constructor() {\n    super(['flex', 'flex-basis', 'flex-grow', 'flex-shrink']);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.FlexItem;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): boolean {\n    if (parentComputedStyles === null) {\n      return true;\n    }\n    return isFlexContainer(parentComputedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): Hint\n      |undefined {\n    if (this.#isRuleValid(computedStyles, parentComputedStyles)) {\n      return;\n    }\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', parentComputedStyles?.get('display'));\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n    const targetParentPropertyDeclaration = buildPropertyDefinitionText('display', 'flex');\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedByParentElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedByParentElementRuleFix, {\n          'EXISTING_PARENT_ELEMENT_RULE': reasonPropertyDeclaration,\n          'TARGET_PARENT_ELEMENT_RULE': targetParentPropertyDeclaration,\n        }),\n    );\n  }\n}\n\nexport class FlexContainerValidator extends CSSRuleValidator {\n  constructor() {\n    super(['flex-direction', 'flex-flow', 'flex-wrap']);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.FlexContainer;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>): boolean {\n    if (computedStyles === null) {\n      return true;\n    }\n    return isFlexContainer(computedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>): Hint|undefined {\n    if (this.#isRuleValid(computedStyles)) {\n      return;\n    }\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', computedStyles?.get('display'));\n    const targetRuleCode = buildPropertyDefinitionText('display', 'flex');\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleChangeSuggestion, {\n          'EXISTING_PROPERTY_DECLARATION': reasonPropertyDeclaration,\n          'TARGET_PROPERTY_DECLARATION': targetRuleCode,\n        }),\n    );\n  }\n}\n\nexport class GridContainerValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'grid',\n      'grid-auto-columns',\n      'grid-auto-flow',\n      'grid-auto-rows',\n      'grid-template',\n      'grid-template-areas',\n      'grid-template-columns',\n      'grid-template-rows',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.GridContainer;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>): boolean {\n    return isGridContainer(computedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>): Hint|undefined {\n    if (this.#isRuleValid(computedStyles)) {\n      return;\n    }\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', computedStyles?.get('display'));\n    const targetRuleCode = buildPropertyDefinitionText('display', 'grid');\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleChangeSuggestion, {\n          'EXISTING_PROPERTY_DECLARATION': reasonPropertyDeclaration,\n          'TARGET_PROPERTY_DECLARATION': targetRuleCode,\n        }),\n    );\n  }\n}\n\nexport class GridItemValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'grid-area',\n      'grid-column',\n      'grid-row',\n      'grid-row-end',\n      'grid-row-start',\n      // At the time of writing (November 2022), `justify-self` is only in effect in grid layout.\n      // There are no other browsers that support `justify-self` in other layouts.\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_In_Block_Abspos_Tables\n      // TODO: move `justify-self` to other validator or change pop-over text if Chrome supports CSS Align in other layouts.\n      'justify-self',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.GridItem;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): boolean {\n    if (!parentComputedStyles) {\n      return true;\n    }\n    return isGridContainer(parentComputedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): Hint\n      |undefined {\n    if (this.#isRuleValid(computedStyles, parentComputedStyles)) {\n      return;\n    }\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', parentComputedStyles?.get('display'));\n    const targetParentPropertyDeclaration = buildPropertyDefinitionText('display', 'grid');\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedByParentElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedByParentElementRuleFix, {\n          'EXISTING_PARENT_ELEMENT_RULE': reasonPropertyDeclaration,\n          'TARGET_PARENT_ELEMENT_RULE': targetParentPropertyDeclaration,\n        }),\n    );\n  }\n}\n\nexport class FlexOrGridItemValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'place-self',\n      'align-self',\n      'order',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.FlexOrGridItem;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): boolean {\n    if (!parentComputedStyles) {\n      return true;\n    }\n    return isFlexContainer(parentComputedStyles) || isGridContainer(parentComputedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): Hint\n      |undefined {\n    if (this.#isRuleValid(computedStyles, parentComputedStyles)) {\n      return;\n    }\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', parentComputedStyles?.get('display'));\n    const targetParentPropertyDeclaration =\n        `${buildPropertyDefinitionText('display', 'flex')} or ${buildPropertyDefinitionText('display', 'grid')}`;\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedByParentElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedByParentElementRuleFix, {\n          'EXISTING_PARENT_ELEMENT_RULE': reasonPropertyDeclaration,\n          'TARGET_PARENT_ELEMENT_RULE': targetParentPropertyDeclaration,\n        }),\n    );\n  }\n}\n\nexport class FlexGridValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'justify-content',\n      'align-content',\n      'place-content',  // Shorthand\t<'align-content'> <'justify-content'>?\n      'align-items',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.FlexGrid;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>): boolean {\n    if (computedStyles === null) {\n      return true;\n    }\n    return isFlexContainer(computedStyles) || isGridContainer(computedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>): Hint|undefined {\n    if (this.#isRuleValid(computedStyles)) {\n      return;\n    }\n\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', computedStyles?.get('display'));\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n          PROPERTY_NAME: buildPropertyName('display'),\n          PROPERTY_VALUE: buildPropertyValue(computedStyles?.get('display') as string),\n        }),\n    );\n  }\n}\n\nexport class MulticolFlexGridValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'gap',\n      'column-gap',\n      'row-gap',\n      'grid-gap',\n      'grid-column-gap',\n      'grid-column-end',\n      'grid-row-gap',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.MulticolFlexGrid;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>): boolean {\n    if (computedStyles === null) {\n      return true;\n    }\n    return isMulticolContainer(computedStyles) || isFlexContainer(computedStyles) || isGridContainer(computedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>): Hint|undefined {\n    if (this.#isRuleValid(computedStyles)) {\n      return;\n    }\n\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', computedStyles?.get('display'));\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n          PROPERTY_NAME: buildPropertyName('display'),\n          PROPERTY_VALUE: buildPropertyValue(computedStyles?.get('display') as string),\n        }),\n    );\n  }\n}\n\nexport class PaddingValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'padding',\n      'padding-top',\n      'padding-right',\n      'padding-bottom',\n      'padding-left',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.Padding;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>): boolean {\n    const display = computedStyles?.get('display');\n    if (!display) {\n      return true;\n    }\n    return !['table-row-group', 'table-header-group', 'table-footer-group', 'table-row', 'table-column-group',\n             'table-column']\n                .includes(display);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>): Hint|undefined {\n    if (this.#isRuleValid(computedStyles)) {\n      return;\n    }\n\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', computedStyles?.get('display'));\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n          PROPERTY_NAME: buildPropertyName('display'),\n          PROPERTY_VALUE: buildPropertyValue(computedStyles?.get('display') as string),\n        }),\n    );\n  }\n}\n\nexport class PositionValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'top',\n      'right',\n      'bottom',\n      'left',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.Position;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>): boolean {\n    const position = computedStyles?.get('position');\n    if (position === null || position === undefined) {\n      return true;\n    }\n    return position !== 'static';\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>): Hint|undefined {\n    if (this.#isRuleValid(computedStyles)) {\n      return;\n    }\n\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('position', computedStyles?.get('position'));\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n          PROPERTY_NAME: buildPropertyName('position'),\n          PROPERTY_VALUE: buildPropertyValue(computedStyles?.get('position') as string),\n        }),\n    );\n  }\n}\n\nexport class ZIndexValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'z-index',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.ZIndex;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): boolean {\n    const position = computedStyles?.get('position');\n    if (!position) {\n      return true;\n    }\n    return ['absolute', 'relative', 'fixed', 'sticky'].includes(position) || isFlexContainer(parentComputedStyles);\n  }\n\n  getHint(propertyName: string, computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>): Hint\n      |undefined {\n    if (this.#isRuleValid(computedStyles, parentComputedStyles)) {\n      return;\n    }\n\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('position', computedStyles?.get('position'));\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n          PROPERTY_NAME: buildPropertyName('position'),\n          PROPERTY_VALUE: buildPropertyValue(computedStyles?.get('position') as string),\n        }),\n    );\n  }\n}\n\n/**\n * Validates if CSS width/height are having an effect on an element.\n * See \"Applies to\" in https://www.w3.org/TR/css-sizing-3/#propdef-width.\n * See \"Applies to\" in https://www.w3.org/TR/css-sizing-3/#propdef-height.\n */\nexport class SizingValidator extends CSSRuleValidator {\n  constructor() {\n    super([\n      'width',\n      'height',\n    ]);\n  }\n\n  getMetricType(): Host.UserMetrics.CSSHintType {\n    return Host.UserMetrics.CSSHintType.Sizing;\n  }\n\n  #isRuleValid(computedStyles?: Map<string, string>, nodeName?: string): boolean {\n    if (!computedStyles || !nodeName) {\n      return true;\n    }\n    if (!isInlineElement(computedStyles)) {\n      return true;\n    }\n    // See https://html.spec.whatwg.org/multipage/rendering.html#replaced-elements.\n    return isPossiblyReplacedElement(nodeName);\n  }\n\n  getHint(\n      propertyName: string, computedStyles?: Map<string, string>, parentComputedStyles?: Map<string, string>,\n      nodeName?: string): Hint|undefined {\n    if (this.#isRuleValid(computedStyles, nodeName)) {\n      return;\n    }\n\n    const reasonPropertyDeclaration = buildPropertyDefinitionText('display', computedStyles?.get('display'));\n    const affectedPropertyDeclarationCode = buildPropertyName(propertyName);\n\n    return new Hint(\n        i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n          'REASON_PROPERTY_DECLARATION_CODE': reasonPropertyDeclaration,\n          'AFFECTED_PROPERTY_DECLARATION_CODE': affectedPropertyDeclarationCode,\n        }),\n        i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n          PROPERTY_NAME: buildPropertyName('display'),\n          PROPERTY_VALUE: buildPropertyValue(computedStyles?.get('display') as string),\n        }),\n    );\n  }\n}\n\nconst CSS_RULE_VALIDATORS = [\n  AlignContentValidator,\n  FlexContainerValidator,\n  FlexGridValidator,\n  FlexItemValidator,\n  GridContainerValidator,\n  GridItemValidator,\n  FlexOrGridItemValidator,\n  SizingValidator,\n  MulticolFlexGridValidator,\n  PaddingValidator,\n  PositionValidator,\n  ZIndexValidator,\n];\n\nconst setupCSSRulesValidators = (): Map<string, CSSRuleValidator[]> => {\n  const validatorsMap = new Map<string, CSSRuleValidator[]>();\n  for (const validatorClass of CSS_RULE_VALIDATORS) {\n    const validator = new validatorClass();\n    const affectedProperties = validator.getApplicableProperties();\n\n    for (const affectedProperty of affectedProperties) {\n      let propertyValidators = validatorsMap.get(affectedProperty);\n      if (propertyValidators === undefined) {\n        propertyValidators = [];\n      }\n      propertyValidators.push(validator);\n\n      validatorsMap.set(affectedProperty, propertyValidators);\n    }\n  }\n  return validatorsMap;\n};\n\nexport const cssRuleValidatorsMap: Map<string, CSSRuleValidator[]> = setupCSSRulesValidators();\n"],
  "mappings": "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",
  "names": []
}
