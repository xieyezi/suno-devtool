{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/TopLayerContainer.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as ElementsComponents from './components/components.js';\nimport * as ElementsTreeOutline from './ElementsTreeOutline.js';\n\nimport {type ElementsTreeElement} from './ElementsTreeElement.js';\n\nconst UIStrings = {\n  /**\n   *@description Link text content in Elements Tree Outline of the Elements panel. When clicked, it \"reveals\" the true location of an element.\n   */\n  reveal: 'reveal',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/TopLayerContainer.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class TopLayerContainer extends UI.TreeOutline.TreeElement {\n  tree: ElementsTreeOutline.ElementsTreeOutline;\n  domModel: SDK.DOMModel.DOMModel;\n  currentTopLayerDOMNodes: Set<SDK.DOMModel.DOMNode> = new Set();\n  topLayerUpdateThrottler: Common.Throttler.Throttler;\n\n  constructor(tree: ElementsTreeOutline.ElementsTreeOutline, domModel: SDK.DOMModel.DOMModel) {\n    super('#top-layer');\n    this.tree = tree;\n    this.domModel = domModel;\n    this.topLayerUpdateThrottler = new Common.Throttler.Throttler(1);\n  }\n\n  async throttledUpdateTopLayerElements(): Promise<void> {\n    await this.topLayerUpdateThrottler.schedule(() => this.updateTopLayerElements());\n  }\n\n  async updateTopLayerElements(): Promise<void> {\n    this.removeChildren();\n    this.removeCurrentTopLayerElementsAdorners();\n    this.currentTopLayerDOMNodes = new Set();\n\n    const newTopLayerElementsIDs = await this.domModel.getTopLayerElements();\n    if (!newTopLayerElementsIDs || newTopLayerElementsIDs.length === 0) {\n      return;\n    }\n\n    let topLayerElementIndex = 0;\n    for (let i = 0; i < newTopLayerElementsIDs.length; i++) {\n      const topLayerDOMNode = this.domModel.idToDOMNode.get(newTopLayerElementsIDs[i]);\n      if (topLayerDOMNode && topLayerDOMNode.nodeName() !== '::backdrop') {\n        const topLayerElementShortcut = new SDK.DOMModel.DOMNodeShortcut(\n            this.domModel.target(), topLayerDOMNode.backendNodeId(), 0, topLayerDOMNode.nodeName());\n        const topLayerElementRepresentation = new ElementsTreeOutline.ShortcutTreeElement(topLayerElementShortcut);\n        this.appendChild(topLayerElementRepresentation);\n        this.currentTopLayerDOMNodes.add(topLayerDOMNode);\n\n        // Add the element's backdrop if previous top layer element is a backdrop.\n        const previousTopLayerDOMNode =\n            (i > 0) ? this.domModel.idToDOMNode.get(newTopLayerElementsIDs[i - 1]) : undefined;\n        if (previousTopLayerDOMNode && previousTopLayerDOMNode.nodeName() === '::backdrop') {\n          const backdropElementShortcut = new SDK.DOMModel.DOMNodeShortcut(\n              this.domModel.target(), previousTopLayerDOMNode.backendNodeId(), 0, previousTopLayerDOMNode.nodeName());\n          const backdropElementRepresentation = new ElementsTreeOutline.ShortcutTreeElement(backdropElementShortcut);\n          topLayerElementRepresentation.appendChild(backdropElementRepresentation);\n        }\n\n        // TODO(changhaohan): store not-yet-inserted DOMNodes and adorn them when inserted.\n        const topLayerTreeElement = this.tree.treeElementByNode.get(topLayerDOMNode);\n        if (topLayerTreeElement) {\n          this.addTopLayerAdorner(topLayerTreeElement, topLayerElementRepresentation, ++topLayerElementIndex);\n        }\n      }\n    }\n  }\n\n  private removeCurrentTopLayerElementsAdorners(): void {\n    for (const node of this.currentTopLayerDOMNodes) {\n      const topLayerTreeElement = this.tree.treeElementByNode.get(node);\n      // TODO(changhaohan): remove only top layer adorner.\n      topLayerTreeElement?.removeAllAdorners();\n    }\n  }\n\n  private addTopLayerAdorner(\n      element: ElementsTreeElement, topLayerElementRepresentation: ElementsTreeOutline.ShortcutTreeElement,\n      topLayerElementIndex: number): void {\n    const config = ElementsComponents.AdornerManager.getRegisteredAdorner(\n        ElementsComponents.AdornerManager.RegisteredAdorners.TOP_LAYER);\n    const adornerContent = document.createElement('span');\n    adornerContent.classList.add('adorner-with-icon');\n    const linkIcon = new IconButton.Icon.Icon();\n    linkIcon\n        .data = {iconName: 'ic_show_node_16x16', color: 'var(--color-text-disabled)', width: '12px', height: '12px'};\n    const adornerText = document.createElement('span');\n    adornerText.textContent = ` top-layer (${topLayerElementIndex}) `;\n    adornerContent.append(linkIcon);\n    adornerContent.append(adornerText);\n    const adorner = element?.adorn(config, adornerContent);\n    if (adorner) {\n      const onClick = (((): void => {\n                         topLayerElementRepresentation.revealAndSelect();\n                       }) as EventListener);\n      adorner.addInteraction(onClick, {\n        isToggle: false,\n        shouldPropagateOnKeydown: false,\n        ariaLabelDefault: i18nString(UIStrings.reveal),\n        ariaLabelActive: i18nString(UIStrings.reveal),\n      });\n      adorner.addEventListener('mousedown', e => e.consume(), false);\n    }\n  }\n}\n"],
  "mappings": "AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA,MAAM,YAAY;AAAA,EAIhB,QAAQ;AAAA;AAGV,MAAM,OAAO,KAAK,KAAK,kBAAkB,wCAAwC;AACjF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,uCAAgC,GAAG,YAAY,YAAY;AAAA,EAChE;AAAA,EACA;AAAA,EACA,0BAAqD,oBAAI;AAAA,EACzD;AAAA,EAEA,YAAY,MAA+C,UAAiC;AAC1F,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,0BAA0B,IAAI,OAAO,UAAU,UAAU;AAAA;AAAA,QAG1D,kCAAiD;AACrD,UAAM,KAAK,wBAAwB,SAAS,MAAM,KAAK;AAAA;AAAA,QAGnD,yBAAwC;AAC5C,SAAK;AACL,SAAK;AACL,SAAK,0BAA0B,oBAAI;AAEnC,UAAM,yBAAyB,MAAM,KAAK,SAAS;AACnD,QAAI,CAAC,0BAA0B,uBAAuB,WAAW,GAAG;AAClE;AAAA;AAGF,QAAI,uBAAuB;AAC3B,aAAS,IAAI,GAAG,IAAI,uBAAuB,QAAQ,KAAK;AACtD,YAAM,kBAAkB,KAAK,SAAS,YAAY,IAAI,uBAAuB;AAC7E,UAAI,mBAAmB,gBAAgB,eAAe,cAAc;AAClE,cAAM,0BAA0B,IAAI,IAAI,SAAS,gBAC7C,KAAK,SAAS,UAAU,gBAAgB,iBAAiB,GAAG,gBAAgB;AAChF,cAAM,gCAAgC,IAAI,oBAAoB,oBAAoB;AAClF,aAAK,YAAY;AACjB,aAAK,wBAAwB,IAAI;AAGjC,cAAM,0BACD,IAAI,IAAK,KAAK,SAAS,YAAY,IAAI,uBAAuB,IAAI,MAAM;AAC7E,YAAI,2BAA2B,wBAAwB,eAAe,cAAc;AAClF,gBAAM,0BAA0B,IAAI,IAAI,SAAS,gBAC7C,KAAK,SAAS,UAAU,wBAAwB,iBAAiB,GAAG,wBAAwB;AAChG,gBAAM,gCAAgC,IAAI,oBAAoB,oBAAoB;AAClF,wCAA8B,YAAY;AAAA;AAI5C,cAAM,sBAAsB,KAAK,KAAK,kBAAkB,IAAI;AAC5D,YAAI,qBAAqB;AACvB,eAAK,mBAAmB,qBAAqB,+BAA+B,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9E,wCAA8C;AACpD,eAAW,QAAQ,KAAK,yBAAyB;AAC/C,YAAM,sBAAsB,KAAK,KAAK,kBAAkB,IAAI;AAE5D,2BAAqB;AAAA;AAAA;AAAA,EAIjB,mBACJ,SAA8B,+BAC9B,sBAAoC;AACtC,UAAM,SAAS,mBAAmB,eAAe,qBAC7C,mBAAmB,eAAe,mBAAmB;AACzD,UAAM,iBAAiB,SAAS,cAAc;AAC9C,mBAAe,UAAU,IAAI;AAC7B,UAAM,WAAW,IAAI,WAAW,KAAK;AACrC,aACK,OAAO,EAAC,UAAU,sBAAsB,OAAO,8BAA8B,OAAO,QAAQ,QAAQ;AACzG,UAAM,cAAc,SAAS,cAAc;AAC3C,gBAAY,cAAc,eAAe;AACzC,mBAAe,OAAO;AACtB,mBAAe,OAAO;AACtB,UAAM,UAAU,SAAS,MAAM,QAAQ;AACvC,QAAI,SAAS;AACX,YAAM,UAAY,MAAY;AACX,sCAA8B;AAAA;AAEjD,cAAQ,eAAe,SAAS;AAAA,QAC9B,UAAU;AAAA,QACV,0BAA0B;AAAA,QAC1B,kBAAkB,WAAW,UAAU;AAAA,QACvC,iBAAiB,WAAW,UAAU;AAAA;AAExC,cAAQ,iBAAiB,aAAa,OAAK,EAAE,WAAW;AAAA;AAAA;AAAA;",
  "names": []
}
