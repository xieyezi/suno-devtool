{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/CSSRuleValidatorHelper.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const buildPropertyDefinitionText = (property: string, value?: string): string => {\n  if (value === undefined) {\n    return buildPropertyName(property);\n  }\n  return '<code class=\"unbreakable-text\"><span class=\"property\">' + property + '</span>: ' + value + '</code>';\n};\n\nexport const buildPropertyName = (property: string): string => {\n  return '<code class=\"unbreakable-text\"><span class=\"property\">' + property + '</span></code>';\n};\n\nexport const buildPropertyValue = (property: string): string => {\n  return '<code class=\"unbreakable-text\">' + property + '</code>';\n};\n\nexport const isFlexContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const display = computedStyles.get('display');\n  return display === 'flex' || display === 'inline-flex';\n};\n\nexport const isInlineElement = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  return computedStyles.get('display') === 'inline';\n};\n\n// See https://html.spec.whatwg.org/multipage/rendering.html#replaced-elements\nconst possiblyReplacedElements = new Set([\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'input',\n  'object',\n  'video',\n]);\n\nexport const isPossiblyReplacedElement = (nodeName?: string): boolean => {\n  if (!nodeName) {\n    return false;\n  }\n  return possiblyReplacedElements.has(nodeName);\n};\n\nexport const isGridContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const display = computedStyles.get('display');\n  return display === 'grid' || display === 'inline-grid';\n};\n\nexport const isMulticolContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const columnWidth = computedStyles.get('column-width');\n  const columnCount = computedStyles.get('column-count');\n\n  return columnWidth !== 'auto' || columnCount !== 'auto';\n};\n"],
  "mappings": "AAIO,aAAM,8BAA8B,CAAC,UAAkB,UAA2B;AACvF,MAAI,UAAU,QAAW;AACvB,WAAO,kBAAkB;AAAA;AAE3B,SAAO,2DAA2D,WAAW,cAAc,QAAQ;AAAA;AAG9F,aAAM,oBAAoB,CAAC,aAA6B;AAC7D,SAAO,2DAA2D,WAAW;AAAA;AAGxE,aAAM,qBAAqB,CAAC,aAA6B;AAC9D,SAAO,oCAAoC,WAAW;AAAA;AAGjD,aAAM,kBAAkB,CAAC,mBAAkD;AAChF,MAAI,CAAC,gBAAgB;AACnB,WAAO;AAAA;AAET,QAAM,UAAU,eAAe,IAAI;AACnC,SAAO,YAAY,UAAU,YAAY;AAAA;AAGpC,aAAM,kBAAkB,CAAC,mBAAkD;AAChF,MAAI,CAAC,gBAAgB;AACnB,WAAO;AAAA;AAET,SAAO,eAAe,IAAI,eAAe;AAAA;AAI3C,MAAM,2BAA2B,oBAAI,IAAI;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGK,aAAM,4BAA4B,CAAC,aAA+B;AACvE,MAAI,CAAC,UAAU;AACb,WAAO;AAAA;AAET,SAAO,yBAAyB,IAAI;AAAA;AAG/B,aAAM,kBAAkB,CAAC,mBAAkD;AAChF,MAAI,CAAC,gBAAgB;AACnB,WAAO;AAAA;AAET,QAAM,UAAU,eAAe,IAAI;AACnC,SAAO,YAAY,UAAU,YAAY;AAAA;AAGpC,aAAM,sBAAsB,CAAC,mBAAkD;AACpF,MAAI,CAAC,gBAAgB;AACnB,WAAO;AAAA;AAET,QAAM,cAAc,eAAe,IAAI;AACvC,QAAM,cAAc,eAAe,IAAI;AAEvC,SAAO,gBAAgB,UAAU,gBAAgB;AAAA;",
  "names": []
}
