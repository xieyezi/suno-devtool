{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/lighthouse/LighthouseReportRenderer.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as LighthouseReport from '../../third_party/lighthouse/report/report.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\nimport * as Timeline from '../timeline/timeline.js';\nimport {\n  type RunnerResultArtifacts,\n  type NodeDetailsJSON,\n  type SourceLocationDetailsJSON,\n  type ReportJSON,\n} from './LighthouseReporterTypes.js';\n\nconst MaxLengthForLinks = 40;\n\ninterface RenderReportOpts {\n  beforePrint?: () => void;\n  afterPrint?: () => void;\n}\n\nexport class LighthouseReportRenderer {\n  static renderLighthouseReport(lhr: ReportJSON, artifacts?: RunnerResultArtifacts, opts?: RenderReportOpts):\n      HTMLElement {\n    let onViewTrace: (() => Promise<void>)|undefined = undefined;\n    if (artifacts) {\n      onViewTrace = async(): Promise<void> => {\n        const defaultPassTrace = artifacts.traces.defaultPass;\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.LighthouseViewTrace);\n        await UI.InspectorView.InspectorView.instance().showPanel('timeline');\n        Timeline.TimelinePanel.TimelinePanel.instance().loadFromEvents(defaultPassTrace.traceEvents);\n      };\n    }\n\n    async function onSaveFileOverride(blob: Blob): Promise<void> {\n      const domain = new Common.ParsedURL.ParsedURL(lhr.finalUrl || lhr.finalDisplayedUrl).domain();\n      const sanitizedDomain = domain.replace(/[^a-z0-9.-]+/gi, '_');\n      const timestamp = Platform.DateUtilities.toISO8601Compact(new Date(lhr.fetchTime));\n      const ext = blob.type.match('json') ? '.json' : '.html';\n      const basename = `${sanitizedDomain}-${timestamp}${ext}` as Platform.DevToolsPath.RawPathString;\n      const text = await blob.text();\n      void Workspace.FileManager.FileManager.instance().save(basename, text, true /* forceSaveAs */);\n    }\n\n    async function onPrintOverride(rootEl: HTMLElement): Promise<void> {\n      const clonedReport = rootEl.cloneNode(true);\n      const printWindow = window.open('', '_blank', 'channelmode=1,status=1,resizable=1');\n      if (!printWindow) {\n        return;\n      }\n\n      printWindow.document.body.replaceWith(clonedReport);\n      // Linkified nodes are shadow elements, which aren't exposed via `cloneNode`.\n      await LighthouseReportRenderer.linkifyNodeDetails(clonedReport as HTMLElement);\n\n      opts?.beforePrint?.();\n      printWindow.focus();\n      printWindow.print();\n      printWindow.close();\n      opts?.afterPrint?.();\n    }\n\n    function getStandaloneReportHTML(): string {\n      // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n      return Lighthouse.ReportGenerator.generateReportHtml(lhr);\n    }\n\n    const reportEl = LighthouseReport.renderReport(lhr, {\n      // Disable dark mode so we can manually adjust it.\n      disableDarkMode: true,\n      onViewTrace,\n      onSaveFileOverride,\n      onPrintOverride,\n      getStandaloneReportHTML,\n    });\n    reportEl.classList.add('lh-devtools');\n\n    const updateDarkModeIfNecessary = (): void => {\n      reportEl.classList.toggle('lh-dark', ThemeSupport.ThemeSupport.instance().themeName() === 'dark');\n    };\n    ThemeSupport.ThemeSupport.instance().addEventListener(\n        ThemeSupport.ThemeChangeEvent.eventName, updateDarkModeIfNecessary);\n    updateDarkModeIfNecessary();\n\n    // @ts-ignore Expose LHR on DOM for e2e tests\n    reportEl._lighthouseResultForTesting = lhr;\n    // @ts-ignore Expose Artifacts on DOM for e2e tests\n    reportEl._lighthouseArtifactsForTesting = artifacts;\n\n    // Linkifying requires the target be loaded. Do not block the report\n    // from rendering, as this is just an embellishment and the main target\n    // could take awhile to load.\n    void LighthouseReportRenderer.waitForMainTargetLoad().then(() => {\n      void LighthouseReportRenderer.linkifyNodeDetails(reportEl);\n      void LighthouseReportRenderer.linkifySourceLocationDetails(reportEl);\n    });\n\n    return reportEl;\n  }\n\n  static async waitForMainTargetLoad(): Promise<void> {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainFrameTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const resourceTreeModel = mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (!resourceTreeModel) {\n      return;\n    }\n    await resourceTreeModel.once(SDK.ResourceTreeModel.Events.Load);\n  }\n\n  static async linkifyNodeDetails(el: Element): Promise<void> {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainFrameTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const domModel = mainTarget.model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return;\n    }\n\n    for (const origElement of el.getElementsByClassName('lh-node')) {\n      const origHTMLElement = origElement as HTMLElement;\n      const detailsItem = origHTMLElement.dataset as unknown as NodeDetailsJSON;\n      if (!detailsItem.path) {\n        continue;\n      }\n\n      const nodeId = await domModel.pushNodeByPathToFrontend(detailsItem.path);\n\n      if (!nodeId) {\n        continue;\n      }\n      const node = domModel.nodeForId(nodeId);\n      if (!node) {\n        continue;\n      }\n\n      const element = await Common.Linkifier.Linkifier.linkify(\n          node, {tooltip: detailsItem.snippet, preventKeyboardFocus: undefined});\n      UI.Tooltip.Tooltip.install(origHTMLElement, '');\n\n      const screenshotElement = origHTMLElement.querySelector('.lh-element-screenshot');\n      origHTMLElement.textContent = '';\n      if (screenshotElement) {\n        origHTMLElement.append(screenshotElement);\n      }\n      origHTMLElement.appendChild(element);\n    }\n  }\n\n  static async linkifySourceLocationDetails(el: Element): Promise<void> {\n    for (const origElement of el.getElementsByClassName('lh-source-location')) {\n      const origHTMLElement = origElement as HTMLElement;\n      const detailsItem = origHTMLElement.dataset as SourceLocationDetailsJSON;\n      if (!detailsItem.sourceUrl || !detailsItem.sourceLine || !detailsItem.sourceColumn) {\n        continue;\n      }\n      const url = detailsItem.sourceUrl;\n      const line = Number(detailsItem.sourceLine);\n      const column = Number(detailsItem.sourceColumn);\n      const element = await Components.Linkifier.Linkifier.linkifyURL(url, {\n        lineNumber: line,\n        columnNumber: column,\n        showColumnNumber: false,\n        inlineFrameIndex: 0,\n        maxLength: MaxLengthForLinks,\n      });\n      UI.Tooltip.Tooltip.install(origHTMLElement, '');\n      origHTMLElement.textContent = '';\n      origHTMLElement.appendChild(element);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
