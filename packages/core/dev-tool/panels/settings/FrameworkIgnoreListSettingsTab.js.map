{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/settings/FrameworkIgnoreListSettingsTab.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport frameworkIgnoreListSettingsTabStyles from './frameworkIgnoreListSettingsTab.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Header text content in Framework Ignore List Settings Tab of the Settings\n   */\n  frameworkIgnoreList: 'Framework Ignore List',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  debuggerWillSkipThroughThe: 'Debugger will skip through the scripts and will not stop on exceptions thrown by them.',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  ignoreListContentScripts: 'Add content scripts to ignore list',\n  /**\n   *@description Ignore List content scripts title in Framework Ignore List Settings Tab of the Settings\n   */\n  ignoreListContentScriptsExtension: 'Add content scripts to ignore list (extension scripts in the page)',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  automaticallyIgnoreListKnownThirdPartyScripts: 'Automatically add known third-party scripts to ignore list',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  automaticallyIgnoreListKnownThirdPartyScriptsTooltip:\n      'Add sources from the `x_google_ignoreList` field from source maps to the ignore list',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  enableIgnoreListing: 'Enable Ignore Listing',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  enableIgnoreListingTooltip: 'Uncheck to disable all ignore listing',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  generalExclusionRules: 'General exclusion rules:',\n  /**\n   *@description Text in Framework Ignore List Settings Tab of the Settings\n   */\n  customExclusionRules: 'Custom exclusion rules:',\n  /**\n   *@description Text of the add pattern button in Framework Ignore List Settings Tab of the Settings\n   */\n  addPattern: 'Add pattern...',\n  /**\n   *@description Aria accessible name in Framework Ignore List Settings Tab of the Settings\n   */\n  addFilenamePattern: 'Add filename pattern',\n  /**\n   *@description Pattern title in Framework Ignore List Settings Tab of the Settings\n   *@example {ad.*?} PH1\n   */\n  ignoreScriptsWhoseNamesMatchS: 'Ignore scripts whose names match \\'\\'{PH1}\\'\\'',\n  /**\n   *@description Aria accessible name in Framework Ignore List Settings Tab of the Settings. It labels the input\n   * field used to add new or edit existing regular expressions that match file names to ignore in the debugger.\n   */\n  pattern: 'Add Pattern',\n  /**\n   *@description Error message in Framework Ignore List settings pane that declares pattern must not be empty\n   */\n  patternCannotBeEmpty: 'Pattern cannot be empty',\n  /**\n   *@description Error message in Framework Ignore List settings pane that declares pattern already exits\n   */\n  patternAlreadyExists: 'Pattern already exists',\n  /**\n   *@description Error message in Framework Ignore List settings pane that declares pattern must be a valid regular expression\n   */\n  patternMustBeAValidRegular: 'Pattern must be a valid regular expression',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/FrameworkIgnoreListSettingsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet frameworkIgnoreListSettingsTabInstance: FrameworkIgnoreListSettingsTab;\nexport class FrameworkIgnoreListSettingsTab extends UI.Widget.VBox implements\n    UI.ListWidget.Delegate<Common.Settings.RegExpSettingItem> {\n  private readonly list: UI.ListWidget.ListWidget<Common.Settings.RegExpSettingItem>;\n  private readonly setting: Common.Settings.RegExpSetting;\n  private editor?: UI.ListWidget.Editor<Common.Settings.RegExpSettingItem>;\n\n  constructor() {\n    super(true);\n\n    const header = this.contentElement.createChild('div', 'header');\n    header.textContent = i18nString(UIStrings.frameworkIgnoreList);\n    UI.ARIAUtils.markAsHeading(header, 1);\n\n    this.contentElement.createChild('div', 'intro').textContent = i18nString(UIStrings.debuggerWillSkipThroughThe);\n\n    const enabledSetting =\n        Common.Settings.Settings.instance().moduleSetting('enableIgnoreListing') as Common.Settings.Setting<boolean>;\n    const enableIgnoreListing = this.contentElement.createChild('div', 'ignore-list-global-enable');\n    enableIgnoreListing.appendChild(\n        UI.SettingsUI.createSettingCheckbox(i18nString(UIStrings.enableIgnoreListing), enabledSetting, true));\n    UI.Tooltip.Tooltip.install(enableIgnoreListing, i18nString(UIStrings.enableIgnoreListingTooltip));\n\n    const ignoreListOptions = this.contentElement.createChild('div', 'ignore-list-options');\n\n    ignoreListOptions.createChild('div', 'ignore-list-option-group').textContent =\n        i18nString(UIStrings.generalExclusionRules);\n\n    const ignoreListContentScripts = ignoreListOptions.createChild('div', 'ignore-list-option');\n    ignoreListContentScripts.appendChild(UI.SettingsUI.createSettingCheckbox(\n        i18nString(UIStrings.ignoreListContentScripts),\n        Common.Settings.Settings.instance().moduleSetting('skipContentScripts'), true));\n    UI.Tooltip.Tooltip.install(ignoreListContentScripts, i18nString(UIStrings.ignoreListContentScriptsExtension));\n\n    const automaticallyIgnoreList = ignoreListOptions.createChild('div', 'ignore-list-option');\n    automaticallyIgnoreList.appendChild(UI.SettingsUI.createSettingCheckbox(\n        i18nString(UIStrings.automaticallyIgnoreListKnownThirdPartyScripts),\n        Common.Settings.Settings.instance().moduleSetting('automaticallyIgnoreListKnownThirdPartyScripts'), true));\n    UI.Tooltip.Tooltip.install(\n        automaticallyIgnoreList, i18nString(UIStrings.automaticallyIgnoreListKnownThirdPartyScriptsTooltip));\n\n    ignoreListOptions.createChild('div', 'ignore-list-option-group').textContent =\n        i18nString(UIStrings.customExclusionRules);\n\n    this.list = new UI.ListWidget.ListWidget(this);\n    this.list.element.classList.add('ignore-list');\n\n    const placeholder = document.createElement('div');\n    placeholder.classList.add('ignore-list-empty');\n    this.list.setEmptyPlaceholder(placeholder);\n    this.list.show(ignoreListOptions);\n    const addPatternButton =\n        UI.UIUtils.createTextButton(i18nString(UIStrings.addPattern), this.addButtonClicked.bind(this), 'add-button');\n    UI.ARIAUtils.setAccessibleName(addPatternButton, i18nString(UIStrings.addFilenamePattern));\n    ignoreListOptions.appendChild(addPatternButton);\n    this.setting =\n        Common.Settings.Settings.instance().moduleSetting('skipStackFramesPattern') as Common.Settings.RegExpSetting;\n    this.setting.addChangeListener(this.settingUpdated, this);\n\n    this.setDefaultFocusedElement(addPatternButton);\n\n    enabledSetting.addChangeListener(enabledChanged);\n    enabledChanged();\n\n    function enabledChanged(): void {\n      const enabled = enabledSetting.get();\n      if (enabled) {\n        ignoreListOptions.classList.remove('ignore-listing-disabled');\n      } else {\n        ignoreListOptions.classList.add('ignore-listing-disabled');\n      }\n    }\n  }\n\n  static instance(opts = {forceNew: null}): FrameworkIgnoreListSettingsTab {\n    const {forceNew} = opts;\n    if (!frameworkIgnoreListSettingsTabInstance || forceNew) {\n      frameworkIgnoreListSettingsTabInstance = new FrameworkIgnoreListSettingsTab();\n    }\n\n    return frameworkIgnoreListSettingsTabInstance;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.list.registerCSSFiles([frameworkIgnoreListSettingsTabStyles]);\n    this.registerCSSFiles([frameworkIgnoreListSettingsTabStyles]);\n    this.settingUpdated();\n  }\n\n  private settingUpdated(): void {\n    this.list.clear();\n    const patterns = this.setting.getAsArray();\n    for (let i = 0; i < patterns.length; ++i) {\n      this.list.appendItem(patterns[i], true);\n    }\n  }\n\n  private addButtonClicked(): void {\n    this.list.addNewItem(this.setting.getAsArray().length, {pattern: '', disabled: false});\n  }\n\n  renderItem(item: Common.Settings.RegExpSettingItem, _editable: boolean): Element {\n    const element = document.createElement('div');\n\n    const listSetting = this.setting;\n\n    const checkbox = UI.UIUtils.CheckboxLabel.create(item.pattern, !item.disabled);\n    const helpText = i18nString(UIStrings.ignoreScriptsWhoseNamesMatchS, {PH1: item.pattern});\n    UI.Tooltip.Tooltip.install(checkbox, helpText);\n    checkbox.checkboxElement.ariaLabel = helpText;\n    checkbox.checkboxElement.addEventListener('change', inputChanged, false);\n    element.appendChild(checkbox);\n    element.classList.add('ignore-list-item');\n\n    return element;\n\n    function inputChanged(): void {\n      const disabled = !checkbox.checkboxElement.checked;\n      if (item.disabled !== disabled) {\n        item.disabled = disabled;\n        // Send changed event\n        listSetting.setAsArray(listSetting.getAsArray());\n      }\n    }\n  }\n\n  removeItemRequested(item: Common.Settings.RegExpSettingItem, index: number): void {\n    const patterns = this.setting.getAsArray();\n    patterns.splice(index, 1);\n    this.setting.setAsArray(patterns);\n  }\n\n  commitEdit(\n      item: Common.Settings.RegExpSettingItem, editor: UI.ListWidget.Editor<Common.Settings.RegExpSettingItem>,\n      isNew: boolean): void {\n    item.pattern = editor.control('pattern').value.trim();\n\n    const list = this.setting.getAsArray();\n    if (isNew) {\n      list.push(item);\n    }\n    this.setting.setAsArray(list);\n  }\n\n  beginEdit(item: Common.Settings.RegExpSettingItem): UI.ListWidget.Editor<Common.Settings.RegExpSettingItem> {\n    const editor = this.createEditor();\n    editor.control('pattern').value = item.pattern;\n    return editor;\n  }\n\n  private createEditor(): UI.ListWidget.Editor<Common.Settings.RegExpSettingItem> {\n    if (this.editor) {\n      return this.editor;\n    }\n\n    const editor = new UI.ListWidget.Editor<Common.Settings.RegExpSettingItem>();\n    this.editor = editor;\n    const content = editor.contentElement();\n\n    const titles = content.createChild('div', 'ignore-list-edit-row');\n    titles.createChild('div', 'ignore-list-pattern').textContent = i18nString(UIStrings.pattern);\n\n    const fields = content.createChild('div', 'ignore-list-edit-row');\n    const pattern = editor.createInput('pattern', 'text', '/framework\\\\.js$', patternValidator.bind(this));\n    UI.ARIAUtils.setAccessibleName(pattern, i18nString(UIStrings.pattern));\n    fields.createChild('div', 'ignore-list-pattern').appendChild(pattern);\n\n    return editor;\n\n    function patternValidator(\n        this: FrameworkIgnoreListSettingsTab, item: Common.Settings.RegExpSettingItem, index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const pattern = input.value.trim();\n      const patterns = this.setting.getAsArray();\n\n      if (!pattern.length) {\n        return {valid: false, errorMessage: i18nString(UIStrings.patternCannotBeEmpty)};\n      }\n\n      for (let i = 0; i < patterns.length; ++i) {\n        if (i !== index && patterns[i].pattern === pattern) {\n          return {valid: false, errorMessage: i18nString(UIStrings.patternAlreadyExists)};\n        }\n      }\n\n      let regex;\n      try {\n        regex = new RegExp(pattern);\n      } catch (e) {\n      }\n      if (!regex) {\n        return {valid: false, errorMessage: i18nString(UIStrings.patternMustBeAValidRegular)};\n      }\n      return {valid: true, errorMessage: undefined};\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
