{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/network/components/EditableSpan.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport editableSpanStyles from './EditableSpan.css.js';\n\nconst {render, html} = LitHtml;\n\nexport interface EditableSpanData {\n  value: string;\n}\n\nexport class EditableSpan extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-editable-span`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #value: string = '';\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [editableSpanStyles];\n    this.#shadow.addEventListener('focusin', this.#selectAllText.bind(this));\n    this.#shadow.addEventListener('keydown', this.#onKeyDown.bind(this));\n    this.#shadow.addEventListener('paste', this.#onPaste.bind(this));\n    this.#shadow.addEventListener('input', this.#onInput.bind(this));\n  }\n\n  set data(data: EditableSpanData) {\n    this.#value = data.value;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  get value(): string {\n    return this.#shadow.querySelector<HTMLSpanElement>('span')?.innerText || '';\n  }\n\n  set value(value: string) {\n    this.#value = value;\n    const span = this.#shadow.querySelector<HTMLSpanElement>('span');\n    if (span) {\n      span.innerText = value;\n    }\n  }\n\n  #onKeyDown(event: Event): void {\n    if ((event as KeyboardEvent).key === 'Enter') {\n      event.preventDefault();\n      (event.target as HTMLElement)?.blur();\n    }\n  }\n\n  #onInput(event: Event): void {\n    this.#value = (event.target as HTMLElement).innerText;\n  }\n\n  #selectAllText(event: Event): void {\n    const target = event.target as HTMLElement;\n    const selection = window.getSelection();\n    const range = document.createRange();\n    range.selectNodeContents(target);\n    selection?.removeAllRanges();\n    selection?.addRange(range);\n  }\n\n  #onPaste(event: Event): void {\n    const clipboardEvent = event as ClipboardEvent;\n    event.preventDefault();\n    if (clipboardEvent.clipboardData) {\n      const text = clipboardEvent.clipboardData.getData('text/plain');\n      const range = this.#shadow.getSelection()?.getRangeAt(0);\n      if (!range) {\n        return;\n      }\n      range.deleteContents();\n\n      const textNode = document.createTextNode(text);\n      range.insertNode(textNode);\n      range.selectNodeContents(textNode);\n      range.collapse(false);\n\n      const selection = window.getSelection();\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n    }\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('HeaderSectionRow render was not scheduled');\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`<span contenteditable=\"true\" class=\"editable\" tabindex=\"0\" .innerText=${this.#value}></span>`, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  focus(): void {\n    requestAnimationFrame(() => {\n      const span = this.#shadow.querySelector<HTMLElement>('.editable');\n      span?.focus();\n    });\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-editable-span', EditableSpan);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-editable-span': EditableSpan;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAEA,MAAM,EAAC,QAAQ,SAAQ;AAMhB,kCAA2B,YAAY;AAAA,SAC5B,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA,iBACpB,aAAa,KAAK;AAAA,WACzB;AAAA,EAEjB,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AACnC,iBAAa,iBAAiB,WAAW,oBAAoB,KAAK;AAClE,iBAAa,iBAAiB,WAAW,gBAAgB,KAAK;AAC9D,iBAAa,iBAAiB,SAAS,cAAc,KAAK;AAC1D,iBAAa,iBAAiB,SAAS,cAAc,KAAK;AAAA;AAAA,MAGxD,KAAK,MAAwB;AAC/B,kBAAc,KAAK;AACnB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,QAAgB;AAClB,WAAO,aAAa,cAA+B,SAAS,aAAa;AAAA;AAAA,MAGvE,MAAM,OAAe;AACvB,kBAAc;AACd,UAAM,OAAO,aAAa,cAA+B;AACzD,QAAI,MAAM;AACR,WAAK,YAAY;AAAA;AAAA;AAAA,aAIV,OAAoB;AAC7B,QAAK,MAAwB,QAAQ,SAAS;AAC5C,YAAM;AACN,MAAC,MAAM,QAAwB;AAAA;AAAA;AAAA,WAI1B,OAAoB;AAC3B,kBAAe,MAAM,OAAuB;AAAA;AAAA,iBAG/B,OAAoB;AACjC,UAAM,SAAS,MAAM;AACrB,UAAM,YAAY,OAAO;AACzB,UAAM,QAAQ,SAAS;AACvB,UAAM,mBAAmB;AACzB,eAAW;AACX,eAAW,SAAS;AAAA;AAAA,WAGb,OAAoB;AAC3B,UAAM,iBAAiB;AACvB,UAAM;AACN,QAAI,eAAe,eAAe;AAChC,YAAM,OAAO,eAAe,cAAc,QAAQ;AAClD,YAAM,QAAQ,aAAa,gBAAgB,WAAW;AACtD,UAAI,CAAC,OAAO;AACV;AAAA;AAEF,YAAM;AAEN,YAAM,WAAW,SAAS,eAAe;AACzC,YAAM,WAAW;AACjB,YAAM,mBAAmB;AACzB,YAAM,SAAS;AAEf,YAAM,YAAY,OAAO;AACzB,iBAAW;AACX,iBAAW,SAAS;AAAA;AAAA;AAAA,YAIR;AACd,QAAI,CAAC,iBAAiB,gBAAgB,kBAAkB,OAAO;AAC7D,YAAM,IAAI,MAAM;AAAA;AAKlB,WAAO,6EAA6E,uBAAuB,cAAc,EAAC,MAAM;AAAA;AAAA,EAIlI,QAAc;AACZ,0BAAsB,MAAM;AAC1B,YAAM,OAAO,aAAa,cAA2B;AACrD,YAAM;AAAA;AAAA;AAAA;AAKZ,iBAAiB,eAAe,gBAAgB,0BAA0B;",
  "names": []
}
