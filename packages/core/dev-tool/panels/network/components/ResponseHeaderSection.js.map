{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/network/components/ResponseHeaderSection.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as IssuesManager from '../../../models/issues_manager/issues_manager.js';\nimport * as NetworkForward from '../../../panels/network/forward/forward.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as Sources from '../../../panels/sources/sources.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport {\n  compareHeaders,\n  type HeaderDescriptor,\n  type HeaderDetailsDescriptor,\n  type HeaderEditedEvent,\n  type HeaderEditorDescriptor,\n  type HeaderRemovedEvent,\n  HeaderSectionRow,\n  type HeaderSectionRowData,\n} from './HeaderSectionRow.js';\nimport * as Persistence from '../../../models/persistence/persistence.js';\nimport type * as Workspace from '../../../models/workspace/workspace.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Common from '../../../core/common/common.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as Root from '../../../core/root/root.js';\n\nimport responseHeaderSectionStyles from './ResponseHeaderSection.css.js';\n\nconst {render, html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Label for a button which allows adding an HTTP header.\n   */\n  addHeader: 'Add header',\n  /**\n   *@description Explanation text for which cross-origin policy to set.\n   */\n  chooseThisOptionIfTheResourceAnd:\n      'Choose this option if the resource and the document are served from the same site.',\n  /**\n   *@description Explanation text for which cross-origin policy to set.\n   */\n  onlyChooseThisOptionIfAn:\n      'Only choose this option if an arbitrary website including this resource does not impose a security risk.',\n  /**\n   *@description Message in the Headers View of the Network panel when a cross-origin opener policy blocked loading a sandbox iframe.\n   */\n  thisDocumentWasBlockedFrom:\n      'This document was blocked from loading in an `iframe` with a `sandbox` attribute because this document specified a cross-origin opener policy.',\n  /**\n   *@description Message in the Headers View of the Network panel when a cross-origin embedder policy header needs to be set.\n   */\n  toEmbedThisFrameInYourDocument:\n      'To embed this frame in your document, the response needs to enable the cross-origin embedder policy by specifying the following response header:',\n  /**\n   *@description Message in the Headers View of the Network panel when a cross-origin resource policy header needs to be set.\n   */\n  toUseThisResourceFromADifferent:\n      'To use this resource from a different origin, the server needs to specify a cross-origin resource policy in the response headers:',\n  /**\n   *@description Message in the Headers View of the Network panel when the cross-origin resource policy header is too strict.\n   */\n  toUseThisResourceFromADifferentOrigin:\n      'To use this resource from a different origin, the server may relax the cross-origin resource policy response header:',\n  /**\n   *@description Message in the Headers View of the Network panel when the cross-origin resource policy header is too strict.\n   */\n  toUseThisResourceFromADifferentSite:\n      'To use this resource from a different site, the server may relax the cross-origin resource policy response header:',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/network/components/ResponseHeaderSection.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst plusIconUrl = new URL('../../../Images/plus_icon.svg', import.meta.url).toString();\n\nexport const RESPONSE_HEADER_SECTION_DATA_KEY = 'ResponseHeaderSection';\n\nexport interface ResponseHeaderSectionData {\n  request: SDK.NetworkRequest.NetworkRequest;\n  toReveal?: {section: NetworkForward.UIRequestLocation.UIHeaderSection, header?: string};\n}\n\nexport class ResponseHeaderSection extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-response-header-section`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #request?: SDK.NetworkRequest.NetworkRequest;\n  #headerDetails: HeaderDetailsDescriptor[] = [];\n  #headerEditors: HeaderEditorDescriptor[] = [];\n  #uiSourceCode: Workspace.UISourceCode.UISourceCode|null = null;\n  #overrides: Persistence.NetworkPersistenceManager.HeaderOverride[] = [];\n  #headersAreOverrideable = false;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [responseHeaderSectionStyles];\n  }\n\n  set data(data: ResponseHeaderSectionData) {\n    this.#request = data.request;\n    // If the request has been locally overridden, its 'sortedResponseHeaders'\n    // contains no 'set-cookie' headers, because they have been filtered out by\n    // the Chromium backend. DevTools therefore uses previously stored values.\n    const headers = this.#request.sortedResponseHeaders.concat(this.#request.setCookieHeaders);\n    headers.sort(function(a, b) {\n      return Platform.StringUtilities.compare(a.name.toLowerCase(), b.name.toLowerCase());\n    });\n\n    this.#headerDetails = headers.map(header => ({\n                                        name: Platform.StringUtilities.toLowerCaseString(header.name),\n                                        value: header.value.replace(/\\s/g, ' '),\n                                      }));\n\n    const headersWithIssues = [];\n    if (this.#request.wasBlocked()) {\n      const headerWithIssues =\n          BlockedReasonDetails.get((this.#request.blockedReason() as Protocol.Network.BlockedReason));\n      if (headerWithIssues) {\n        if (IssuesManager.RelatedIssue.hasIssueOfCategory(\n                this.#request, IssuesManager.Issue.IssueCategory.CrossOriginEmbedderPolicy)) {\n          const followLink = (): void => {\n            Host.userMetrics.issuesPanelOpenedFrom(Host.UserMetrics.IssueOpener.LearnMoreLinkCOEP);\n            if (this.#request) {\n              void IssuesManager.RelatedIssue.reveal(\n                  this.#request, IssuesManager.Issue.IssueCategory.CrossOriginEmbedderPolicy);\n            }\n          };\n          if (headerWithIssues.blockedDetails) {\n            headerWithIssues.blockedDetails.reveal = followLink;\n          }\n        }\n        headersWithIssues.push(headerWithIssues);\n      }\n    }\n\n    function mergeHeadersWithIssues(\n        headers: HeaderDetailsDescriptor[], headersWithIssues: HeaderDetailsDescriptor[]): HeaderDetailsDescriptor[] {\n      let i = 0, j = 0;\n      const result: HeaderDetailsDescriptor[] = [];\n      while (i < headers.length && j < headersWithIssues.length) {\n        if (headers[i].name < headersWithIssues[j].name) {\n          result.push({...headers[i++], headerNotSet: false});\n        } else if (headers[i].name > headersWithIssues[j].name) {\n          result.push({...headersWithIssues[j++], headerNotSet: true});\n        } else {\n          result.push({...headersWithIssues[j++], ...headers[i++], headerNotSet: false});\n        }\n      }\n      while (i < headers.length) {\n        result.push({...headers[i++], headerNotSet: false});\n      }\n      while (j < headersWithIssues.length) {\n        result.push({...headersWithIssues[j++], headerNotSet: true});\n      }\n      return result;\n    }\n\n    this.#headerDetails = mergeHeadersWithIssues(this.#headerDetails, headersWithIssues);\n\n    const blockedResponseCookies = this.#request.blockedResponseCookies();\n    const blockedCookieLineToReasons = new Map<string, Protocol.Network.SetCookieBlockedReason[]>(\n        blockedResponseCookies?.map(c => [c.cookieLine, c.blockedReasons]));\n    for (const header of this.#headerDetails) {\n      if (header.name === 'set-cookie' && header.value) {\n        const matchingBlockedReasons = blockedCookieLineToReasons.get(header.value);\n        if (matchingBlockedReasons) {\n          header.setCookieBlockedReasons = matchingBlockedReasons;\n        }\n      }\n    }\n\n    if (data.toReveal?.section === NetworkForward.UIRequestLocation.UIHeaderSection.Response) {\n      this.#headerDetails.filter(header => compareHeaders(header.name, data.toReveal?.header?.toLowerCase()))\n          .forEach(header => {\n            header.highlight = true;\n          });\n    }\n\n    const dataAssociatedWithRequest = this.#request.getAssociatedData(RESPONSE_HEADER_SECTION_DATA_KEY);\n    if (dataAssociatedWithRequest) {\n      this.#headerEditors = dataAssociatedWithRequest as HeaderEditorDescriptor[];\n    } else {\n      this.#headerEditors =\n          this.#headerDetails.map(header => ({name: header.name, value: header.value, originalValue: header.value}));\n      this.#markOverrides();\n    }\n\n    void this.#loadOverridesFileInfo();\n    this.#request.setAssociatedData(RESPONSE_HEADER_SECTION_DATA_KEY, this.#headerEditors);\n    this.#render();\n  }\n\n  #resetEditorState(): void {\n    if (!this.#request) {\n      return;\n    }\n    this.#headersAreOverrideable = false;\n    this.#headerEditors =\n        this.#headerDetails.map(header => ({name: header.name, value: header.value, originalValue: header.value}));\n    this.#markOverrides();\n    this.#request.setAssociatedData(RESPONSE_HEADER_SECTION_DATA_KEY, this.#headerEditors);\n  }\n\n  async #loadOverridesFileInfo(): Promise<void> {\n    if (!this.#request) {\n      return;\n    }\n    this.#uiSourceCode =\n        Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().getHeadersUISourceCodeFromUrl(\n            this.#request.url());\n    if (!this.#uiSourceCode) {\n      this.#resetEditorState();\n      this.#render();\n      return;\n    }\n    try {\n      const deferredContent = await this.#uiSourceCode.requestContent();\n      this.#overrides =\n          JSON.parse(deferredContent.content || '[]') as Persistence.NetworkPersistenceManager.HeaderOverride[];\n      if (!this.#overrides.every(Persistence.NetworkPersistenceManager.isHeaderOverride)) {\n        throw 'Type mismatch after parsing';\n      }\n      this.#headersAreOverrideable = Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.HEADER_OVERRIDES) &&\n          Common.Settings.Settings.instance().moduleSetting('persistenceNetworkOverridesEnabled').get();\n      for (const header of this.#headerEditors) {\n        header.valueEditable = this.#headersAreOverrideable;\n      }\n    } catch (error) {\n      console.error(\n          'Failed to parse', this.#uiSourceCode?.url() || 'source code file', 'for locally overriding headers.');\n      this.#resetEditorState();\n    } finally {\n      this.#render();\n    }\n  }\n\n  #markOverrides(): void {\n    if (!this.#request || this.#request.originalResponseHeaders.length === 0) {\n      return;\n    }\n\n    // To compare original headers and actual headers we use a map from header\n    // name to an array of header values. This allows us to handle the cases\n    // in which we have multiple headers with the same name (and corresponding\n    // header values which may or may not occur multiple times as well). We are\n    // not using MultiMaps, because a Set would not able to distinguish between\n    // header values [a, a, b] and [a, b, b].\n    const originalHeaders = new Map<Platform.StringUtilities.LowerCaseString, string[]>();\n    for (const header of this.#request?.originalResponseHeaders || []) {\n      const headerName = Platform.StringUtilities.toLowerCaseString(header.name);\n      const headerValues = originalHeaders.get(headerName);\n      if (headerValues) {\n        headerValues.push(header.value.replace(/\\s/g, ' '));\n      } else {\n        originalHeaders.set(headerName, [header.value.replace(/\\s/g, ' ')]);\n      }\n    }\n\n    const actualHeaders = new Map<Platform.StringUtilities.LowerCaseString, string[]>();\n    for (const header of this.#headerDetails) {\n      const headerValues = actualHeaders.get(header.name);\n      if (headerValues) {\n        headerValues.push(header.value || '');\n      } else {\n        actualHeaders.set(header.name, [header.value || '']);\n      }\n    }\n\n    const isDifferent =\n        (headerName: Platform.StringUtilities.LowerCaseString,\n         actualHeaders: Map<Platform.StringUtilities.LowerCaseString, string[]>,\n         originalHeaders: Map<Platform.StringUtilities.LowerCaseString, string[]>): boolean => {\n          const actual = actualHeaders.get(headerName);\n          const original = originalHeaders.get(headerName);\n          if (!actual || !original || actual.length !== original.length) {\n            return true;\n          }\n          actual.sort();\n          original.sort();\n          for (let i = 0; i < actual.length; i++) {\n            if (!compareHeaders(actual[i], original[i])) {\n              return true;\n            }\n          }\n          return false;\n        };\n\n    for (const headerName of actualHeaders.keys()) {\n      // If the array of actual headers and the array of original headers do not\n      // exactly match, mark all headers with 'headerName' as being overridden.\n      if (headerName !== 'set-cookie' && isDifferent(headerName, actualHeaders, originalHeaders)) {\n        this.#headerEditors.filter(header => compareHeaders(header.name, headerName)).forEach(header => {\n          header.isOverride = true;\n        });\n      }\n    }\n\n    // Special case for 'set-cookie' headers: compare each header individually\n    // and don't treat all 'set-cookie' headers as a single unit.\n    this.#headerEditors.filter(header => header.name === 'set-cookie').forEach(header => {\n      if (this.#request?.originalResponseHeaders.find(\n              originalHeader => originalHeader.name === 'set-cookie' &&\n                  compareHeaders(originalHeader.value, header.value)) === undefined) {\n        header.isOverride = true;\n      }\n    });\n  }\n\n  #onHeaderEdited(event: HeaderEditedEvent): void {\n    const target = event.target as HTMLElement;\n    if (target.dataset.index === undefined) {\n      return;\n    }\n    const index = Number(target.dataset.index);\n    this.#updateOverrides(event.headerName, event.headerValue, index);\n  }\n\n  #fileNameFromUrl(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.RawPathString {\n    const rawPath =\n        Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().rawPathFromUrl(url, true);\n    const lastIndexOfSlash = rawPath.lastIndexOf('/');\n    return Common.ParsedURL.ParsedURL.substring(rawPath, lastIndexOfSlash + 1);\n  }\n\n  #commitOverrides(): void {\n    this.#uiSourceCode?.setWorkingCopy(JSON.stringify(this.#overrides, null, 2));\n    this.#uiSourceCode?.commitWorkingCopy();\n  }\n\n  #removeEntryFromOverrides(\n      rawFileName: Platform.DevToolsPath.RawPathString, headerName: Platform.StringUtilities.LowerCaseString,\n      headerValue: string): void {\n    for (let blockIndex = this.#overrides.length - 1; blockIndex >= 0; blockIndex--) {\n      const block = this.#overrides[blockIndex];\n      if (block.applyTo !== rawFileName) {\n        continue;\n      }\n      const foundIndex = block.headers.findIndex(\n          header => compareHeaders(header.name, headerName) && compareHeaders(header.value, headerValue));\n      if (foundIndex < 0) {\n        continue;\n      }\n      block.headers.splice(foundIndex, 1);\n      if (block.headers.length === 0) {\n        this.#overrides.splice(blockIndex, 1);\n      }\n      return;\n    }\n  }\n\n  #onHeaderRemoved(event: HeaderRemovedEvent): void {\n    const target = event.target as HTMLElement;\n    if (target.dataset.index === undefined || !this.#request) {\n      return;\n    }\n    const index = Number(target.dataset.index);\n    const rawFileName = this.#fileNameFromUrl(this.#request.url());\n    this.#removeEntryFromOverrides(rawFileName, event.headerName, event.headerValue);\n    this.#commitOverrides();\n    this.#headerEditors[index].isDeleted = true;\n    this.#render();\n  }\n\n  #updateOverrides(headerName: Platform.StringUtilities.LowerCaseString, headerValue: string, index: number): void {\n    if (!this.#request) {\n      return;\n    }\n    // If 'originalResponseHeaders' are not populated (because there was no\n    // request interception), fill them with a copy of 'sortedResponseHeaders'.\n    // This ensures we have access to the original values when undoing edits.\n    if (this.#request.originalResponseHeaders.length === 0) {\n      this.#request.originalResponseHeaders =\n          this.#request.sortedResponseHeaders.map(headerEntry => ({...headerEntry}));\n    }\n\n    const previousName = this.#headerEditors[index].name;\n    const previousValue = this.#headerEditors[index].value;\n    this.#headerEditors[index].name = headerName;\n    this.#headerEditors[index].value = headerValue;\n\n    let headersToUpdate: HeaderEditorDescriptor[] = [];\n    if (headerName === 'set-cookie') {\n      // Special case for 'set-cookie' headers: each such header is treated\n      // separately without looking at other 'set-cookie' headers.\n      headersToUpdate.push({name: headerName, value: headerValue});\n    } else {\n      // If multiple headers have the same name 'foo', we treat them as a unit.\n      // If there are overrides for 'foo', all original 'foo' headers are removed\n      // and replaced with the override(s) for 'foo'.\n      headersToUpdate = this.#headerEditors.filter(\n          header => compareHeaders(header.name, headerName) &&\n              (!compareHeaders(header.value, header.originalValue) || header.isOverride));\n    }\n\n    const rawFileName = this.#fileNameFromUrl(this.#request.url());\n\n    // If the last override-block matches 'rawFileName', use this last block.\n    // Otherwise just append a new block at the end. We are not using earlier\n    // blocks, because they could be overruled by later blocks, which contain\n    // wildcards in the filenames they apply to.\n    let block: Persistence.NetworkPersistenceManager.HeaderOverride|null = null;\n    const [lastOverride] = this.#overrides.slice(-1);\n    if (lastOverride?.applyTo === rawFileName) {\n      block = lastOverride;\n    } else {\n      block = {\n        applyTo: rawFileName,\n        headers: [],\n      };\n      this.#overrides.push(block);\n    }\n\n    if (headerName === 'set-cookie') {\n      // Special case for 'set-cookie' headers: only remove the one specific\n      // header which is currently being modified, keep all other headers\n      // (including other 'set-cookie' headers).\n      const foundIndex = block.headers.findIndex(\n          header => compareHeaders(header.name, previousName) && compareHeaders(header.value, previousValue));\n      if (foundIndex >= 0) {\n        block.headers.splice(foundIndex, 1);\n      }\n    } else {\n      // Keep header overrides for all headers with a different name.\n      block.headers = block.headers.filter(header => !compareHeaders(header.name, headerName));\n    }\n\n    // If a header name has been edited (only possible when adding headers),\n    // remove the previous override entry.\n    if (!compareHeaders(this.#headerEditors[index].name, previousName)) {\n      for (let i = 0; i < block.headers.length; ++i) {\n        if (compareHeaders(block.headers[i].name, previousName) &&\n            compareHeaders(block.headers[i].value, previousValue)) {\n          block.headers.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    // Append freshly edited header overrides.\n    for (const header of headersToUpdate) {\n      block.headers.push({name: header.name, value: header.value || ''});\n    }\n\n    if (block.headers.length === 0) {\n      this.#overrides.pop();\n    }\n    this.#commitOverrides();\n  }\n\n  #onAddHeaderClick(): void {\n    this.#headerEditors.push({\n      name: Platform.StringUtilities.toLowerCaseString(i18n.i18n.lockedString('header-name')),\n      value: i18n.i18n.lockedString('header value'),\n      isOverride: true,\n      nameEditable: true,\n      valueEditable: true,\n    });\n    const index = this.#headerEditors.length - 1;\n    this.#updateOverrides(this.#headerEditors[index].name, this.#headerEditors[index].value || '', index);\n    this.#render();\n\n    const rows = this.#shadow.querySelectorAll<HeaderSectionRow>('devtools-header-section-row');\n    const [lastRow] = Array.from(rows).slice(-1);\n    lastRow?.focus();\n  }\n\n  #render(): void {\n    if (!this.#request) {\n      return;\n    }\n\n    const headerDescriptors: HeaderDescriptor[] = this.#headerEditors.map(\n        (headerEditor, index) => ({...this.#headerDetails[index], ...headerEditor, isResponseHeader: true}));\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      ${headerDescriptors.map((header, index) => html`\n        <${HeaderSectionRow.litTagName} .data=${{\n          header: header,\n        } as HeaderSectionRowData} @headeredited=${this.#onHeaderEdited} @headerremoved=${this.#onHeaderRemoved} @enableheaderediting=${this.#onEnableHeaderEditingClick} data-index=${index}></${HeaderSectionRow.litTagName}>\n      `)}\n      ${this.#headersAreOverrideable ? html`\n        <${Buttons.Button.Button.litTagName}\n          class=\"add-header-button\"\n          .variant=${Buttons.Button.Variant.SECONDARY}\n          .iconUrl=${plusIconUrl}\n          .iconWidth=${'12px'}\n          .iconHeight=${'12px'}\n          @click=${this.#onAddHeaderClick}>\n          ${i18nString(UIStrings.addHeader)}\n        </${Buttons.Button.Button.litTagName}>\n      ` : LitHtml.nothing}\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  async #onEnableHeaderEditingClick(): Promise<void> {\n    if (!this.#request) {\n      return;\n    }\n    const requestUrl = this.#request.url();\n    const networkPersistanceManager = Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance();\n    if (networkPersistanceManager.project()) {\n      Common.Settings.Settings.instance().moduleSetting('persistenceNetworkOverridesEnabled').set(true);\n      await networkPersistanceManager.getOrCreateHeadersUISourceCodeFromUrl(requestUrl);\n    } else {  // If folder for local overrides has not been provided yet\n      UI.InspectorView.InspectorView.instance().displaySelectOverrideFolderInfobar(async(): Promise<void> => {\n        await Sources.SourcesNavigator.OverridesNavigatorView.instance().setupNewWorkspace();\n        await networkPersistanceManager.getOrCreateHeadersUISourceCodeFromUrl(requestUrl);\n      });\n    }\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-response-header-section', ResponseHeaderSection);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-response-header-section': ResponseHeaderSection;\n  }\n}\n\nconst BlockedReasonDetails = new Map<Protocol.Network.BlockedReason, HeaderDetailsDescriptor>([\n  [\n    Protocol.Network.BlockedReason.CoepFrameResourceNeedsCoepHeader,\n    {\n      name: Platform.StringUtilities.toLowerCaseString('cross-origin-embedder-policy'),\n      value: null,\n      blockedDetails: {\n        explanation: i18nLazyString(UIStrings.toEmbedThisFrameInYourDocument),\n        examples: [{codeSnippet: 'Cross-Origin-Embedder-Policy: require-corp', comment: undefined}],\n        link: {url: 'https://web.dev/coop-coep/'},\n      },\n    },\n  ],\n  [\n    Protocol.Network.BlockedReason.CorpNotSameOriginAfterDefaultedToSameOriginByCoep,\n    {\n      name: Platform.StringUtilities.toLowerCaseString('cross-origin-resource-policy'),\n      value: null,\n      blockedDetails: {\n        explanation: i18nLazyString(UIStrings.toUseThisResourceFromADifferent),\n        examples: [\n          {\n            codeSnippet: 'Cross-Origin-Resource-Policy: same-site',\n            comment: i18nLazyString(UIStrings.chooseThisOptionIfTheResourceAnd),\n          },\n          {\n            codeSnippet: 'Cross-Origin-Resource-Policy: cross-origin',\n            comment: i18nLazyString(UIStrings.onlyChooseThisOptionIfAn),\n          },\n        ],\n        link: {url: 'https://web.dev/coop-coep/'},\n      },\n    },\n  ],\n  [\n    Protocol.Network.BlockedReason.CoopSandboxedIframeCannotNavigateToCoopPage,\n    {\n      name: Platform.StringUtilities.toLowerCaseString('cross-origin-opener-policy'),\n      value: null,\n      headerValueIncorrect: false,\n      blockedDetails: {\n        explanation: i18nLazyString(UIStrings.thisDocumentWasBlockedFrom),\n        examples: [],\n        link: {url: 'https://web.dev/coop-coep/'},\n      },\n    },\n  ],\n  [\n    Protocol.Network.BlockedReason.CorpNotSameSite,\n    {\n      name: Platform.StringUtilities.toLowerCaseString('cross-origin-resource-policy'),\n      value: null,\n      headerValueIncorrect: true,\n      blockedDetails: {\n        explanation: i18nLazyString(UIStrings.toUseThisResourceFromADifferentSite),\n        examples: [\n          {\n            codeSnippet: 'Cross-Origin-Resource-Policy: cross-origin',\n            comment: i18nLazyString(UIStrings.onlyChooseThisOptionIfAn),\n          },\n        ],\n        link: null,\n      },\n    },\n  ],\n  [\n    Protocol.Network.BlockedReason.CorpNotSameOrigin,\n    {\n      name: Platform.StringUtilities.toLowerCaseString('cross-origin-resource-policy'),\n      value: null,\n      headerValueIncorrect: true,\n      blockedDetails: {\n        explanation: i18nLazyString(UIStrings.toUseThisResourceFromADifferentOrigin),\n        examples: [\n          {\n            codeSnippet: 'Cross-Origin-Resource-Policy: same-site',\n            comment: i18nLazyString(UIStrings.chooseThisOptionIfTheResourceAnd),\n          },\n          {\n            codeSnippet: 'Cross-Origin-Resource-Policy: cross-origin',\n            comment: i18nLazyString(UIStrings.onlyChooseThisOptionIfAn),\n          },\n        ],\n        link: null,\n      },\n    },\n  ],\n]);\n"],
  "mappings": "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",
  "names": []
}
