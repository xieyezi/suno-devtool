{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/SharedStorageModel.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nexport class SharedStorageForOrigin extends Common.ObjectWrapper.ObjectWrapper<SharedStorageForOrigin.EventTypes> {\n  readonly #model: SharedStorageModel;\n  readonly #securityOrigin: string;\n\n  constructor(model: SharedStorageModel, securityOrigin: string) {\n    super();\n    this.#model = model;\n    this.#securityOrigin = securityOrigin;\n  }\n\n  get securityOrigin(): string {\n    return this.#securityOrigin;\n  }\n\n  async getMetadata(): Promise<Protocol.Storage.SharedStorageMetadata|null> {\n    return this.#model.storageAgent.invoke_getSharedStorageMetadata({ownerOrigin: this.securityOrigin})\n        .then(({metadata}) => metadata);\n  }\n\n  async getEntries(): Promise<Protocol.Storage.SharedStorageEntry[]|null> {\n    return this.#model.storageAgent.invoke_getSharedStorageEntries({ownerOrigin: this.securityOrigin})\n        .then(({entries}) => entries);\n  }\n\n  async setEntry(key: string, value: string, ignoreIfPresent: boolean): Promise<void> {\n    await this.#model.storageAgent.invoke_setSharedStorageEntry(\n        {ownerOrigin: this.securityOrigin, key, value, ignoreIfPresent});\n  }\n\n  async deleteEntry(key: string): Promise<void> {\n    await this.#model.storageAgent.invoke_deleteSharedStorageEntry({ownerOrigin: this.securityOrigin, key});\n  }\n\n  async clear(): Promise<void> {\n    await this.#model.storageAgent.invoke_clearSharedStorageEntries({ownerOrigin: this.securityOrigin});\n  }\n}\n\nexport namespace SharedStorageForOrigin {\n  // TODO(crbug.com/1167717): Make this a const enum.\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    SharedStorageChanged = 'SharedStorageChanged',\n  }\n\n  export interface SharedStorageChangedEvent {\n    accessTime: Protocol.Network.TimeSinceEpoch;\n    type: Protocol.Storage.SharedStorageAccessType;\n    mainFrameId: Protocol.Page.FrameId;\n    params: Protocol.Storage.SharedStorageAccessParams;\n  }\n\n  export type EventTypes = {\n    [Events.SharedStorageChanged]: SharedStorageChangedEvent,\n  };\n}\n\nexport class SharedStorageModel extends SDK.SDKModel.SDKModel<EventTypes> implements\n    ProtocolProxyApi.StorageDispatcher {\n  readonly #securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager;\n  #storages: Map<string, SharedStorageForOrigin>;\n  readonly storageAgent: ProtocolProxyApi.StorageApi;\n  #enabled: boolean;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n    this.#securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager) as\n        SDK.SecurityOriginManager.SecurityOriginManager;\n    this.#storages = new Map();\n    this.storageAgent = target.storageAgent();\n    this.#enabled = false;\n  }\n\n  async enable(): Promise<void> {\n    if (this.#enabled) {\n      return;\n    }\n\n    this.#securityOriginManager.addEventListener(\n        SDK.SecurityOriginManager.Events.SecurityOriginAdded, this.#securityOriginAdded, this);\n    this.#securityOriginManager.addEventListener(\n        SDK.SecurityOriginManager.Events.SecurityOriginRemoved, this.#securityOriginRemoved, this);\n\n    await this.storageAgent.invoke_setSharedStorageTracking({enable: true});\n    this.#addAllOrigins();\n    this.#enabled = true;\n  }\n\n  disable(): void {\n    if (!this.#enabled) {\n      return;\n    }\n\n    this.#securityOriginManager.removeEventListener(\n        SDK.SecurityOriginManager.Events.SecurityOriginAdded, this.#securityOriginAdded, this);\n    this.#securityOriginManager.removeEventListener(\n        SDK.SecurityOriginManager.Events.SecurityOriginRemoved, this.#securityOriginRemoved, this);\n\n    void this.storageAgent.invoke_setSharedStorageTracking({enable: false});\n    this.#removeAllOrigins();\n    this.#enabled = false;\n  }\n\n  dispose(): void {\n    this.disable();\n  }\n\n  #addAllOrigins(): void {\n    for (const securityOrigin of this.#securityOriginManager.securityOrigins()) {\n      void this.#maybeAddOrigin(securityOrigin);\n    }\n  }\n\n  #removeAllOrigins(): void {\n    for (const securityOrigin of this.#storages.keys()) {\n      this.#removeOrigin(securityOrigin);\n    }\n  }\n\n  #securityOriginAdded(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.#maybeAddOrigin(event.data);\n  }\n\n  #maybeAddOrigin(securityOrigin: string): void {\n    const parsedSecurityOrigin = new Common.ParsedURL.ParsedURL(securityOrigin);\n    // These are \"opaque\" origins which are not supposed to support shared storage.\n    if (!parsedSecurityOrigin.isValid || parsedSecurityOrigin.scheme === 'data' ||\n        parsedSecurityOrigin.scheme === 'about' || parsedSecurityOrigin.scheme === 'javascript') {\n      return;\n    }\n\n    // Only add origin if it's not already added.\n    if (this.#storages.has(securityOrigin)) {\n      return;\n    }\n\n    const storage = new SharedStorageForOrigin(this, securityOrigin);\n    this.#storages.set(securityOrigin, storage);\n    this.dispatchEventToListeners(Events.SharedStorageAdded, storage);\n  }\n\n  #securityOriginRemoved(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.#removeOrigin(event.data);\n  }\n\n  #removeOrigin(securityOrigin: string): void {\n    const storage = this.storageForOrigin(securityOrigin);\n    if (!storage) {\n      return;\n    }\n    this.#storages.delete(securityOrigin);\n    this.dispatchEventToListeners(Events.SharedStorageRemoved, storage);\n  }\n\n  storages(): IterableIterator<SharedStorageForOrigin> {\n    return this.#storages.values();\n  }\n\n  storageForOrigin(origin: string): SharedStorageForOrigin|null {\n    return this.#storages.get(origin) || null;\n  }\n\n  numStoragesForTesting(): number {\n    return this.#storages.size;\n  }\n\n  isChangeEvent(event: Protocol.Storage.SharedStorageAccessedEvent): boolean {\n    return [\n      Protocol.Storage.SharedStorageAccessType.DocumentSet,\n      Protocol.Storage.SharedStorageAccessType.DocumentAppend,\n      Protocol.Storage.SharedStorageAccessType.DocumentDelete,\n      Protocol.Storage.SharedStorageAccessType.DocumentClear,\n      Protocol.Storage.SharedStorageAccessType.WorkletSet,\n      Protocol.Storage.SharedStorageAccessType.WorkletAppend,\n      Protocol.Storage.SharedStorageAccessType.WorkletDelete,\n      Protocol.Storage.SharedStorageAccessType.WorkletClear,\n    ].includes(event.type);\n  }\n\n  sharedStorageAccessed(event: Protocol.Storage.SharedStorageAccessedEvent): void {\n    if (this.isChangeEvent(event)) {\n      const sharedStorage = this.storageForOrigin(event.ownerOrigin);\n\n      if (sharedStorage) {\n        const eventData =\n            {accessTime: event.accessTime, type: event.type, mainFrameId: event.mainFrameId, params: event.params};\n\n        // Forward events that may have changed `sharedStorage` to listeners for `sharedStorage`.\n        sharedStorage.dispatchEventToListeners(SharedStorageForOrigin.Events.SharedStorageChanged, eventData);\n      } else {\n        void this.#maybeAddOrigin(event.ownerOrigin);\n      }\n    }\n\n    this.dispatchEventToListeners(Events.SharedStorageAccess, event);\n  }\n\n  indexedDBListUpdated(_event: Protocol.Storage.IndexedDBListUpdatedEvent): void {\n  }\n\n  indexedDBContentUpdated(_event: Protocol.Storage.IndexedDBContentUpdatedEvent): void {\n  }\n\n  cacheStorageListUpdated(_event: Protocol.Storage.CacheStorageListUpdatedEvent): void {\n  }\n\n  cacheStorageContentUpdated(_event: Protocol.Storage.CacheStorageContentUpdatedEvent): void {\n  }\n\n  interestGroupAccessed(_event: Protocol.Storage.InterestGroupAccessedEvent): void {\n  }\n}\n\nSDK.SDKModel.SDKModel.register(SharedStorageModel, {capabilities: SDK.Target.Capability.Storage, autostart: false});\n\nexport const enum Events {\n  SharedStorageAccess = 'SharedStorageAccess',\n  SharedStorageAdded = 'SharedStorageAdded',\n  SharedStorageRemoved = 'SharedStorageRemoved',\n}\n\nexport type EventTypes = {\n  [Events.SharedStorageAccess]: Protocol.Storage.SharedStorageAccessedEvent,\n  [Events.SharedStorageAdded]: SharedStorageForOrigin,\n  [Events.SharedStorageRemoved]: SharedStorageForOrigin,\n};\n"],
  "mappings": "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",
  "names": []
}
