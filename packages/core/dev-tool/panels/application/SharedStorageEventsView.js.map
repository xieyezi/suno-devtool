{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/SharedStorageEventsView.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as ApplicationComponents from './components/components.js';\n\nimport sharedStorageEventsViewStyles from './sharedStorageEventsView.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Placeholder text instructing the user how to display shared\n   *storage event details.\n   */\n  clickToDisplayBody: 'Click on any shared storage event to display the event parameters.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/SharedStorageEventsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface WrappedEvent {\n  accessTime: string;\n  accessType: string;\n  ownerOrigin: string;\n  eventParams: Object;\n}\n\nfunction eventEquals(\n    a: Protocol.Storage.SharedStorageAccessedEvent, b: Protocol.Storage.SharedStorageAccessedEvent): boolean {\n  return JSON.stringify(a) === JSON.stringify(b);\n}\n\nexport class SharedStorageEventsView extends UI.SplitWidget.SplitWidget {\n  readonly #sharedStorageEventGrid = new ApplicationComponents.SharedStorageAccessGrid.SharedStorageAccessGrid();\n  #events: Protocol.Storage.SharedStorageAccessedEvent[] = [];\n  #noDisplayView: UI.Widget.VBox;\n  #defaultId: Protocol.Page.FrameId = '' as Protocol.Page.FrameId;\n\n  constructor() {\n    super(/* isVertical */ false, /* secondIsSidebar: */ true);\n\n    const topPanel = new UI.Widget.VBox();\n    this.#noDisplayView = new UI.Widget.VBox();\n\n    topPanel.setMinimumSize(0, 80);\n    this.setMainWidget(topPanel);\n    this.#noDisplayView.setMinimumSize(0, 40);\n    this.setSidebarWidget(this.#noDisplayView);\n\n    topPanel.contentElement.appendChild(this.#sharedStorageEventGrid);\n    this.#sharedStorageEventGrid.addEventListener('cellfocused', this.#onFocus.bind(this));\n\n    this.#getMainFrameResourceTreeModel()?.addEventListener(\n        SDK.ResourceTreeModel.Events.MainFrameNavigated, this.clearEvents, this);\n\n    this.#noDisplayView.contentElement.classList.add('placeholder');\n    const noDisplayDiv = this.#noDisplayView.contentElement.createChild('div');\n    noDisplayDiv.textContent = i18nString(UIStrings.clickToDisplayBody);\n  }\n\n  #getMainFrameResourceTreeModel(): SDK.ResourceTreeModel.ResourceTreeModel|null {\n    const mainFrameTarget = SDK.TargetManager.TargetManager.instance().mainFrameTarget();\n    return mainFrameTarget?.model(SDK.ResourceTreeModel.ResourceTreeModel) || null;\n  }\n\n  #getMainFrame(): SDK.ResourceTreeModel.ResourceTreeFrame|null {\n    return this.#getMainFrameResourceTreeModel()?.mainFrame || null;\n  }\n\n  get id(): Protocol.Page.FrameId {\n    return this.#getMainFrame()?.id || this.#defaultId;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    const sidebar = this.sidebarWidget();\n    if (sidebar) {\n      sidebar.registerCSSFiles([sharedStorageEventsViewStyles]);\n    }\n  }\n\n  addEvent(event: Protocol.Storage.SharedStorageAccessedEvent): void {\n    // Only add event if main frame id matches.\n    if (event.mainFrameId !== this.id) {\n      return;\n    }\n\n    // Only add if not already present.\n    if (this.#events.some(t => eventEquals(t, event))) {\n      return;\n    }\n\n    this.#events.push(event);\n    this.#sharedStorageEventGrid.data = this.#events;\n  }\n\n  clearEvents(): void {\n    this.#events = [];\n    this.#sharedStorageEventGrid.data = this.#events;\n    this.setSidebarWidget(this.#noDisplayView);\n  }\n\n  async #onFocus(event: Event): Promise<void> {\n    const focusedEvent = event as DataGrid.DataGridEvents.BodyCellFocusedEvent;\n    const row = focusedEvent.data.row;\n    if (!row) {\n      return;\n    }\n\n    const wrappedEvent: WrappedEvent = {\n      accessTime: row.cells.find(cell => cell.columnId === 'event-time')?.value as string,\n      accessType: row.cells.find(cell => cell.columnId === 'event-type')?.value as string,\n      ownerOrigin: row.cells.find(cell => cell.columnId === 'event-owner-origin')?.value as string,\n      eventParams: JSON.parse(row.cells.find(cell => cell.columnId === 'event-params')?.value as string),\n    } as WrappedEvent;\n\n    const jsonView = SourceFrame.JSONView.JSONView.createViewSync(wrappedEvent);\n    jsonView.setMinimumSize(0, 40);\n    this.setSidebarWidget(jsonView);\n  }\n\n  setDefaultIdForTesting(id: Protocol.Page.FrameId): void {\n    this.#defaultId = id;\n  }\n\n  getEventsForTesting(): Array<Protocol.Storage.SharedStorageAccessedEvent> {\n    return this.#events;\n  }\n\n  getSharedStorageAccessGridForTesting(): ApplicationComponents.SharedStorageAccessGrid.SharedStorageAccessGrid {\n    return this.#sharedStorageEventGrid;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAIA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAKhB,oBAAoB;AAAA;AAEtB,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD;AAC1F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAShE,qBACI,GAAgD,GAAyD;AAC3G,SAAO,KAAK,UAAU,OAAO,KAAK,UAAU;AAAA;AAGvC,6CAAsC,GAAG,YAAY,YAAY;AAAA,4BACnC,IAAI,sBAAsB,wBAAwB;AAAA,YAC5B;AAAA;AAAA,eAErB;AAAA,EAEpC,cAAc;AACZ,UAAuB,OAA8B;AAErD,UAAM,WAAW,IAAI,GAAG,OAAO;AAC/B,0BAAsB,IAAI,GAAG,OAAO;AAEpC,aAAS,eAAe,GAAG;AAC3B,SAAK,cAAc;AACnB,wBAAoB,eAAe,GAAG;AACtC,SAAK,iBAAiB;AAEtB,aAAS,eAAe,YAAY;AACpC,iCAA6B,iBAAiB,eAAe,cAAc,KAAK;AAEhF,2CAAuC,iBACnC,IAAI,kBAAkB,OAAO,oBAAoB,KAAK,aAAa;AAEvE,wBAAoB,eAAe,UAAU,IAAI;AACjD,UAAM,eAAe,oBAAoB,eAAe,YAAY;AACpE,iBAAa,cAAc,WAAW,UAAU;AAAA;AAAA,mCAG6B;AAC7E,UAAM,kBAAkB,IAAI,cAAc,cAAc,WAAW;AACnE,WAAO,iBAAiB,MAAM,IAAI,kBAAkB,sBAAsB;AAAA;AAAA,kBAGd;AAC5D,WAAO,uCAAuC,aAAa;AAAA;AAAA,MAGzD,KAA4B;AAC9B,WAAO,sBAAsB,MAAM;AAAA;AAAA,EAGrC,WAAiB;AACf,UAAM;AACN,UAAM,UAAU,KAAK;AACrB,QAAI,SAAS;AACX,cAAQ,iBAAiB,CAAC;AAAA;AAAA;AAAA,EAI9B,SAAS,OAA0D;AAEjE,QAAI,MAAM,gBAAgB,KAAK,IAAI;AACjC;AAAA;AAIF,QAAI,aAAa,KAAK,OAAK,YAAY,GAAG,SAAS;AACjD;AAAA;AAGF,iBAAa,KAAK;AAClB,iCAA6B,OAAO;AAAA;AAAA,EAGtC,cAAoB;AAClB,mBAAe;AACf,iCAA6B,OAAO;AACpC,SAAK,iBAAiB;AAAA;AAAA,iBAGT,OAA6B;AAC1C,UAAM,eAAe;AACrB,UAAM,MAAM,aAAa,KAAK;AAC9B,QAAI,CAAC,KAAK;AACR;AAAA;AAGF,UAAM,eAA6B;AAAA,MACjC,YAAY,IAAI,MAAM,KAAK,UAAQ,KAAK,aAAa,eAAe;AAAA,MACpE,YAAY,IAAI,MAAM,KAAK,UAAQ,KAAK,aAAa,eAAe;AAAA,MACpE,aAAa,IAAI,MAAM,KAAK,UAAQ,KAAK,aAAa,uBAAuB;AAAA,MAC7E,aAAa,KAAK,MAAM,IAAI,MAAM,KAAK,UAAQ,KAAK,aAAa,iBAAiB;AAAA;AAGpF,UAAM,WAAW,YAAY,SAAS,SAAS,eAAe;AAC9D,aAAS,eAAe,GAAG;AAC3B,SAAK,iBAAiB;AAAA;AAAA,EAGxB,uBAAuB,IAAiC;AACtD,sBAAkB;AAAA;AAAA,EAGpB,sBAA0E;AACxE,WAAO;AAAA;AAAA,EAGT,uCAA8G;AAC5G,WAAO;AAAA;AAAA;",
  "names": []
}
