{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/SharedStorageItemsView.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ApplicationComponents from './components/components.js';\n\nimport {SharedStorageForOrigin} from './SharedStorageModel.js';\nimport {StorageItemsView} from './StorageItemsView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in SharedStorage Items View of the Application panel\n   */\n  sharedStorage: 'Shared Storage',\n  /**\n   *@description Text in SharedStorage Items View of the Application panel\n   */\n  key: 'Key',\n  /**\n   *@description Text for the value of something\n   */\n  value: 'Value',\n  /**\n   *@description Name for the \"Shared Storage Items\" table that shows the content of the Shared Storage.\n   */\n  sharedStorageItems: 'Shared Storage Items',\n  /**\n   *@description Text for announcing that the \"Shared Storage Items\" table was cleared, that is, all\n   * entries were deleted.\n   */\n  sharedStorageItemsCleared: 'Shared Storage items cleared',\n  /**\n   *@description Text for announcing that the filtered \"Shared Storage Items\" table was cleared, that is,\n   * all filtered entries were deleted.\n   */\n  sharedStorageFilteredItemsCleared: 'Shared Storage filtered items cleared',\n  /**\n   *@description Text in SharedStorage Items View of the Application panel\n   */\n  selectAValueToPreview: 'Select a value to preview',\n  /**\n   *@description Text for announcing a Shared Storage key/value item has been deleted\n   */\n  sharedStorageItemDeleted: 'The storage item was deleted.',\n  /**\n   *@description Text for announcing a Shared Storage key/value item has been edited\n   */\n  sharedStorageItemEdited: 'The storage item was edited.',\n  /**\n   *@description Text for announcing a Shared Storage key/value item edit request has been canceled\n   */\n  sharedStorageItemEditCanceled: 'The storage item edit was canceled.',\n  /**\n   *@description Text for announcing number of entries after filtering\n   *@example {5} PH1\n   */\n  sharedStorageNumberEntries: 'Number of entries shown in table: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/SharedStorageItemsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface WrappedEntry {\n  key: string;\n  value: string;\n}\n\nexport namespace SharedStorageItemsDispatcher {\n  // TODO(crbug.com/1167717): Make this a const enum.\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    FilteredItemsCleared = 'FilteredItemsCleared',\n    ItemDeleted = 'ItemDeleted',\n    ItemEdited = 'ItemEdited',\n    ItemsCleared = 'ItemsCleared',\n    ItemsRefreshed = 'ItemsRefreshed',\n  }\n\n  export interface ItemDeletedEvent {\n    key: string;\n  }\n\n  export interface ItemEditedEvent {\n    columnIdentifier: string;\n    oldText: string;\n    newText: string;\n  }\n\n  export type EventTypes = {\n    [Events.FilteredItemsCleared]: void,\n    [Events.ItemDeleted]: ItemDeletedEvent,\n    [Events.ItemEdited]: ItemEditedEvent,\n    [Events.ItemsCleared]: void,\n    [Events.ItemsRefreshed]: void,\n  };\n}\n\nexport class SharedStorageItemsView extends StorageItemsView {\n  #sharedStorage: SharedStorageForOrigin;\n  readonly outerSplitWidget: UI.SplitWidget.SplitWidget;\n  readonly innerSplitWidget: UI.SplitWidget.SplitWidget;\n  #metadataView: ApplicationComponents.SharedStorageMetadataView.SharedStorageMetadataView;\n  readonly dataGrid: DataGrid.DataGrid.DataGridImpl<Protocol.Storage.SharedStorageEntry>;\n  #noDisplayView: UI.Widget.VBox;\n  #eventListeners: Common.EventTarget.EventDescriptor[];\n  readonly sharedStorageItemsDispatcher: Common.ObjectWrapper.ObjectWrapper<SharedStorageItemsDispatcher.EventTypes>;\n\n  constructor(sharedStorage: SharedStorageForOrigin) {\n    super(i18nString(UIStrings.sharedStorage), 'sharedStoragePanel');\n\n    this.#sharedStorage = sharedStorage;\n\n    this.element.classList.add('storage-view', 'table');\n\n    const columns = ([\n      {id: 'key', title: i18nString(UIStrings.key), sortable: false, editable: true, longText: true, weight: 50},\n      {id: 'value', title: i18nString(UIStrings.value), sortable: false, editable: true, longText: true, weight: 50},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    this.dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.sharedStorageItems),\n      columns,\n      editCallback: this.#editingCallback.bind(this),\n      deleteCallback: this.#deleteCallback.bind(this),\n      refreshCallback: this.refreshItems.bind(this),\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, event => {\n      void this.#previewEntry(event.data);\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.DeselectedNode, () => {\n      void this.#previewEntry(null);\n    });\n    this.dataGrid.setStriped(true);\n    this.dataGrid.setName('SharedStorageItemsView');\n\n    const dataGridWidget = this.dataGrid.asWidget();\n    dataGridWidget.setMinimumSize(0, 100);\n\n    this.#metadataView = new ApplicationComponents.SharedStorageMetadataView.SharedStorageMetadataView(\n        sharedStorage, sharedStorage.securityOrigin);\n    this.#metadataView.setMinimumSize(0, 275);\n    const innerResizer = this.#metadataView.element.createChild('div', 'metadata-view-resizer');\n\n    this.innerSplitWidget = new UI.SplitWidget.SplitWidget(\n        /* isVertical: */ false, /* secondIsSidebar: */ false, 'sharedStorageInnerSplitViewState');\n    this.innerSplitWidget.setSidebarWidget(this.#metadataView);\n    this.innerSplitWidget.setMainWidget(dataGridWidget);\n    this.innerSplitWidget.installResizer(innerResizer);\n\n    this.#noDisplayView = new UI.Widget.VBox();\n    this.#noDisplayView.setMinimumSize(0, 25);\n    const outerResizer = this.#noDisplayView.element.createChild('div', 'preview-panel-resizer');\n\n    this.outerSplitWidget = new UI.SplitWidget.SplitWidget(\n        /* isVertical: */ false, /* secondIsSidebar: */ true, 'sharedStorageOuterSplitViewState');\n    this.outerSplitWidget.show(this.element);\n    this.outerSplitWidget.setMainWidget(this.innerSplitWidget);\n    this.outerSplitWidget.setSidebarWidget(this.#noDisplayView);\n    this.outerSplitWidget.installResizer(outerResizer);\n\n    this.#noDisplayView.contentElement.classList.add('placeholder');\n    const noDisplayDiv = this.#noDisplayView.contentElement.createChild('div');\n    noDisplayDiv.textContent = i18nString(UIStrings.selectAValueToPreview);\n\n    this.#eventListeners = [];\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#sharedStorage = sharedStorage;\n    this.#eventListeners = [\n      this.#sharedStorage.addEventListener(\n          SharedStorageForOrigin.Events.SharedStorageChanged, this.#sharedStorageChanged, this),\n    ];\n\n    this.sharedStorageItemsDispatcher =\n        new Common.ObjectWrapper.ObjectWrapper<SharedStorageItemsDispatcher.EventTypes>();\n  }\n\n  // Use `createView()` instead of the constructor to create a view, so that entries can be awaited asynchronously.\n  static async createView(sharedStorage: SharedStorageForOrigin): Promise<SharedStorageItemsView> {\n    const view = new SharedStorageItemsView(sharedStorage);\n    await view.updateEntriesOnly();\n    return view;\n  }\n\n  async updateEntriesOnly(): Promise<void> {\n    if (!this.isShowing()) {\n      return;\n    }\n    const entries = await this.#sharedStorage.getEntries();\n    if (entries) {\n      this.#showSharedStorageItems(entries);\n    }\n  }\n\n  async #sharedStorageChanged(): Promise<void> {\n    await this.refreshItems();\n  }\n\n  async refreshItems(): Promise<void> {\n    if (!this.isShowing()) {\n      return;\n    }\n    await this.#metadataView.doUpdate();\n    await this.updateEntriesOnly();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(SharedStorageItemsDispatcher.Events.ItemsRefreshed);\n  }\n\n  async deleteSelectedItem(): Promise<void> {\n    if (!this.dataGrid.selectedNode) {\n      return;\n    }\n\n    await this.#deleteCallback(this.dataGrid.selectedNode);\n  }\n\n  async deleteAllItems(): Promise<void> {\n    if (!this.hasFilter()) {\n      await this.#sharedStorage.clear();\n      await this.refreshItems();\n      this.sharedStorageItemsDispatcher.dispatchEventToListeners(SharedStorageItemsDispatcher.Events.ItemsCleared);\n      UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemsCleared));\n      return;\n    }\n\n    await Promise.all(this.dataGrid.rootNode()\n                          .children.filter(node => node.data.key)\n                          .map(node => this.#sharedStorage.deleteEntry(node.data.key)));\n\n    await this.refreshItems();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(\n        SharedStorageItemsDispatcher.Events.FilteredItemsCleared);\n    UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageFilteredItemsCleared));\n  }\n\n  async #editingCallback(\n      editingNode: DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>, columnIdentifier: string,\n      oldText: string, newText: string): Promise<void> {\n    if (columnIdentifier === 'key' && newText === '') {\n      // The Shared Storage backend does not currently allow '' as a key, so we only set a new entry with a new key if its new key is nonempty.\n      await this.refreshItems();\n      UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemEditCanceled));\n      return;\n    }\n    if (columnIdentifier === 'key') {\n      await this.#sharedStorage.deleteEntry(oldText);\n      await this.#sharedStorage.setEntry(newText, editingNode.data.value || '', false);\n    } else {\n      // The Shared Storage backend does not currently allow '' as a key, so we use ' ' as the default key instead.\n      await this.#sharedStorage.setEntry(editingNode.data.key || ' ', newText, false);\n    }\n\n    await this.refreshItems();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(\n        SharedStorageItemsDispatcher.Events.ItemEdited,\n        {columnIdentifier, oldText, newText} as SharedStorageItemsDispatcher.ItemEditedEvent);\n    UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemEdited));\n  }\n\n  #showSharedStorageItems(items: Protocol.Storage.SharedStorageEntry[]): void {\n    const rootNode = this.dataGrid.rootNode();\n    const [selectedKey] = rootNode.children.filter(node => node.selected).map(node => node.data.key);\n    rootNode.removeChildren();\n    let selectedNode: DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>|null = null;\n    const filteredItems = (item: Protocol.Storage.SharedStorageEntry): string => `${item.key} ${item.value}`;\n    const filteredList = this.filter(items, filteredItems);\n    for (const item of filteredList) {\n      const node = new DataGrid.DataGrid.DataGridNode({key: item.key, value: item.value}, false);\n      node.selectable = true;\n      rootNode.appendChild(node);\n      if (!selectedNode || item.key === selectedKey) {\n        selectedNode = node;\n      }\n    }\n    if (selectedNode) {\n      selectedNode.selected = true;\n    }\n    this.dataGrid.addCreationNode(false);\n    this.setCanDeleteSelected(Boolean(selectedNode));\n    UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageNumberEntries, {PH1: filteredList.length}));\n  }\n\n  async #deleteCallback(node: DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>): Promise<void> {\n    if (!node || node.isCreationNode || !this.#sharedStorage) {\n      return;\n    }\n\n    const key = node.data.key;\n    await this.#sharedStorage.deleteEntry(key);\n    await this.refreshItems();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(\n        SharedStorageItemsDispatcher.Events.ItemDeleted, {key} as SharedStorageItemsDispatcher.ItemDeletedEvent);\n    UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemDeleted));\n  }\n\n  async #previewEntry(entry: DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>|null): Promise<void> {\n    const key = entry?.data?.key;\n    const value = entry?.data?.value;\n    const wrappedEntry = key && {key: key as string, value: value as string || ''} as WrappedEntry;\n    if (wrappedEntry) {\n      const preview = SourceFrame.JSONView.JSONView.createViewSync(wrappedEntry);\n\n      // Selection could've changed while the preview was loaded\n      if (entry.selected) {\n        this.outerSplitWidget.setSidebarWidget(preview);\n      }\n    } else {\n      this.outerSplitWidget.setSidebarWidget(this.#noDisplayView);\n    }\n  }\n\n  getEntriesForTesting(): Array<Protocol.Storage.SharedStorageEntry> {\n    return this.dataGrid.rootNode()\n        .children.filter(node => node.data.key)\n        .map(node => (node.data as Protocol.Storage.SharedStorageEntry));\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,eAAe;AAAA,EAIf,KAAK;AAAA,EAIL,OAAO;AAAA,EAIP,oBAAoB;AAAA,EAKpB,2BAA2B;AAAA,EAK3B,mCAAmC;AAAA,EAInC,uBAAuB;AAAA,EAIvB,0BAA0B;AAAA,EAI1B,yBAAyB;AAAA,EAIzB,+BAA+B;AAAA,EAK/B,4BAA4B;AAAA;AAE9B,MAAM,OAAO,KAAK,KAAK,kBAAkB,gDAAgD;AACzF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAOzD,WAAU;AAAV,EAAU,kCAAV;AAGE,MAAK;AAAL,IAAK,YAAL;AACL,sCAAuB;AACvB,6BAAc;AACd,4BAAa;AACb,8BAAe;AACf,gCAAiB;AAAA,KALP;AAAA,GAHG;AA8BV,4CAAqC,iBAAiB;AAAA;AAAA,EAElD;AAAA,EACA;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA,EAGA;AAAA,EAET,YAAY,eAAuC;AACjD,UAAM,WAAW,UAAU,gBAAgB;AAE3C,0BAAsB;AAEtB,SAAK,QAAQ,UAAU,IAAI,gBAAgB;AAE3C,UAAM,UAAW;AAAA,MACf,EAAC,IAAI,OAAO,OAAO,WAAW,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,UAAU,MAAM,QAAQ;AAAA,MACvG,EAAC,IAAI,SAAS,OAAO,WAAW,UAAU,QAAQ,UAAU,OAAO,UAAU,MAAM,UAAU,MAAM,QAAQ;AAAA;AAE7G,SAAK,WAAW,IAAI,SAAS,SAAS,aAAa;AAAA,MACjD,aAAa,WAAW,UAAU;AAAA,MAClC;AAAA,MACA,cAAc,sBAAsB,KAAK;AAAA,MACzC,gBAAgB,qBAAqB,KAAK;AAAA,MAC1C,iBAAiB,KAAK,aAAa,KAAK;AAAA;AAE1C,SAAK,SAAS,iBAAiB,SAAS,SAAS,OAAO,cAAc,WAAS;AAC7E,WAAK,mBAAmB,MAAM;AAAA;AAEhC,SAAK,SAAS,iBAAiB,SAAS,SAAS,OAAO,gBAAgB,MAAM;AAC5E,WAAK,mBAAmB;AAAA;AAE1B,SAAK,SAAS,WAAW;AACzB,SAAK,SAAS,QAAQ;AAEtB,UAAM,iBAAiB,KAAK,SAAS;AACrC,mBAAe,eAAe,GAAG;AAEjC,yBAAqB,IAAI,sBAAsB,0BAA0B,0BACrE,eAAe,cAAc;AACjC,uBAAmB,eAAe,GAAG;AACrC,UAAM,eAAe,mBAAmB,QAAQ,YAAY,OAAO;AAEnE,SAAK,mBAAmB,IAAI,GAAG,YAAY,YACrB,OAA8B,OAAO;AAC3D,SAAK,iBAAiB,iBAAiB;AACvC,SAAK,iBAAiB,cAAc;AACpC,SAAK,iBAAiB,eAAe;AAErC,0BAAsB,IAAI,GAAG,OAAO;AACpC,wBAAoB,eAAe,GAAG;AACtC,UAAM,eAAe,oBAAoB,QAAQ,YAAY,OAAO;AAEpE,SAAK,mBAAmB,IAAI,GAAG,YAAY,YACrB,OAA8B,MAAM;AAC1D,SAAK,iBAAiB,KAAK,KAAK;AAChC,SAAK,iBAAiB,cAAc,KAAK;AACzC,SAAK,iBAAiB,iBAAiB;AACvC,SAAK,iBAAiB,eAAe;AAErC,wBAAoB,eAAe,UAAU,IAAI;AACjD,UAAM,eAAe,oBAAoB,eAAe,YAAY;AACpE,iBAAa,cAAc,WAAW,UAAU;AAEhD,2BAAuB;AACvB,WAAO,YAAY,qBAAqB;AACxC,0BAAsB;AACtB,2BAAuB;AAAA,MACrB,oBAAoB,iBAChB,uBAAuB,OAAO,sBAAsB,4BAA4B;AAAA;AAGtF,SAAK,+BACD,IAAI,OAAO,cAAc;AAAA;AAAA,eAIlB,WAAW,eAAwE;AAC9F,UAAM,OAAO,IAAI,uBAAuB;AACxC,UAAM,KAAK;AACX,WAAO;AAAA;AAAA,QAGH,oBAAmC;AACvC,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAEF,UAAM,UAAU,MAAM,oBAAoB;AAC1C,QAAI,SAAS;AACX,mCAA6B;AAAA;AAAA;AAAA,gCAIY;AAC3C,UAAM,KAAK;AAAA;AAAA,QAGP,eAA8B;AAClC,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAEF,UAAM,mBAAmB;AACzB,UAAM,KAAK;AACX,SAAK,6BAA6B,yBAAyB;AAAA;AAAA,QAGvD,qBAAoC;AACxC,QAAI,CAAC,KAAK,SAAS,cAAc;AAC/B;AAAA;AAGF,UAAM,qBAAqB,KAAK,SAAS;AAAA;AAAA,QAGrC,iBAAgC;AACpC,QAAI,CAAC,KAAK,aAAa;AACrB,YAAM,oBAAoB;AAC1B,YAAM,KAAK;AACX,WAAK,6BAA6B,yBAAyB;AAC3D,SAAG,UAAU,MAAM,WAAW,UAAU;AACxC;AAAA;AAGF,UAAM,QAAQ,IAAI,KAAK,SAAS,WACT,SAAS,OAAO,UAAQ,KAAK,KAAK,KAClC,IAAI,UAAQ,oBAAoB,YAAY,KAAK,KAAK;AAE7E,UAAM,KAAK;AACX,SAAK,6BAA6B,yBAC9B;AACJ,OAAG,UAAU,MAAM,WAAW,UAAU;AAAA;AAAA,yBAItC,aAAkF,kBAClF,SAAiB,SAAgC;AACnD,QAAI,qBAAqB,SAAS,YAAY,IAAI;AAEhD,YAAM,KAAK;AACX,SAAG,UAAU,MAAM,WAAW,UAAU;AACxC;AAAA;AAEF,QAAI,qBAAqB,OAAO;AAC9B,YAAM,oBAAoB,YAAY;AACtC,YAAM,oBAAoB,SAAS,SAAS,YAAY,KAAK,SAAS,IAAI;AAAA,WACrE;AAEL,YAAM,oBAAoB,SAAS,YAAY,KAAK,OAAO,KAAK,SAAS;AAAA;AAG3E,UAAM,KAAK;AACX,SAAK,6BAA6B,yBAC9B,+BACA,EAAC,kBAAkB,SAAS;AAChC,OAAG,UAAU,MAAM,WAAW,UAAU;AAAA;AAAA,0BAGlB,OAAoD;AAC1E,UAAM,WAAW,KAAK,SAAS;AAC/B,UAAM,CAAC,eAAe,SAAS,SAAS,OAAO,UAAQ,KAAK,UAAU,IAAI,UAAQ,KAAK,KAAK;AAC5F,aAAS;AACT,QAAI,eAAyF;AAC7F,UAAM,gBAAgB,CAAC,SAAsD,GAAG,KAAK,OAAO,KAAK;AACjG,UAAM,eAAe,KAAK,OAAO,OAAO;AACxC,eAAW,QAAQ,cAAc;AAC/B,YAAM,OAAO,IAAI,SAAS,SAAS,aAAa,EAAC,KAAK,KAAK,KAAK,OAAO,KAAK,SAAQ;AACpF,WAAK,aAAa;AAClB,eAAS,YAAY;AACrB,UAAI,CAAC,gBAAgB,KAAK,QAAQ,aAAa;AAC7C,uBAAe;AAAA;AAAA;AAGnB,QAAI,cAAc;AAChB,mBAAa,WAAW;AAAA;AAE1B,SAAK,SAAS,gBAAgB;AAC9B,SAAK,qBAAqB,QAAQ;AAClC,OAAG,UAAU,MAAM,WAAW,UAAU,4BAA4B,EAAC,KAAK,aAAa;AAAA;AAAA,wBAGnE,MAA0F;AAC9G,QAAI,CAAC,QAAQ,KAAK,kBAAkB,CAAC,qBAAqB;AACxD;AAAA;AAGF,UAAM,MAAM,KAAK,KAAK;AACtB,UAAM,oBAAoB,YAAY;AACtC,UAAM,KAAK;AACX,SAAK,6BAA6B,yBAC9B,iCAAiD,EAAC;AACtD,OAAG,UAAU,MAAM,WAAW,UAAU;AAAA;AAAA,sBAGtB,OAAgG;AAClH,UAAM,MAAM,OAAO,MAAM;AACzB,UAAM,QAAQ,OAAO,MAAM;AAC3B,UAAM,eAAe,OAAO,EAAC,KAAoB,OAAO,SAAmB;AAC3E,QAAI,cAAc;AAChB,YAAM,UAAU,YAAY,SAAS,SAAS,eAAe;AAG7D,UAAI,MAAM,UAAU;AAClB,aAAK,iBAAiB,iBAAiB;AAAA;AAAA,WAEpC;AACL,WAAK,iBAAiB,iBAAiB;AAAA;AAAA;AAAA,EAI3C,uBAAmE;AACjE,WAAO,KAAK,SAAS,WAChB,SAAS,OAAO,UAAQ,KAAK,KAAK,KAClC,IAAI,UAAS,KAAK;AAAA;AAAA;",
  "names": []
}
