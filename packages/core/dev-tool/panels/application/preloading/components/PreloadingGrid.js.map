{
  "version": 3,
  "sources": ["../../../../../../../../front_end/panels/application/preloading/components/PreloadingGrid.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as DataGrid from '../../../../ui/components/data_grid/data_grid.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\n\nimport preloadingGridStyles from './preloadingGrid.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Column header for a table displaying prerendering attempt.\n   */\n  startedAt: 'Started at',\n  /**\n   *@description Column header for a table displaying prerendering attempt.\n   */\n  type: 'Type',\n  /**\n   *@description Column header for a table displaying prerendering attempt.\n   */\n  trigger: 'Trigger',\n  /**\n   *@description Column header for a table displaying prerendering attempt.\n   */\n  status: 'Status',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/preloading/components/PreloadingGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {render, html} = LitHtml;\n\nexport interface PreloadingGridRow {\n  id: string;\n  startedAt: string;\n  type: string;\n  trigger: string;\n  url: string;\n  status: string;\n}\n\n// Grid component to show prerendering attempts.\nexport class PreloadingGrid extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-resources-preloading-grid`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #rows: PreloadingGridRow[] = [];\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [preloadingGridStyles];\n    this.#render();\n  }\n\n  update(rows: PreloadingGridRow[]): void {\n    this.#rows = rows;\n    this.#render();\n  }\n\n  #render(): void {\n    const reportsGridData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'startedAt',\n          title: i18nString(UIStrings.startedAt),\n          widthWeighting: 20,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'type',\n          title: i18nString(UIStrings.type),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'trigger',\n          title: i18nString(UIStrings.trigger),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'url',\n          title: i18n.i18n.lockedString('URL'),\n          widthWeighting: 40,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'status',\n          title: i18nString(UIStrings.status),\n          widthWeighting: 20,\n          hideable: false,\n          visible: true,\n        },\n      ],\n      rows: this.#buildReportRows(),\n    };\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"preloading-container\">\n        <${DataGrid.DataGridController.DataGridController.litTagName} .data=${\n            reportsGridData as DataGrid.DataGridController.DataGridControllerData}>\n        </${DataGrid.DataGridController.DataGridController.litTagName}>\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #buildReportRows(): DataGrid.DataGridUtils.Row[] {\n    return this.#rows.map(row => ({\n                            cells: [\n                              {columnId: 'id', value: row.id},\n                              {columnId: 'type', value: row.type},\n                              {columnId: 'startedAt', value: row.startedAt},\n                              {columnId: 'trigger', value: row.trigger},\n                              {columnId: 'url', value: row.url},\n                              {columnId: 'status', value: row.status},\n                            ],\n                          }));\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-resources-preloading-grid', PreloadingGrid);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-resources-preloading-grid': PreloadingGrid;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,WAAW;AAAA,EAIX,MAAM;AAAA,EAIN,SAAS;AAAA,EAIT,QAAQ;AAAA;AAEV,MAAM,OAAO,KAAK,KAAK,kBAAkB,8DAA8D;AAChG,aAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEvE,MAAM,EAAC,QAAQ,SAAQ;AAYhB,oCAA6B,YAAY;AAAA,SAC9B,aAAa,QAAQ;AAAA,YAElB,KAAK,aAAa,EAAC,MAAM;AAAA,UACf;AAAA,EAE7B,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AACnC;AAAA;AAAA,EAGF,OAAO,MAAiC;AACtC,iBAAa;AACb;AAAA;AAAA,YAGc;AACd,UAAM,kBAAsE;AAAA,MAC1E,SAAS;AAAA,QACP;AAAA,UACE,IAAI;AAAA,UACJ,OAAO,WAAW,UAAU;AAAA,UAC5B,gBAAgB;AAAA,UAChB,UAAU;AAAA,UACV,SAAS;AAAA;AAAA,QAEX;AAAA,UACE,IAAI;AAAA,UACJ,OAAO,WAAW,UAAU;AAAA,UAC5B,gBAAgB;AAAA,UAChB,UAAU;AAAA,UACV,SAAS;AAAA;AAAA,QAEX;AAAA,UACE,IAAI;AAAA,UACJ,OAAO,WAAW,UAAU;AAAA,UAC5B,gBAAgB;AAAA,UAChB,UAAU;AAAA,UACV,SAAS;AAAA;AAAA,QAEX;AAAA,UACE,IAAI;AAAA,UACJ,OAAO,KAAK,KAAK,aAAa;AAAA,UAC9B,gBAAgB;AAAA,UAChB,UAAU;AAAA,UACV,SAAS;AAAA;AAAA,QAEX;AAAA,UACE,IAAI;AAAA,UACJ,OAAO,WAAW,UAAU;AAAA,UAC5B,gBAAgB;AAAA,UAChB,UAAU;AAAA,UACV,SAAS;AAAA;AAAA;AAAA,MAGb,MAAM;AAAA;AAKR,WAAO;AAAA;AAAA,WAEA,SAAS,mBAAmB,mBAAmB,oBAC9C;AAAA,YACA,SAAS,mBAAmB,mBAAmB;AAAA;AAAA,OAEpD,cAAc,EAAC,MAAM;AAAA;AAAA,qBAIuB;AAC/C,WAAO,WAAW,IAAI,SAAQ;AAAA,MACN,OAAO;AAAA,QACL,EAAC,UAAU,MAAM,OAAO,IAAI;AAAA,QAC5B,EAAC,UAAU,QAAQ,OAAO,IAAI;AAAA,QAC9B,EAAC,UAAU,aAAa,OAAO,IAAI;AAAA,QACnC,EAAC,UAAU,WAAW,OAAO,IAAI;AAAA,QACjC,EAAC,UAAU,OAAO,OAAO,IAAI;AAAA,QAC7B,EAAC,UAAU,UAAU,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAM9D,iBAAiB,eAAe,gBAAgB,sCAAsC;",
  "names": []
}
