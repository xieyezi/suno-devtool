{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/application/preloading/PreloadingView.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as DataGrid from '../../../ui/components/data_grid/data_grid.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\n\nimport * as PreloadingComponents from './components/components.js';\n\n// eslint-disable-next-line rulesdir/es_modules_import\nimport emptyWidgetStyles from '../../../ui/legacy/emptyWidget.css.js';\nimport preloadingViewStyles from './preloadingView.css.js';\n\ntype PreloadingId = SDK.PrerenderingModel.PreloadingId;\ntype PrerenderingAttempt = SDK.PrerenderingModel.PrerenderingAttempt;\ntype PrerenderingAttemptWithId = SDK.PrerenderingModel.PrerenderingAttemptWithId;\n\nconst UIStrings = {\n  /**\n   *@description Text to clear content\n   */\n  clearNotOngoing: 'Clear not ongoing',\n  /**\n   *@description Text in grid and details\n   */\n  statusPrerendering: 'Prerendering',\n  /**\n   *@description Text in grid and details\n   */\n  statusActivated: 'Activated',\n  /**\n   *@description Text in grid and details\n   */\n  statusDiscarded: 'Discarded',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/preloading/PreloadingView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nclass PrerenderingUIUtils {\n  static trigger(x: PrerenderingAttempt): string {\n    switch (x.trigger.kind) {\n      case 'PrerenderingTriggerSpecRules':\n        return i18n.i18n.lockedString('Speculation Rules');\n      case 'PrerenderingTriggerDUI':\n        return i18n.i18n.lockedString('Direct User Input');\n      case 'PrerenderingTriggerDSE':\n        return i18n.i18n.lockedString('Default Search Engine');\n      case 'PrerenderingTriggerOpaque':\n        return i18n.i18n.lockedString('Opaque');\n    }\n  }\n\n  static status(x: PrerenderingAttempt): string {\n    switch (x.status) {\n      case SDK.PrerenderingModel.PrerenderingStatus.Prerendering:\n        return i18nString(UIStrings.statusPrerendering);\n      case SDK.PrerenderingModel.PrerenderingStatus.Activated:\n        return i18nString(UIStrings.statusActivated);\n      case SDK.PrerenderingModel.PrerenderingStatus.Discarded:\n        return i18nString(UIStrings.statusDiscarded);\n    }\n  }\n}\n\nexport class PreloadingView extends UI.Widget.VBox {\n  private readonly model: SDK.PrerenderingModel.PrerenderingModel;\n  private focused: PreloadingId|null = null;\n\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly grid = new PreloadingComponents.PreloadingGrid.PreloadingGrid();\n  private readonly bottomContainer: UI.Widget.VBox;\n  private details = new PreloadingComponents.PreloadingDetailsReportView.PreloadingDetailsReportView();\n\n  constructor(model: SDK.PrerenderingModel.PrerenderingModel) {\n    super(/* isWebComponent */ true, /* delegatesFocus */ false);\n\n    this.model = model;\n    this.model.addEventListener(SDK.PrerenderingModel.Events.PrerenderingAttemptStarted, this.onModelUpdated, this);\n    this.model.addEventListener(SDK.PrerenderingModel.Events.PrerenderingAttemptUpdated, this.onModelUpdated, this);\n    this.model.addEventListener(SDK.PrerenderingModel.Events.PrerenderingAttemptsRemoved, this.onModelUpdated, this);\n\n    // this (VBox)\n    //   +- toolbar (| [clear] |)\n    //   +- splitWidget\n    //        +- topContainer\n    //             +- PreloadingGrid\n    //        +- bottomContainer\n    //             +- PreloadingDetailsReportView\n    //\n    // - If an row selected, PreloadingDetailsReportView shows details of it.\n    // - If not, PreloadingDetailsReportView shows some messages.\n\n    this.toolbar = new UI.Toolbar.Toolbar('preloading-toolbar', this.contentElement);\n\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearNotOngoing), 'largeicon-clear');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.onClearNotOngoing, this);\n    this.toolbar.appendToolbarItem(clearButton);\n\n    this.toolbar.appendSeparator();\n\n    const topContainer = new UI.Widget.VBox();\n    topContainer.setMinimumSize(0, 40);\n    this.bottomContainer = new UI.Widget.VBox();\n    this.bottomContainer.setMinimumSize(0, 80);\n    this.splitWidget = new UI.SplitWidget.SplitWidget(\n        /* isVertical */ false,\n        /* secondIsSidebar */ true,\n        /* settingName */ undefined,\n        /* defaultSidebarWidth */ undefined,\n        /* defaultSidebarHeight */ 500,\n        /* constraintsInDip */ undefined,\n    );\n    this.splitWidget.setMainWidget(topContainer);\n    this.splitWidget.setSidebarWidget(this.bottomContainer);\n\n    this.grid.addEventListener('cellfocused', this.onCellFocused.bind(this));\n    topContainer.contentElement.appendChild(this.grid);\n    this.bottomContainer.contentElement.appendChild(this.details);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n\n    this.registerCSSFiles([emptyWidgetStyles, preloadingViewStyles]);\n\n    this.splitWidget.show(this.contentElement);\n\n    this.onModelUpdated();\n  }\n\n  private updateDetails(): void {\n    this.details.data = this.focused === null ? null : this.model.getById(this.focused);\n  }\n\n  private onModelUpdated(): void {\n    // Update grid\n    const rows = this.model.getAll().map(\n        ({id, attempt}: PrerenderingAttemptWithId): PreloadingComponents.PreloadingGrid.PreloadingGridRow => {\n          return {\n            id,\n            startedAt: new Date(attempt.startedAt).toLocaleString(),\n            type: i18n.i18n.lockedString('Prerendering'),\n            trigger: PrerenderingUIUtils.trigger(attempt),\n            url: attempt.url,\n            status: PrerenderingUIUtils.status(attempt),\n          };\n        });\n    this.grid.update(rows);\n\n    this.updateDetails();\n  }\n\n  private onCellFocused(event: Event): void {\n    const focusedEvent = event as DataGrid.DataGridEvents.BodyCellFocusedEvent;\n    this.focused = focusedEvent.data.row.cells.find(cell => cell.columnId === 'id')?.value as PreloadingId;\n    this.updateDetails();\n  }\n\n  private onClearNotOngoing(): void {\n    this.model.clearNotOngoing();\n  }\n\n  getGridForTest(): PreloadingComponents.PreloadingGrid.PreloadingGrid {\n    return this.grid;\n  }\n\n  getDetailsForTest(): PreloadingComponents.PreloadingDetailsReportView.PreloadingDetailsReportView {\n    return this.details;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
